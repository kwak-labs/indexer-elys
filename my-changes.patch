diff --git a/.github/workflows/delete-branch-snapshot.yml b/.github/workflows/delete-branch-snapshot.yml
index ea3e025e..3a75e32d 100644
--- a/.github/workflows/delete-branch-snapshot.yml
+++ b/.github/workflows/delete-branch-snapshot.yml
@@ -12,7 +12,7 @@ jobs:
     steps:
       - name: Retrieve post upgrade snapshot generator binary
         run: |
-          POST_UPGRADE_SNAPSHOT_GENERATOR_VERSION=v0.5.17
+          POST_UPGRADE_SNAPSHOT_GENERATOR_VERSION=v0.6.1
           DOWNLOAD_URL=https://github.com/elys-network/post-upgrade-snapshot-generator/releases/download/${POST_UPGRADE_SNAPSHOT_GENERATOR_VERSION}/post-upgrade-snapshot-generator-${POST_UPGRADE_SNAPSHOT_GENERATOR_VERSION}-linux-amd64
           POST_UPGRADE_SNAPSHOT_GENERATOR_PATH=/tmp/post-upgrade-snapshot-generator-${POST_UPGRADE_SNAPSHOT_GENERATOR_VERSION}
           curl -L $DOWNLOAD_URL -o $POST_UPGRADE_SNAPSHOT_GENERATOR_PATH && chmod +x $POST_UPGRADE_SNAPSHOT_GENERATOR_PATH
diff --git a/.github/workflows/software-upgrade-test.yml b/.github/workflows/software-upgrade-test.yml
index 76823fd0..3d1489a6 100644
--- a/.github/workflows/software-upgrade-test.yml
+++ b/.github/workflows/software-upgrade-test.yml
@@ -56,7 +56,7 @@ jobs:
 
       - name: Retrieve post upgrade snapshot generator binary
         run: |
-          POST_UPGRADE_SNAPSHOT_GENERATOR_VERSION=v0.5.17
+          POST_UPGRADE_SNAPSHOT_GENERATOR_VERSION=v0.6.1
           DOWNLOAD_URL=https://github.com/elys-network/post-upgrade-snapshot-generator/releases/download/${POST_UPGRADE_SNAPSHOT_GENERATOR_VERSION}/post-upgrade-snapshot-generator-${POST_UPGRADE_SNAPSHOT_GENERATOR_VERSION}-linux-amd64
           POST_UPGRADE_SNAPSHOT_GENERATOR_PATH=/tmp/post-upgrade-snapshot-generator-${POST_UPGRADE_SNAPSHOT_GENERATOR_VERSION}
           curl -L $DOWNLOAD_URL -o $POST_UPGRADE_SNAPSHOT_GENERATOR_PATH && chmod +x $POST_UPGRADE_SNAPSHOT_GENERATOR_PATH
diff --git a/api/elys/parameter/params.pulsar.go b/api/elys/parameter/params.pulsar.go
index c154650c..67d94293 100644
--- a/api/elys/parameter/params.pulsar.go
+++ b/api/elys/parameter/params.pulsar.go
@@ -19,7 +19,6 @@ var (
 	fd_LegacyParams_min_commission_rate   protoreflect.FieldDescriptor
 	fd_LegacyParams_max_voting_power      protoreflect.FieldDescriptor
 	fd_LegacyParams_min_self_delegation   protoreflect.FieldDescriptor
-	fd_LegacyParams_broker_address        protoreflect.FieldDescriptor
 	fd_LegacyParams_total_blocks_per_year protoreflect.FieldDescriptor
 	fd_LegacyParams_rewards_data_lifetime protoreflect.FieldDescriptor
 )
@@ -30,7 +29,6 @@ func init() {
 	fd_LegacyParams_min_commission_rate = md_LegacyParams.Fields().ByName("min_commission_rate")
 	fd_LegacyParams_max_voting_power = md_LegacyParams.Fields().ByName("max_voting_power")
 	fd_LegacyParams_min_self_delegation = md_LegacyParams.Fields().ByName("min_self_delegation")
-	fd_LegacyParams_broker_address = md_LegacyParams.Fields().ByName("broker_address")
 	fd_LegacyParams_total_blocks_per_year = md_LegacyParams.Fields().ByName("total_blocks_per_year")
 	fd_LegacyParams_rewards_data_lifetime = md_LegacyParams.Fields().ByName("rewards_data_lifetime")
 }
@@ -118,20 +116,14 @@ func (x *fastReflection_LegacyParams) Range(f func(protoreflect.FieldDescriptor,
 			return
 		}
 	}
-	if x.BrokerAddress != "" {
-		value := protoreflect.ValueOfString(x.BrokerAddress)
-		if !f(fd_LegacyParams_broker_address, value) {
-			return
-		}
-	}
-	if x.TotalBlocksPerYear != int64(0) {
-		value := protoreflect.ValueOfInt64(x.TotalBlocksPerYear)
+	if x.TotalBlocksPerYear != uint64(0) {
+		value := protoreflect.ValueOfUint64(x.TotalBlocksPerYear)
 		if !f(fd_LegacyParams_total_blocks_per_year, value) {
 			return
 		}
 	}
-	if x.RewardsDataLifetime != int64(0) {
-		value := protoreflect.ValueOfInt64(x.RewardsDataLifetime)
+	if x.RewardsDataLifetime != uint64(0) {
+		value := protoreflect.ValueOfUint64(x.RewardsDataLifetime)
 		if !f(fd_LegacyParams_rewards_data_lifetime, value) {
 			return
 		}
@@ -157,12 +149,10 @@ func (x *fastReflection_LegacyParams) Has(fd protoreflect.FieldDescriptor) bool
 		return x.MaxVotingPower != ""
 	case "elys.parameter.LegacyParams.min_self_delegation":
 		return x.MinSelfDelegation != ""
-	case "elys.parameter.LegacyParams.broker_address":
-		return x.BrokerAddress != ""
 	case "elys.parameter.LegacyParams.total_blocks_per_year":
-		return x.TotalBlocksPerYear != int64(0)
+		return x.TotalBlocksPerYear != uint64(0)
 	case "elys.parameter.LegacyParams.rewards_data_lifetime":
-		return x.RewardsDataLifetime != int64(0)
+		return x.RewardsDataLifetime != uint64(0)
 	default:
 		if fd.IsExtension() {
 			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.parameter.LegacyParams"))
@@ -185,12 +175,10 @@ func (x *fastReflection_LegacyParams) Clear(fd protoreflect.FieldDescriptor) {
 		x.MaxVotingPower = ""
 	case "elys.parameter.LegacyParams.min_self_delegation":
 		x.MinSelfDelegation = ""
-	case "elys.parameter.LegacyParams.broker_address":
-		x.BrokerAddress = ""
 	case "elys.parameter.LegacyParams.total_blocks_per_year":
-		x.TotalBlocksPerYear = int64(0)
+		x.TotalBlocksPerYear = uint64(0)
 	case "elys.parameter.LegacyParams.rewards_data_lifetime":
-		x.RewardsDataLifetime = int64(0)
+		x.RewardsDataLifetime = uint64(0)
 	default:
 		if fd.IsExtension() {
 			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.parameter.LegacyParams"))
@@ -216,15 +204,12 @@ func (x *fastReflection_LegacyParams) Get(descriptor protoreflect.FieldDescripto
 	case "elys.parameter.LegacyParams.min_self_delegation":
 		value := x.MinSelfDelegation
 		return protoreflect.ValueOfString(value)
-	case "elys.parameter.LegacyParams.broker_address":
-		value := x.BrokerAddress
-		return protoreflect.ValueOfString(value)
 	case "elys.parameter.LegacyParams.total_blocks_per_year":
 		value := x.TotalBlocksPerYear
-		return protoreflect.ValueOfInt64(value)
+		return protoreflect.ValueOfUint64(value)
 	case "elys.parameter.LegacyParams.rewards_data_lifetime":
 		value := x.RewardsDataLifetime
-		return protoreflect.ValueOfInt64(value)
+		return protoreflect.ValueOfUint64(value)
 	default:
 		if descriptor.IsExtension() {
 			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.parameter.LegacyParams"))
@@ -251,12 +236,10 @@ func (x *fastReflection_LegacyParams) Set(fd protoreflect.FieldDescriptor, value
 		x.MaxVotingPower = value.Interface().(string)
 	case "elys.parameter.LegacyParams.min_self_delegation":
 		x.MinSelfDelegation = value.Interface().(string)
-	case "elys.parameter.LegacyParams.broker_address":
-		x.BrokerAddress = value.Interface().(string)
 	case "elys.parameter.LegacyParams.total_blocks_per_year":
-		x.TotalBlocksPerYear = value.Int()
+		x.TotalBlocksPerYear = value.Uint()
 	case "elys.parameter.LegacyParams.rewards_data_lifetime":
-		x.RewardsDataLifetime = value.Int()
+		x.RewardsDataLifetime = value.Uint()
 	default:
 		if fd.IsExtension() {
 			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.parameter.LegacyParams"))
@@ -283,8 +266,6 @@ func (x *fastReflection_LegacyParams) Mutable(fd protoreflect.FieldDescriptor) p
 		panic(fmt.Errorf("field max_voting_power of message elys.parameter.LegacyParams is not mutable"))
 	case "elys.parameter.LegacyParams.min_self_delegation":
 		panic(fmt.Errorf("field min_self_delegation of message elys.parameter.LegacyParams is not mutable"))
-	case "elys.parameter.LegacyParams.broker_address":
-		panic(fmt.Errorf("field broker_address of message elys.parameter.LegacyParams is not mutable"))
 	case "elys.parameter.LegacyParams.total_blocks_per_year":
 		panic(fmt.Errorf("field total_blocks_per_year of message elys.parameter.LegacyParams is not mutable"))
 	case "elys.parameter.LegacyParams.rewards_data_lifetime":
@@ -308,12 +289,10 @@ func (x *fastReflection_LegacyParams) NewField(fd protoreflect.FieldDescriptor)
 		return protoreflect.ValueOfString("")
 	case "elys.parameter.LegacyParams.min_self_delegation":
 		return protoreflect.ValueOfString("")
-	case "elys.parameter.LegacyParams.broker_address":
-		return protoreflect.ValueOfString("")
 	case "elys.parameter.LegacyParams.total_blocks_per_year":
-		return protoreflect.ValueOfInt64(int64(0))
+		return protoreflect.ValueOfUint64(uint64(0))
 	case "elys.parameter.LegacyParams.rewards_data_lifetime":
-		return protoreflect.ValueOfInt64(int64(0))
+		return protoreflect.ValueOfUint64(uint64(0))
 	default:
 		if fd.IsExtension() {
 			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.parameter.LegacyParams"))
@@ -395,10 +374,6 @@ func (x *fastReflection_LegacyParams) ProtoMethods() *protoiface.Methods {
 		if l > 0 {
 			n += 1 + l + runtime.Sov(uint64(l))
 		}
-		l = len(x.BrokerAddress)
-		if l > 0 {
-			n += 1 + l + runtime.Sov(uint64(l))
-		}
 		if x.TotalBlocksPerYear != 0 {
 			n += 1 + runtime.Sov(uint64(x.TotalBlocksPerYear))
 		}
@@ -437,19 +412,12 @@ func (x *fastReflection_LegacyParams) ProtoMethods() *protoiface.Methods {
 		if x.RewardsDataLifetime != 0 {
 			i = runtime.EncodeVarint(dAtA, i, uint64(x.RewardsDataLifetime))
 			i--
-			dAtA[i] = 0x30
+			dAtA[i] = 0x28
 		}
 		if x.TotalBlocksPerYear != 0 {
 			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalBlocksPerYear))
 			i--
-			dAtA[i] = 0x28
-		}
-		if len(x.BrokerAddress) > 0 {
-			i -= len(x.BrokerAddress)
-			copy(dAtA[i:], x.BrokerAddress)
-			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BrokerAddress)))
-			i--
-			dAtA[i] = 0x22
+			dAtA[i] = 0x20
 		}
 		if len(x.MinSelfDelegation) > 0 {
 			i -= len(x.MinSelfDelegation)
@@ -618,38 +586,6 @@ func (x *fastReflection_LegacyParams) ProtoMethods() *protoiface.Methods {
 				x.MinSelfDelegation = string(dAtA[iNdEx:postIndex])
 				iNdEx = postIndex
 			case 4:
-				if wireType != 2 {
-					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BrokerAddress", wireType)
-				}
-				var stringLen uint64
-				for shift := uint(0); ; shift += 7 {
-					if shift >= 64 {
-						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
-					}
-					if iNdEx >= l {
-						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
-					}
-					b := dAtA[iNdEx]
-					iNdEx++
-					stringLen |= uint64(b&0x7F) << shift
-					if b < 0x80 {
-						break
-					}
-				}
-				intStringLen := int(stringLen)
-				if intStringLen < 0 {
-					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
-				}
-				postIndex := iNdEx + intStringLen
-				if postIndex < 0 {
-					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
-				}
-				if postIndex > l {
-					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
-				}
-				x.BrokerAddress = string(dAtA[iNdEx:postIndex])
-				iNdEx = postIndex
-			case 5:
 				if wireType != 0 {
 					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalBlocksPerYear", wireType)
 				}
@@ -663,12 +599,12 @@ func (x *fastReflection_LegacyParams) ProtoMethods() *protoiface.Methods {
 					}
 					b := dAtA[iNdEx]
 					iNdEx++
-					x.TotalBlocksPerYear |= int64(b&0x7F) << shift
+					x.TotalBlocksPerYear |= uint64(b&0x7F) << shift
 					if b < 0x80 {
 						break
 					}
 				}
-			case 6:
+			case 5:
 				if wireType != 0 {
 					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardsDataLifetime", wireType)
 				}
@@ -682,7 +618,7 @@ func (x *fastReflection_LegacyParams) ProtoMethods() *protoiface.Methods {
 					}
 					b := dAtA[iNdEx]
 					iNdEx++
-					x.RewardsDataLifetime |= int64(b&0x7F) << shift
+					x.RewardsDataLifetime |= uint64(b&0x7F) << shift
 					if b < 0x80 {
 						break
 					}
@@ -1387,9 +1323,8 @@ type LegacyParams struct {
 	MinCommissionRate   string `protobuf:"bytes,1,opt,name=min_commission_rate,json=minCommissionRate,proto3" json:"min_commission_rate,omitempty"`
 	MaxVotingPower      string `protobuf:"bytes,2,opt,name=max_voting_power,json=maxVotingPower,proto3" json:"max_voting_power,omitempty"`
 	MinSelfDelegation   string `protobuf:"bytes,3,opt,name=min_self_delegation,json=minSelfDelegation,proto3" json:"min_self_delegation,omitempty"`
-	BrokerAddress       string `protobuf:"bytes,4,opt,name=broker_address,json=brokerAddress,proto3" json:"broker_address,omitempty"`
-	TotalBlocksPerYear  int64  `protobuf:"varint,5,opt,name=total_blocks_per_year,json=totalBlocksPerYear,proto3" json:"total_blocks_per_year,omitempty"`
-	RewardsDataLifetime int64  `protobuf:"varint,6,opt,name=rewards_data_lifetime,json=rewardsDataLifetime,proto3" json:"rewards_data_lifetime,omitempty"` // default 1 day = 86400
+	TotalBlocksPerYear  uint64 `protobuf:"varint,4,opt,name=total_blocks_per_year,json=totalBlocksPerYear,proto3" json:"total_blocks_per_year,omitempty"`
+	RewardsDataLifetime uint64 `protobuf:"varint,5,opt,name=rewards_data_lifetime,json=rewardsDataLifetime,proto3" json:"rewards_data_lifetime,omitempty"` // default 1 day = 86400
 }
 
 func (x *LegacyParams) Reset() {
@@ -1433,21 +1368,14 @@ func (x *LegacyParams) GetMinSelfDelegation() string {
 	return ""
 }
 
-func (x *LegacyParams) GetBrokerAddress() string {
-	if x != nil {
-		return x.BrokerAddress
-	}
-	return ""
-}
-
-func (x *LegacyParams) GetTotalBlocksPerYear() int64 {
+func (x *LegacyParams) GetTotalBlocksPerYear() uint64 {
 	if x != nil {
 		return x.TotalBlocksPerYear
 	}
 	return 0
 }
 
-func (x *LegacyParams) GetRewardsDataLifetime() int64 {
+func (x *LegacyParams) GetRewardsDataLifetime() uint64 {
 	if x != nil {
 		return x.RewardsDataLifetime
 	}
@@ -1530,7 +1458,7 @@ var file_elys_parameter_params_proto_rawDesc = []byte{
 	0x6c, 0x79, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x1a, 0x14, 0x67,
 	0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72,
 	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74,
-	0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9,
+	0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92,
 	0x03, 0x0a, 0x0c, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
 	0x61, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
 	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde,
@@ -1549,52 +1477,50 @@ var file_elys_parameter_params_proto_rawDesc = []byte{
 	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
 	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63,
 	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x53, 0x65,
-	0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
-	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
-	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
-	0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f,
-	0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01,
-	0x28, 0x03, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50,
-	0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
-	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
-	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x44, 0x61,
-	0x74, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8c, 0x03, 0x0a, 0x06, 0x50,
-	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x61, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
-	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
-	0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d,
-	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65,
-	0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
-	0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
-	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f,
-	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
-	0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d,
-	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65,
-	0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
-	0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67,
-	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c,
-	0x66, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
-	0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
-	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
-	0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52,
-	0x11, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
-	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
-	0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
-	0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65,
-	0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
-	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
-	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x44, 0x61, 0x74,
-	0x61, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0xab, 0x01, 0x0a, 0x12, 0x63, 0x6f,
-	0x6d, 0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
-	0x42, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
-	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x79, 0x73,
-	0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x61, 0x70,
-	0x69, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
-	0xa2, 0x02, 0x03, 0x45, 0x50, 0x58, 0xaa, 0x02, 0x0e, 0x45, 0x6c, 0x79, 0x73, 0x2e, 0x50, 0x61,
-	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0xca, 0x02, 0x0e, 0x45, 0x6c, 0x79, 0x73, 0x5c, 0x50,
-	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0xe2, 0x02, 0x1a, 0x45, 0x6c, 0x79, 0x73, 0x5c,
-	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
-	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x45, 0x6c, 0x79, 0x73, 0x3a, 0x3a, 0x50, 0x61,
-	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
+	0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15,
+	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72,
+	0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74,
+	0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12,
+	0x32, 0x0a, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
+	0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
+	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x74,
+	0x69, 0x6d, 0x65, 0x22, 0x8c, 0x03, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x61,
+	0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
+	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
+	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
+	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
+	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x11,
+	0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
+	0x65, 0x12, 0x5b, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x5f,
+	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
+	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
+	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
+	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0e,
+	0x6d, 0x61, 0x78, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x5b,
+	0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67,
+	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f,
+	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
+	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
+	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x6c,
+	0x66, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x74,
+	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
+	0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61,
+	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x50, 0x65, 0x72, 0x59, 0x65, 0x61, 0x72, 0x12, 0x32,
+	0x0a, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c,
+	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72,
+	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
+	0x6d, 0x65, 0x42, 0xab, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e,
+	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d,
+	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
+	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
+	0x6b, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f,
+	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0xa2, 0x02, 0x03, 0x45, 0x50, 0x58, 0xaa,
+	0x02, 0x0e, 0x45, 0x6c, 0x79, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
+	0xca, 0x02, 0x0e, 0x45, 0x6c, 0x79, 0x73, 0x5c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
+	0x72, 0xe2, 0x02, 0x1a, 0x45, 0x6c, 0x79, 0x73, 0x5c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
+	0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
+	0x0f, 0x45, 0x6c, 0x79, 0x73, 0x3a, 0x3a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
+	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
 }
 
 var (
diff --git a/app/app.go b/app/app.go
index 0aac7ed9..c1246e59 100644
--- a/app/app.go
+++ b/app/app.go
@@ -7,6 +7,12 @@ import (
 	"path/filepath"
 	"strings"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node imports*/
+
+	/* End of kwak-indexer node imports*/
+	/* *************************************************************************** */
+
 	"cosmossdk.io/client/v2/autocli"
 	"cosmossdk.io/core/appmodule"
 	"github.com/cosmos/cosmos-sdk/server"
@@ -15,6 +21,7 @@ import (
 	authcodec "github.com/cosmos/cosmos-sdk/x/auth/codec"
 	"github.com/cosmos/gogoproto/proto"
 	"github.com/elys-network/elys/app/keepers"
+	"github.com/elys-network/elys/indexer"
 	"github.com/spf13/cast"
 
 	abci "github.com/cometbft/cometbft/abci/types"
@@ -117,6 +124,14 @@ type ElysApp struct {
 	// sm is the simulation manager
 	sm           *module.SimulationManager
 	configurator module.Configurator
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+
+	indexerInitialized bool
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
 }
 
 // New returns a reference to an initialized blockchain app
@@ -336,6 +351,19 @@ func (app *ElysApp) Name() string { return app.BaseApp.Name() }
 
 // PreBlocker application updates every pre block
 func (app *ElysApp) PreBlocker(ctx sdk.Context, _ *abci.RequestFinalizeBlock) (*sdk.ResponsePreBlock, error) {
+	if !app.indexerInitialized {
+		/* *************************************************************************** */
+		/* Start of kwak-indexer node implementation*/
+
+		fmt.Println("Indexer Starting")
+		indexer.Init(app)
+		app.indexerInitialized = true
+		fmt.Println("Indexer Started")
+
+		/* End of kwak-indexer node implementation*/
+		/* *************************************************************************** */
+	}
+
 	return app.mm.PreBlock(ctx)
 }
 
diff --git a/app/keepers/keepers.go b/app/keepers/keepers.go
index 4fc609a1..3509602f 100644
--- a/app/keepers/keepers.go
+++ b/app/keepers/keepers.go
@@ -4,6 +4,7 @@ import (
 	"os"
 
 	"cosmossdk.io/log"
+
 	storetypes "cosmossdk.io/store/types"
 	evidencekeeper "cosmossdk.io/x/evidence/keeper"
 	evidencetypes "cosmossdk.io/x/evidence/types"
diff --git a/app/setup_handlers.go b/app/setup_handlers.go
index 63734a7c..5aaef54b 100644
--- a/app/setup_handlers.go
+++ b/app/setup_handlers.go
@@ -8,7 +8,6 @@ import (
 	upgradetypes "cosmossdk.io/x/upgrade/types"
 
 	sdk "github.com/cosmos/cosmos-sdk/types"
-	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"
 
 	m "github.com/cosmos/cosmos-sdk/types/module"
 	"github.com/cosmos/cosmos-sdk/version"
@@ -20,7 +19,7 @@ const (
 )
 
 // make sure to update these when you upgrade the version
-var NextVersion = "v0.52.0"
+var NextVersion = "v0.53.0"
 
 func (app *ElysApp) setUpgradeHandler() {
 	app.UpgradeKeeper.SetUpgradeHandler(
@@ -33,60 +32,6 @@ func (app *ElysApp) setUpgradeHandler() {
 
 				// Add any logic here to run when the chain is upgraded to the new version
 
-				// update the signing info for the validators
-				signers := []string{
-					"elysvalcons1f9lzcfxxu6l9yj9uf0lqjc0qa82raypnlk58ej", // Synergy Nodes
-					"elysvalcons1frn2njtny6gzdjl2df9rvz3atcds2vl2fhxg8s", // Regenerator | Green Validator
-				}
-				for _, signer := range signers {
-					addr, err := sdk.ConsAddressFromBech32(signer)
-					if err != nil {
-						app.Logger().Error("failed to convert signer address", "error", err)
-						continue
-					}
-					signingInfo, err := app.SlashingKeeper.GetValidatorSigningInfo(ctx, addr)
-					if err != nil {
-						app.Logger().Error("failed to get signer signing info", "signer", signer)
-						continue
-					}
-					signingInfo.JailedUntil = ctx.BlockTime() // set jailed until to current block time
-					signingInfo.Tombstoned = false
-					app.SlashingKeeper.SetValidatorSigningInfo(ctx, addr, signingInfo)
-					app.Logger().Info("reset tombstoned status and jailed until date for signer", "signer", signer)
-				}
-				// update the unbonded status for the validators
-				operators := []string{
-					"elysvaloper1xesqr8vjvy34jhu027zd70ypl0nnev5ewa6r7h", // Synergy Nodes
-					"elysvaloper19r0mcqdgserlx4v9htqh8erp8r2fc4ry30vl3j", // Regenerator | Green Validator
-				}
-				for _, operator := range operators {
-					addr, err := sdk.ValAddressFromBech32(operator)
-					if err != nil {
-						app.Logger().Error("failed to convert operator address", "error", err)
-						continue
-					}
-					validator, err := app.StakingKeeper.GetValidator(ctx, addr)
-					if err != nil {
-						app.Logger().Error("failed to get validator", "operator", operator)
-						continue
-					}
-					for _, unbondingId := range validator.UnbondingIds {
-						unbondingDelegation, err := app.StakingKeeper.GetUnbondingDelegationByUnbondingID(ctx, unbondingId)
-						if err != nil {
-							app.Logger().Error("failed to get unbonding delegation", "operator", operator, "unbondingId", unbondingId)
-							continue
-						}
-						app.StakingKeeper.RemoveUnbondingDelegation(ctx, unbondingDelegation)
-						app.Logger().Info("removed unbonding delegation", "operator", operator, "unbondingId", unbondingId)
-					}
-					validator.Jailed = false
-					validator.Status = stakingtypes.Bonded
-					validator.UnbondingTime = ctx.BlockTime()
-					validator.UnbondingIds = []uint64{}
-					app.StakingKeeper.SetValidator(ctx, validator)
-					app.Logger().Info("reset unbonded status for validator", "operator", operator)
-				}
-
 			}
 
 			return app.mm.RunMigrations(ctx, app.configurator, vm)
diff --git a/config.yml b/config.yml
index 4c424680..0e786c8b 100644
--- a/config.yml
+++ b/config.yml
@@ -418,7 +418,6 @@ genesis:
         min_commission_rate: "0.05"
         max_voting_power: "1.00"
         min_self_delegation: "1"
-        broker_address: "elys1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqnrec2l"
     perpetual:
       params:
         leverage_max: "10"
diff --git a/docs/static/openapi.yml b/docs/static/openapi.yml
index a45e8dc9..8160dd1d 100644
--- a/docs/static/openapi.yml
+++ b/docs/static/openapi.yml
@@ -43704,8 +43704,6 @@ paths:
                     type: string
                   min_self_delegation:
                     type: string
-                  broker_address:
-                    type: string
                   total_blocks_per_year:
                     type: string
                     format: int64
@@ -90815,8 +90813,6 @@ definitions:
             type: string
             format: uint64
     description: QueryParamsResponse is response type for the Query/Params RPC method.
-  elys.parameter.MsgUpdateBrokerAddressResponse:
-    type: object
   elys.parameter.MsgUpdateMaxVotingPowerResponse:
     type: object
   elys.parameter.MsgUpdateMinCommissionResponse:
@@ -90838,8 +90834,6 @@ definitions:
         type: string
       min_self_delegation:
         type: string
-      broker_address:
-        type: string
       total_blocks_per_year:
         type: string
         format: int64
@@ -90867,8 +90861,6 @@ definitions:
             type: string
           min_self_delegation:
             type: string
-          broker_address:
-            type: string
           total_blocks_per_year:
             type: string
             format: int64
diff --git a/go.mod b/go.mod
index ba743dfe..87351542 100644
--- a/go.mod
+++ b/go.mod
@@ -75,6 +75,7 @@ require (
 	github.com/bgentry/go-netrc v0.0.0-20140422174119-9fd32a8b3d3d // indirect
 	github.com/bgentry/speakeasy v0.1.1-0.20220910012023-760eaf8b6816 // indirect
 	github.com/bits-and-blooms/bitset v1.8.0 // indirect
+	github.com/bmatsuo/lmdb-go v1.8.0
 	github.com/btcsuite/btcd/btcec/v2 v2.3.4 // indirect
 	github.com/bufbuild/connect-go v1.5.2 // indirect
 	github.com/bufbuild/protocompile v0.6.0 // indirect
diff --git a/go.sum b/go.sum
index c049d23a..b1a1d589 100644
--- a/go.sum
+++ b/go.sum
@@ -878,6 +878,8 @@ github.com/blang/semver v3.5.0+incompatible/go.mod h1:kRBLl5iJ+tD4TcOOxsy/0fnweb
 github.com/blang/semver v3.5.1+incompatible/go.mod h1:kRBLl5iJ+tD4TcOOxsy/0fnwebNt5EWlYSAyrTnjyyk=
 github.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=
 github.com/blizzy78/varnamelen v0.8.0/go.mod h1:V9TzQZ4fLJ1DSrjVDfl89H7aMnTvKkApdHeyESmyR7k=
+github.com/bmatsuo/lmdb-go v1.8.0 h1:ohf3Q4xjXZBKh4AayUY4bb2CXuhRAI8BYGlJq08EfNA=
+github.com/bmatsuo/lmdb-go v1.8.0/go.mod h1:wWPZmKdOAZsl4qOqkowQ1aCrFie1HU8gWloHMCeAUdM=
 github.com/bmizerany/assert v0.0.0-20160611221934-b7ed37b82869/go.mod h1:Ekp36dRnpXw/yCqJaO+ZrUyxD+3VXMFFr56k5XYrpB4=
 github.com/bombsimon/wsl/v2 v2.0.0/go.mod h1:mf25kr/SqFEPhhcxW1+7pxzGlW+hIl/hYTKY95VwV8U=
 github.com/bombsimon/wsl/v2 v2.2.0/go.mod h1:Azh8c3XGEJl9LyX0/sFC+CKMc7Ssgua0g+6abzXN4Pg=
diff --git a/indexer/database.go b/indexer/database.go
new file mode 100644
index 00000000..33b37ed1
--- /dev/null
+++ b/indexer/database.go
@@ -0,0 +1,281 @@
+package indexer
+
+import (
+	"encoding/binary"
+	"encoding/json"
+	"fmt"
+	"os"
+
+	"github.com/bmatsuo/lmdb-go/lmdb"
+
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+)
+
+// LMDBManager handles LMDB operations for storing and retrieving transactions
+type LMDBManager struct {
+	env              *lmdb.Env
+	eventDB          lmdb.DBI
+	addressDB        lmdb.DBI
+	eventCountDB     lmdb.DBI
+	path             string
+	totalIndexLength *uint64
+}
+
+// NewLMDBManager creates a new LMDB manager
+func NewLMDBManager(path string, totalIndexLength *uint64) (*LMDBManager, error) {
+	// Create directory if it doesn't exist
+	if err := os.MkdirAll(path, 0755); err != nil {
+		return nil, fmt.Errorf("failed to create directory: %v", err)
+	}
+
+	// Set up LMDB environment
+	env, err := lmdb.NewEnv()
+	if err != nil {
+		return nil, err
+	}
+
+	if err := env.SetMaxDBs(3); err != nil {
+		return nil, err
+	}
+
+	// Start with 1GB, we'll increase it later if needed
+	if err := env.SetMapSize(1 << 30); err != nil {
+		return nil, err
+	}
+
+	if err := env.Open(path, 0, 0644); err != nil {
+		return nil, err
+	}
+
+	manager := &LMDBManager{env: env, path: path, totalIndexLength: totalIndexLength}
+
+	// Initialize databases
+	err = env.Update(func(txn *lmdb.Txn) error {
+		var err error
+		if manager.eventDB, err = txn.OpenDBI("txs", lmdb.Create); err != nil {
+			return err
+		}
+		if manager.addressDB, err = txn.OpenDBI("addresses", lmdb.Create|lmdb.DupSort); err != nil {
+			return err
+		}
+		if manager.eventCountDB, err = txn.OpenDBI("txcount", lmdb.Create); err != nil {
+			return err
+		}
+
+		// Get the current transaction count
+		countBytes, err := txn.Get(manager.eventCountDB, []byte("count"))
+		if err == nil {
+			*totalIndexLength = binary.LittleEndian.Uint64(countBytes)
+		} else if lmdb.IsNotFound(err) {
+			*totalIndexLength = 0
+		} else {
+			return err
+		}
+		return nil
+	})
+
+	if err != nil {
+		return nil, err
+	}
+
+	return manager, nil
+}
+
+// CheckAndResizeIfNeeded increases the database size if it's getting full
+func (m *LMDBManager) CheckAndResizeIfNeeded() error {
+	info, err := m.env.Info()
+	if err != nil {
+		return err
+	}
+
+	usedSpace := uint64(info.LastPNO) * uint64(os.Getpagesize())
+	availableSpace := uint64(info.MapSize) - usedSpace
+
+	// Double the size if less than 20% is available
+	if availableSpace < uint64(info.MapSize)/5 {
+		newSize := info.MapSize * 2
+		if err := m.env.SetMapSize(newSize); err != nil {
+			// If resizing fails, close and reopen the environment
+			m.env.Close()
+			if env, err := lmdb.NewEnv(); err == nil {
+				if err := env.SetMaxDBs(3); err == nil {
+					if err := env.SetMapSize(newSize); err == nil {
+						if err := env.Open(m.path, 0, 0644); err == nil {
+							m.env = env
+							fmt.Printf("Resized database to %d bytes\n", newSize)
+							return nil
+						}
+					}
+				}
+			}
+			return err
+		}
+	}
+
+	return nil
+}
+
+// ProcessNewTx adds a new transaction to the database
+func (m *LMDBManager) ProcessNewTx(tx indexerTypes.GenericTransaction, address string) error {
+	if err := m.CheckAndResizeIfNeeded(); err != nil {
+		return err
+	}
+
+	return m.env.Update(func(txn *lmdb.Txn) error {
+		// Increment the total index length
+
+		fmt.Printf("Before increment: %d\n", *m.totalIndexLength)
+		*m.totalIndexLength++
+		fmt.Printf("After increment: %d\n", *m.totalIndexLength)
+		count := *m.totalIndexLength
+
+		// Store the new count in the database
+		countBytes := make([]byte, 8)
+		binary.BigEndian.PutUint64(countBytes, count)
+		if err := txn.Put(m.eventCountDB, []byte("count"), countBytes, 0); err != nil {
+			return fmt.Errorf("error storing new count: %v", err)
+		}
+
+		fmt.Printf("New Count: %d\n", count)
+
+		// Store the transaction
+		txBytes, err := json.Marshal(tx)
+		if err != nil {
+			return err
+		}
+
+		indexBytes := make([]byte, 8)
+		binary.BigEndian.PutUint64(indexBytes, count)
+		if err := txn.Put(m.eventDB, indexBytes, txBytes, 0); err != nil {
+			return err
+		}
+
+		// Update the address index for the main address
+		if err := txn.Put(m.addressDB, []byte(address), indexBytes, 0); err != nil {
+			return err
+		}
+
+		// Update the address index for all included addresses
+		for _, includedAddress := range tx.BaseTransaction.IncludedAddresses {
+			if err := txn.Put(m.addressDB, []byte(includedAddress), indexBytes, 0); err != nil {
+				return err
+			}
+		}
+
+		return nil
+	})
+}
+
+func (m *LMDBManager) ProcessNewEvent(event indexerTypes.GenericEvent, address string) error {
+	if err := m.CheckAndResizeIfNeeded(); err != nil {
+		return err
+	}
+
+	return m.env.Update(func(txn *lmdb.Txn) error {
+		// Increment the total index length
+		*m.totalIndexLength++
+		count := *m.totalIndexLength
+
+		// Store the new count
+		countBytes := make([]byte, 8)
+		binary.BigEndian.PutUint64(countBytes, count)
+		if err := txn.Put(m.eventCountDB, []byte("count"), countBytes, 0); err != nil {
+			return fmt.Errorf("error storing new count: %v", err)
+		}
+
+		// Store the event
+		eventBytes, err := json.Marshal(event)
+		if err != nil {
+			return err
+		}
+
+		indexBytes := make([]byte, 8)
+		binary.BigEndian.PutUint64(indexBytes, count)
+		if err := txn.Put(m.eventDB, indexBytes, eventBytes, 0); err != nil {
+			return err
+		}
+
+		// Update the address index for the main address
+		if err := txn.Put(m.addressDB, []byte(address), indexBytes, 0); err != nil {
+			return err
+		}
+
+		// Update the address index for all included addresses
+		for _, includedAddress := range event.BaseEvent.IncludedAddresses {
+			if err := txn.Put(m.addressDB, []byte(includedAddress), indexBytes, 0); err != nil {
+				return err
+			}
+		}
+
+		return nil
+	})
+}
+
+// GetTxCount returns the total number of transactions
+func (m *LMDBManager) GetTxCount() uint64 {
+	return *m.totalIndexLength
+}
+
+// GetTxByIndex retrieves a transaction by its index
+func (m *LMDBManager) GetTxByIndex(index uint64) (indexerTypes.GenericTransaction, error) {
+	var tx indexerTypes.GenericTransaction
+	err := m.env.View(func(txn *lmdb.Txn) error {
+		indexBytes := make([]byte, 8)
+		binary.BigEndian.PutUint64(indexBytes, index)
+		txBytes, err := txn.Get(m.eventDB, indexBytes)
+		if err != nil {
+			return err
+		}
+		return json.Unmarshal(txBytes, &tx)
+	})
+	return tx, err
+}
+
+// GetTxsByAddress retrieves all transactions for a given address
+func (m *LMDBManager) GetTxsByAddress(address string) ([]indexerTypes.GenericTransaction, error) {
+	var txs []indexerTypes.GenericTransaction
+	err := m.env.View(func(txn *lmdb.Txn) error {
+		cursor, err := txn.OpenCursor(m.addressDB)
+		if err != nil {
+			return fmt.Errorf("error opening cursor: %v", err)
+		}
+		defer cursor.Close()
+
+		_, value, err := cursor.Get([]byte(address), nil, lmdb.SetKey)
+		if lmdb.IsNotFound(err) {
+			return nil // No transactions found for this address
+		} else if err != nil {
+			return fmt.Errorf("error in initial cursor.Get: %v", err)
+		}
+
+		for {
+			index := binary.BigEndian.Uint64(value)
+			tx, err := m.GetTxByIndex(index)
+			if err != nil {
+				return fmt.Errorf("error getting transaction by index %d: %v", index, err)
+			}
+			txs = append(txs, tx)
+
+			_, value, err = cursor.Get(nil, nil, lmdb.NextDup)
+			if lmdb.IsNotFound(err) {
+				// Reached the end of the transactions
+				break
+			} else if err != nil {
+				return fmt.Errorf("error in cursor.Get for NextDup: %v", err)
+			}
+		}
+		return nil
+	})
+
+	if err != nil {
+		return nil, err
+	}
+
+	return txs, nil
+}
+
+// Close shuts down the LMDB environment
+func (m *LMDBManager) Close() error {
+	m.env.Close()
+	return nil
+}
diff --git a/indexer/main.go b/indexer/main.go
new file mode 100644
index 00000000..c1d18ed0
--- /dev/null
+++ b/indexer/main.go
@@ -0,0 +1,286 @@
+package indexer
+
+import (
+	"crypto/sha256"
+	"encoding/hex"
+	"fmt"
+	"strconv"
+	"sync"
+	"time"
+
+	"github.com/cosmos/cosmos-sdk/codec"
+	"github.com/cosmos/cosmos-sdk/codec/types"
+	sdk "github.com/cosmos/cosmos-sdk/types"
+	"github.com/cosmos/cosmos-sdk/x/auth/signing"
+	"github.com/cosmos/cosmos-sdk/x/auth/tx"
+
+	"github.com/cosmos/gogoproto/proto"
+	CommitmentTypes "github.com/elys-network/elys/indexer/txs/commitments"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+)
+
+// AppI defines the interface that the app must implement
+type AppI interface {
+	InterfaceRegistry() types.InterfaceRegistry
+}
+
+type queueItem struct {
+	ctx               sdk.Context
+	proc              indexerTypes.Processor
+	includedAddresses []string
+}
+
+type eventItem struct {
+	ctx       sdk.Context
+	eventType string
+	proc      indexerTypes.EventProcessor
+	addresses []string
+}
+
+var (
+	txChan           chan queueItem
+	eventChan        chan eventItem
+	database         *LMDBManager
+	totalIndexLength uint64
+	once             sync.Once
+	workerDone       chan struct{}
+	eventWorkerDone  chan struct{}
+	app              AppI
+	workerReady      sync.WaitGroup
+	dbReady          chan struct{}
+)
+
+// Init initializes the indexer with a single worker and stores the app interface
+func Init(a AppI) {
+	once.Do(func() {
+		app = a
+		dbReady = make(chan struct{})
+		workerReady.Add(2) // Add one more for event worker
+
+		go initDatabase()
+
+		txChan = make(chan queueItem, 10000)
+		eventChan = make(chan eventItem, 10000)
+		workerDone = make(chan struct{})
+		eventWorkerDone = make(chan struct{})
+
+		go func() {
+			<-dbReady // Wait for the database to be ready
+			go worker()
+			go eventWorker()
+			workerReady.Done() // Signal that the workers are ready
+			workerReady.Done()
+		}()
+
+		// Wait for both the database and the workers to be ready
+		<-dbReady
+		workerReady.Wait()
+	})
+}
+
+func initDatabase() {
+	db, err := NewLMDBManager("./lmdb-data", &totalIndexLength)
+	if err != nil {
+		panic(err)
+	}
+	database = db
+	data, err := db.GetTxsByAddress("elys1093h5gs0wz3rrm78zdrfzul2mdh654d95mhnj9")
+	if err != nil {
+		fmt.Printf("Error: %v\n", err)
+	} else {
+		fmt.Printf("Retrieved %d transactions\n", len(data))
+		for _, tx := range data {
+			fmt.Println(tx)
+			transactionType, TransactionData, err := ParseTransaction(tx)
+
+			if err != nil {
+				fmt.Println(err)
+			}
+
+			switch transactionType {
+			case "/elys.commitment.MsgStake":
+				if stakeData, ok := TransactionData.(CommitmentTypes.MsgStake); ok {
+					fmt.Printf("Stake amount: %s %s\n", stakeData.Token.Amount, stakeData.Token.Denom)
+				}
+
+			}
+		}
+	}
+
+	close(dbReady) // Signal that the database is ready
+}
+
+// StopIndexer stops the indexer worker
+func StopIndexer() {
+	close(txChan)
+	close(eventChan)
+	<-workerDone
+	<-eventWorkerDone
+}
+
+// worker processes transactions from the channel
+func worker() {
+	defer close(workerDone)
+	for item := range txChan {
+		processTransactionInternal(item.ctx, item.proc, item.includedAddresses)
+	}
+}
+
+// eventWorker processes background events from the channel
+func eventWorker() {
+	defer close(eventWorkerDone)
+	for event := range eventChan {
+		processEventInternal(event)
+	}
+}
+
+// QueueTransaction sends the transaction context and processor to the worker
+func QueueTransaction(ctx sdk.Context, proc indexerTypes.Processor, addresses []string) {
+	item := queueItem{
+		ctx:               ctx,
+		proc:              proc,
+		includedAddresses: addresses,
+	}
+
+	select {
+	case txChan <- item:
+		fmt.Println("Processing")
+	default:
+		fmt.Println("Transaction indexer channel is full, waiting to enqueue...")
+		txChan <- item // This will block until there's space in the channel
+	}
+}
+
+// QueueEvent sends background events to the event worker
+func QueueEvent(ctx sdk.Context, eventType string, proc indexerTypes.EventProcessor, addresses []string) {
+	event := eventItem{
+		ctx:       ctx,
+		eventType: eventType,
+		proc:      proc,
+		addresses: addresses,
+	}
+
+	select {
+	case eventChan <- event:
+		fmt.Printf("Processing event: %s\n", eventType)
+	default:
+		fmt.Println("Event channel is full, waiting to enqueue...")
+		eventChan <- event
+	}
+}
+
+func processEventInternal(event eventItem) {
+	baseEvent := indexerTypes.BaseEvent{
+		BlockTime:   event.ctx.BlockTime(),
+		EventType:   event.eventType,
+		BlockHeight: event.ctx.BlockHeight(),
+	}
+
+	res, err := event.proc.Process(database, baseEvent)
+	if err != nil {
+		fmt.Println(err)
+	}
+
+	fmt.Println(res)
+}
+
+func processTransactionInternal(ctx sdk.Context, proc indexerTypes.Processor, includingAddresses []string) {
+	txBytes := ctx.TxBytes()
+	if len(txBytes) == 0 {
+		fmt.Println("No transaction bytes found in context")
+		return
+	}
+
+	txChecksum := sha256.Sum256(txBytes)
+	txHash := hex.EncodeToString(txChecksum[:])
+
+	blockHeight := ctx.BlockHeight()
+	blockTime := ctx.BlockTime()
+	gasUsed := ctx.GasMeter().GasConsumed()
+
+	txConfig := tx.NewTxConfig(codec.NewProtoCodec(app.InterfaceRegistry()), tx.DefaultSignModes)
+	decodedTx, err := txConfig.TxDecoder()(txBytes)
+	if err != nil {
+		fmt.Println(err.Error())
+		return
+	}
+
+	msg := decodedTx.GetMsgs()[0]
+
+	// Get signer address, handling both legacy and non-legacy messages
+	var sender sdk.AccAddress
+	if legacyMsg, ok := msg.(sdk.LegacyMsg); ok {
+		sender = legacyMsg.GetSigners()[0]
+	} else {
+		// For non-legacy messages, get signer from tx signers
+		sigTx, ok := decodedTx.(signing.SigVerifiableTx)
+		if !ok {
+			fmt.Println("tx does not implement SigVerifiableTx")
+			return
+		}
+		signers, err := sigTx.GetSigners()
+		if err != nil {
+			fmt.Println("failed to get signers:", err)
+			return
+		}
+		if len(signers) == 0 {
+			fmt.Println("no signers found")
+			return
+		}
+		sender = signers[0]
+	}
+
+	feeTx, ok := decodedTx.(sdk.FeeTx)
+	if !ok {
+		fmt.Println("tx is not a sdk.FeeTx")
+		return
+	}
+
+	memoTx, ok := decodedTx.(sdk.TxWithMemo)
+	if !ok {
+		fmt.Println("tx is not a sdk.TxWithMemo")
+		return
+	}
+
+	memo := memoTx.GetMemo()
+	fees := feeTx.GetFee()
+	gasLimit := feeTx.GetGas()
+
+	var feeDetails []indexerTypes.FeeDetail
+	for _, fee := range fees {
+		feeDetails = append(feeDetails, indexerTypes.FeeDetail{
+			Amount: fee.Amount.String(),
+			Denom:  fee.Denom,
+		})
+	}
+
+	baseTx := indexerTypes.BaseTransaction{
+		BlockTime:         blockTime,
+		Author:            sender.String(),
+		IncludedAddresses: includingAddresses,
+		BlockHeight:       blockHeight,
+		TxHash:            txHash,
+		TxType:            "/" + proto.MessageName(msg),
+		Fees:              feeDetails,
+		GasUsed:           strconv.FormatUint(gasUsed, 10),
+		GasLimit:          strconv.FormatUint(gasLimit, 10),
+		Memo:              memo,
+	}
+
+	fmt.Println(baseTx)
+
+	res, err := proc.Process(database, baseTx)
+	if err != nil {
+		fmt.Println(err)
+	}
+
+	fmt.Println(res)
+}
+
+// retryProcessing attempts to reprocess a transaction after a delay
+func retryProcessing(ctx sdk.Context, proc indexerTypes.Processor, includingAddresses []string) {
+	go func() {
+		time.Sleep(5 * time.Second) // Wait for 5 seconds before retrying
+		QueueTransaction(ctx, proc, includingAddresses)
+	}()
+}
diff --git a/indexer/registry.go b/indexer/registry.go
new file mode 100644
index 00000000..09f79b77
--- /dev/null
+++ b/indexer/registry.go
@@ -0,0 +1,138 @@
+package indexer
+
+import (
+	"encoding/json"
+	"fmt"
+	"reflect"
+
+	"github.com/elys-network/elys/indexer/txs/amm"
+	"github.com/elys-network/elys/indexer/txs/assetprofile"
+	"github.com/elys-network/elys/indexer/txs/burner"
+	"github.com/elys-network/elys/indexer/txs/commitments"
+	"github.com/elys-network/elys/indexer/txs/estaking"
+	"github.com/elys-network/elys/indexer/txs/leveragelp"
+	"github.com/elys-network/elys/indexer/txs/masterchef"
+	"github.com/elys-network/elys/indexer/txs/oracle"
+	"github.com/elys-network/elys/indexer/txs/parameter"
+	"github.com/elys-network/elys/indexer/txs/perpetual"
+	"github.com/elys-network/elys/indexer/txs/stablestake"
+	"github.com/elys-network/elys/indexer/txs/tradeshield"
+	"github.com/elys-network/elys/indexer/types"
+)
+
+var txRegistry = make(map[string]reflect.Type)
+
+func init() {
+	// Commitments
+	RegisterTxType("/elys.commitment.MsgStake", reflect.TypeOf(commitments.MsgStake{}))
+	RegisterTxType("/elys.commitment.MsgUnstake", reflect.TypeOf(commitments.MsgUnstake{}))
+	RegisterTxType("/elys.commitment.MsgVestLiquid", reflect.TypeOf(commitments.MsgVestLiquid{}))
+	RegisterTxType("/elys.commitment.MsgCancelVest", reflect.TypeOf(commitments.MsgCancelVest{}))
+	RegisterTxType("/elys.commitment.MsgClaimVesting", reflect.TypeOf(commitments.MsgClaimVesting{}))
+	RegisterTxType("/elys.commitment.MsgCommitClaimedRewards", reflect.TypeOf(commitments.MsgCommitClaimedRewards{}))
+	RegisterTxType("/elys.commitment.MsgUncommitTokens", reflect.TypeOf(commitments.MsgUncommitTokens{}))
+
+	// AMM
+	RegisterTxType("/elys.amm.MsgCreatePool", reflect.TypeOf(amm.MsgCreatePool{}))
+	RegisterTxType("/elys.amm.MsgJoinPool", reflect.TypeOf(amm.MsgJoinPool{}))
+	RegisterTxType("/elys.amm.MsgExitPool", reflect.TypeOf(amm.MsgExitPool{}))
+	RegisterTxType("/elys.amm.MsgSwapExactAmountIn", reflect.TypeOf(amm.MsgSwapExactAmountIn{}))
+	RegisterTxType("/elys.amm.MsgSwapExactAmountOut", reflect.TypeOf(amm.MsgSwapExactAmountOut{}))
+	RegisterTxType("/elys.amm.MsgSwapByDenom", reflect.TypeOf(amm.MsgSwapByDenom{}))
+	RegisterTxType("/elys.amm.MsgUpdateParams", reflect.TypeOf(amm.MsgUpdateParams{}))
+	RegisterTxType("/elys.amm.MsgUpdatePoolParams", reflect.TypeOf(amm.MsgUpdatePoolParams{}))
+	RegisterTxType("/elys.amm.MsgFeedMultipleExternalLiquidity", reflect.TypeOf(amm.MsgFeedMultipleExternalLiquidity{}))
+
+	// Perpetual
+	RegisterTxType("/elys.perpetual.MsgOpen", reflect.TypeOf(perpetual.MsgOpen{}))
+	RegisterTxType("/elys.perpetual.MsgClose", reflect.TypeOf(perpetual.MsgClose{}))
+	RegisterTxType("/elys.perpetual.MsgUpdateStopLoss", reflect.TypeOf(perpetual.MsgUpdateStopLoss{}))
+	RegisterTxType("/elys.perpetual.MsgClosePositions", reflect.TypeOf(perpetual.MsgClosePositions{}))
+
+	// LeverageLP
+	RegisterTxType("/elys.leveragelp.MsgOpen", reflect.TypeOf(leveragelp.MsgOpen{}))
+	RegisterTxType("/elys.leveragelp.MsgClose", reflect.TypeOf(leveragelp.MsgClose{}))
+	RegisterTxType("/elys.leveragelp.MsgClosePosition", reflect.TypeOf(leveragelp.MsgClosePositions{}))
+	RegisterTxType("/elys.leveragelp.MsgClaimRewards", reflect.TypeOf(leveragelp.MsgClaimRewards{}))
+	RegisterTxType("/elys.leveragelp.MsgUpdateStopLoss", reflect.TypeOf(leveragelp.MsgUpdateStopLoss{}))
+	RegisterTxType("/elys.leveragelp.MsgAddPool", reflect.TypeOf(leveragelp.MsgAddPool{}))
+
+	// Oracle
+	RegisterTxType("/elys.oracle.MsgFeedPrice", reflect.TypeOf(oracle.MsgFeedPrice{}))
+	RegisterTxType("/elys.oracle.MsgFeedMultiplePrices", reflect.TypeOf(oracle.MsgFeedMultiplePrices{}))
+	RegisterTxType("/elys.oracle.MsgSetPriceFeeder", reflect.TypeOf(oracle.MsgSetPriceFeeder{}))
+	RegisterTxType("/elys.oracle.MsgDeletePriceFeeder", reflect.TypeOf(oracle.MsgDeletePriceFeeder{}))
+	RegisterTxType("/elys.oracle.MsgCreateAssetInfo", reflect.TypeOf(oracle.MsgCreateAssetInfo{}))
+
+	// Parameter
+	RegisterTxType("/elys.parameter.MsgUpdateMinCommission", reflect.TypeOf(parameter.MsgUpdateMinCommission{}))
+	RegisterTxType("/elys.parameter.MsgUpdateMaxVotingPower", reflect.TypeOf(parameter.MsgUpdateMaxVotingPower{}))
+	RegisterTxType("/elys.parameter.MsgUpdateMinSelfDelegation", reflect.TypeOf(parameter.MsgUpdateMinSelfDelegation{}))
+	RegisterTxType("/elys.parameter.MsgUpdateTotalBlocksPerYear", reflect.TypeOf(parameter.MsgUpdateTotalBlocksPerYear{}))
+	RegisterTxType("/elys.parameter.MsgUpdateRewardsDataLifetime", reflect.TypeOf(parameter.MsgUpdateRewardsDataLifetime{}))
+
+	// StableStake
+	RegisterTxType("/elys.stablestake.MsgBond", reflect.TypeOf(stablestake.MsgBond{}))
+	RegisterTxType("/elys.stablestake.MsgUnbond", reflect.TypeOf(stablestake.MsgUnbond{}))
+	RegisterTxType("/elys.stablestake.MsgUpdateParams", reflect.TypeOf(stablestake.MsgUpdateParams{}))
+
+	// TradeShield
+	RegisterTxType("/elys.tradeshield.MsgCreateSpotOrder", reflect.TypeOf(tradeshield.MsgCreateSpotOrder{}))
+	RegisterTxType("/elys.tradeshield.MsgCancelSpotOrders", reflect.TypeOf(tradeshield.MsgCancelSpotOrders{}))
+	RegisterTxType("/elys.tradeshield.MsgCreatePerpetualOrder", reflect.TypeOf(tradeshield.MsgCreatePerpetualOpenOrder{}))
+	RegisterTxType("/elys.tradeshield.MsgCancelPerpetualOrder", reflect.TypeOf(tradeshield.MsgCancelPerpetualOrder{}))
+	RegisterTxType("/elys.tradeshield.MsgCancelPerpetualOrders", reflect.TypeOf(tradeshield.MsgCancelPerpetualOrders{}))
+	RegisterTxType("/elys.tradeshield.MsgUpdatePerpetualOrder", reflect.TypeOf(tradeshield.MsgUpdatePerpetualOrder{}))
+	RegisterTxType("/elys.tradeshield.MsgExecuteOrders", reflect.TypeOf(tradeshield.MsgExecuteOrders{}))
+	RegisterTxType("/elys.tradeshield.MsgUpdateParams", reflect.TypeOf(tradeshield.MsgUpdateParams{}))
+
+	// Asset Profile
+	RegisterTxType("/elys.assetprofile.MsgAddEntry", reflect.TypeOf(assetprofile.MsgAddEntry{}))
+	RegisterTxType("/elys.assetprofile.MsgUpdateEntry", reflect.TypeOf(assetprofile.MsgUpdateEntry{}))
+	RegisterTxType("/elys.assetprofile.MsgDeleteEntry", reflect.TypeOf(assetprofile.MsgDeleteEntry{}))
+
+	// Masterchef
+	RegisterTxType("/elys.masterchef.MsgClaimRewards", reflect.TypeOf(masterchef.MsgClaimRewards{}))
+
+	// EStaking
+	RegisterTxType("/elys.estaking.MsgUpdateParams", reflect.TypeOf(estaking.MsgUpdateParams{}))
+	RegisterTxType("/elys.estaking.MsgWithdrawAllRewards", reflect.TypeOf(estaking.MsgWithdrawAllRewards{}))
+
+	// Burner
+	RegisterTxType("/elys.burner.MsgUpdateParams", reflect.TypeOf(burner.MsgUpdateParams{}))
+
+	// Automatic events
+	RegisterTxType("/elys.burner.MsgUpdateParams", reflect.TypeOf(burner.MsgUpdateParams{}))
+
+}
+
+func RegisterTxType(txType string, dataType reflect.Type) {
+	txRegistry[txType] = dataType
+}
+
+func ParseTransaction(tx types.GenericTransaction) (string, types.Processor, error) {
+	txType := tx.BaseTransaction.TxType
+	fmt.Println(tx.BaseTransaction)
+	dataType, ok := txRegistry[txType]
+	if !ok {
+		return "", nil, fmt.Errorf("unknown transaction type: %s", txType)
+	}
+
+	dataValue := reflect.New(dataType).Interface()
+	dataBytes, err := json.Marshal(tx.Data)
+	if err != nil {
+		return "", nil, fmt.Errorf("error marshaling data: %w", err)
+	}
+
+	err = json.Unmarshal(dataBytes, dataValue)
+	if err != nil {
+		return "", nil, fmt.Errorf("error unmarshaling to %s: %w", dataType.Name(), err)
+	}
+
+	processor, ok := reflect.ValueOf(dataValue).Elem().Interface().(types.Processor)
+	if !ok {
+		return "", nil, fmt.Errorf("type %s does not implement Processor", dataType.Name())
+	}
+
+	return txType, processor, nil
+}
diff --git a/indexer/txs/amm/CreatePool.go b/indexer/txs/amm/CreatePool.go
new file mode 100644
index 00000000..715ccf53
--- /dev/null
+++ b/indexer/txs/amm/CreatePool.go
@@ -0,0 +1,38 @@
+package amm
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type PoolAsset struct {
+	Token types.Token `json:"token"`
+}
+
+type PoolParams struct {
+	SwapFee   string `json:"swap_fee"`
+	UseOracle bool   `json:"use_oracle"`
+	FeeDenom  string `json:"fee_denom"`
+}
+
+type MsgCreatePool struct {
+	Sender     string      `json:"sender"`
+	PoolParams PoolParams  `json:"pool_params"`
+	PoolAssets []PoolAsset `json:"pool_assets"`
+	PoolID     uint64      `json:"pool_id"`
+}
+
+func (m MsgCreatePool) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/amm/ExitPool.go b/indexer/txs/amm/ExitPool.go
new file mode 100644
index 00000000..106e9fc5
--- /dev/null
+++ b/indexer/txs/amm/ExitPool.go
@@ -0,0 +1,30 @@
+package amm
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgExitPool struct {
+	Sender        string        `json:"sender"`
+	PoolID        uint64        `json:"pool_id"`
+	MinAmountsOut []types.Token `json:"min_amounts_out"`
+	ShareAmountIn string        `json:"share_amount_in"`
+	TokenOutDenom string        `json:"token_out_denom"`
+	TokenOut      []types.Token `json:"token_out"`
+}
+
+func (m MsgExitPool) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/amm/FeedMutipleExternalLiquidity.go b/indexer/txs/amm/FeedMutipleExternalLiquidity.go
new file mode 100644
index 00000000..ca21697a
--- /dev/null
+++ b/indexer/txs/amm/FeedMutipleExternalLiquidity.go
@@ -0,0 +1,37 @@
+package amm
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type AssetAmountDepth struct {
+	Asset  string `json:"asset"`
+	Amount string `json:"amount"`
+	Depth  string `json:"depth"`
+}
+
+type ExternalLiquidity struct {
+	PoolID          uint64             `json:"pool_id"`
+	AmountDepthInfo []AssetAmountDepth `json:"amount_depth_info"`
+}
+
+type MsgFeedMultipleExternalLiquidity struct {
+	Sender    string              `json:"sender"`
+	Liquidity []ExternalLiquidity `json:"liquidity"`
+}
+
+func (m MsgFeedMultipleExternalLiquidity) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/amm/JoinPool.go b/indexer/txs/amm/JoinPool.go
new file mode 100644
index 00000000..7b7011a9
--- /dev/null
+++ b/indexer/txs/amm/JoinPool.go
@@ -0,0 +1,29 @@
+package amm
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgJoinPool struct {
+	Sender         string        `json:"sender"`
+	PoolID         uint64        `json:"pool_id"`
+	MaxAmountsIn   []types.Token `json:"max_amounts_in"`
+	ShareAmountOut string        `json:"share_amount_out"`
+	TokenIn        []types.Token `json:"token_in"` // Actual tokens used to join the pool
+}
+
+func (m MsgJoinPool) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/amm/SwapByDenom.go b/indexer/txs/amm/SwapByDenom.go
new file mode 100644
index 00000000..e715bd9a
--- /dev/null
+++ b/indexer/txs/amm/SwapByDenom.go
@@ -0,0 +1,49 @@
+package amm
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+// Defined in SwapExactAmountIn.go
+// type SwapAmountInRoute struct {
+// 	PoolId        uint64 `json:"pool_id"`
+// 	TokenOutDenom string `json:"token_out_denom"`
+// }
+
+// Defined in SwapExactAmountOut.go
+// type SwapAmountOutRoute struct {
+// 	PoolId       uint64 `json:"pool_id"`
+// 	TokenInDenom string `json:"token_in_denom"`
+// }
+
+type MsgSwapByDenom struct {
+	Sender    string               `json:"sender"`
+	Amount    types.Token          `json:"amount"`
+	MinAmount types.Token          `json:"min_amount"`
+	MaxAmount types.Token          `json:"max_amount"`
+	DenomIn   string               `json:"denom_in"`
+	DenomOut  string               `json:"denom_out"`
+	Recipient string               `json:"recipient"`
+	InRoute   []SwapAmountInRoute  `json:"in_route,omitempty"`
+	OutRoute  []SwapAmountOutRoute `json:"out_route,omitempty"`
+	SpotPrice string               `json:"spot_price"`
+	SwapFee   string               `json:"swap_fee"`
+	Discount  string               `json:"discount"`
+	AmountOut types.Token          `json:"amount_out"`
+}
+
+func (m MsgSwapByDenom) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/amm/SwapExactAmountIn.go b/indexer/txs/amm/SwapExactAmountIn.go
new file mode 100644
index 00000000..79cfe531
--- /dev/null
+++ b/indexer/txs/amm/SwapExactAmountIn.go
@@ -0,0 +1,37 @@
+package amm
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type SwapAmountInRoute struct {
+	PoolID        uint64 `json:"pool_id"`
+	TokenOutDenom string `json:"token_out_denom"`
+}
+
+type MsgSwapExactAmountIn struct {
+	Sender            string              `json:"sender"`
+	Routes            []SwapAmountInRoute `json:"routes"`
+	TokenIn           types.Token         `json:"token_in"`
+	TokenOutMinAmount string              `json:"token_out_min_amount"`
+	Recipient         string              `json:"recipient"`
+	SwapFee           string              `json:"swap_fee"`
+	Discount          string              `json:"discount"`
+	AmountOut         types.Token         `json:"amount_out"`
+}
+
+func (m MsgSwapExactAmountIn) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/amm/SwapExactAmountOut.go b/indexer/txs/amm/SwapExactAmountOut.go
new file mode 100644
index 00000000..b7672760
--- /dev/null
+++ b/indexer/txs/amm/SwapExactAmountOut.go
@@ -0,0 +1,37 @@
+package amm
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type SwapAmountOutRoute struct {
+	PoolID       uint64 `json:"pool_id"`
+	TokenInDenom string `json:"token_in_denom"`
+}
+
+type MsgSwapExactAmountOut struct {
+	Sender           string               `json:"sender"`
+	Routes           []SwapAmountOutRoute `json:"routes"`
+	TokenOut         types.Token          `json:"token_out"`
+	TokenInMaxAmount string               `json:"token_in_max_amount"`
+	Recipient        string               `json:"recipient"`
+	TokenInAmount    types.Token          `json:"token_in_amount"`
+	SwapFee          types.Token          `json:"swap_fee"`
+	Discount         types.Token          `json:"discount"`
+}
+
+func (m MsgSwapExactAmountOut) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/amm/UpdateParams.go b/indexer/txs/amm/UpdateParams.go
new file mode 100644
index 00000000..02593195
--- /dev/null
+++ b/indexer/txs/amm/UpdateParams.go
@@ -0,0 +1,38 @@
+package amm
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type Params struct {
+	PoolCreationFee             string   `json:"pool_creation_fee"`
+	SlippageTrackDuration       uint64   `json:"slippage_track_duration"`
+	BaseAssets                  []string `json:"base_assets"`
+	WeightBreakingFeeExponent   string   `json:"weight_breaking_fee_exponent"`
+	WeightBreakingFeeMultiplier string   `json:"weight_breaking_fee_multiplier"`
+	WeightBreakingFeePortion    string   `json:"weight_breaking_fee_portion"`
+	WeightRecoveryFeePortion    string   `json:"weight_recovery_fee_portion"`
+	ThresholdWeightDifference   string   `json:"threshold_weight_difference"`
+	AllowedPoolCreators         []string `json:"allowed_pool_creators"`
+}
+
+type MsgUpdateParams struct {
+	Authority string `json:"authority"`
+	Params    Params `json:"params"`
+}
+
+func (m MsgUpdateParams) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/amm/UpdatePoolParams.go b/indexer/txs/amm/UpdatePoolParams.go
new file mode 100644
index 00000000..68a16311
--- /dev/null
+++ b/indexer/txs/amm/UpdatePoolParams.go
@@ -0,0 +1,35 @@
+package amm
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+// Defined In CreatePool.go
+
+// type PoolParams struct {
+// 	SwapFee   string `json:"swap_fee"`
+// 	UseOracle bool   `json:"use_oracle"`
+// 	FeeDenom  string `json:"fee_denom"`
+// }
+
+type MsgUpdatePoolParams struct {
+	Authority  string     `json:"authority"`
+	PoolID     uint64     `json:"pool_id"`
+	PoolParams PoolParams `json:"pool_params"`
+}
+
+func (m MsgUpdatePoolParams) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/assetprofile/AddEntry.go b/indexer/txs/assetprofile/AddEntry.go
new file mode 100644
index 00000000..23c7bb25
--- /dev/null
+++ b/indexer/txs/assetprofile/AddEntry.go
@@ -0,0 +1,43 @@
+package assetprofile
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgAddEntry struct {
+	Authority                string   `json:"authority"`
+	BaseDenom                string   `json:"base_denom"`
+	Decimals                 uint64   `json:"decimals"`
+	Denom                    string   `json:"denom"`
+	Path                     string   `json:"path"`
+	IbcChannelId             string   `json:"ibc_channel_id"`
+	IbcCounterpartyChannelId string   `json:"ibc_counterparty_channel_id"`
+	DisplayName              string   `json:"display_name"`
+	DisplaySymbol            string   `json:"display_symbol"`
+	Network                  string   `json:"network"`
+	Address                  string   `json:"address"`
+	ExternalSymbol           string   `json:"external_symbol"`
+	TransferLimit            string   `json:"transfer_limit"`
+	Permissions              []string `json:"permissions"`
+	UnitDenom                string   `json:"unit_denom"`
+	IbcCounterpartyDenom     string   `json:"ibc_counterparty_denom"`
+	IbcCounterpartyChainId   string   `json:"ibc_counterparty_chain_id"`
+	CommitEnabled            bool     `json:"commit_enabled"`
+	WithdrawEnabled          bool     `json:"withdraw_enabled"`
+}
+
+func (m MsgAddEntry) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/assetprofile/DeleteEntry.go b/indexer/txs/assetprofile/DeleteEntry.go
new file mode 100644
index 00000000..dbbed266
--- /dev/null
+++ b/indexer/txs/assetprofile/DeleteEntry.go
@@ -0,0 +1,26 @@
+package assetprofile
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgDeleteEntry struct {
+	Authority string `json:"authority"`
+	BaseDenom string `json:"base_denom"`
+}
+
+func (m MsgDeleteEntry) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/assetprofile/UpdateEntry.go b/indexer/txs/assetprofile/UpdateEntry.go
new file mode 100644
index 00000000..5a479030
--- /dev/null
+++ b/indexer/txs/assetprofile/UpdateEntry.go
@@ -0,0 +1,43 @@
+package assetprofile
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUpdateEntry struct {
+	Authority                string   `json:"authority"`
+	BaseDenom                string   `json:"base_denom"`
+	Decimals                 uint64   `json:"decimals"`
+	Denom                    string   `json:"denom"`
+	Path                     string   `json:"path"`
+	IbcChannelId             string   `json:"ibc_channel_id"`
+	IbcCounterpartyChannelId string   `json:"ibc_counterparty_channel_id"`
+	DisplayName              string   `json:"display_name"`
+	DisplaySymbol            string   `json:"display_symbol"`
+	Network                  string   `json:"network"`
+	Address                  string   `json:"address"`
+	ExternalSymbol           string   `json:"external_symbol"`
+	TransferLimit            string   `json:"transfer_limit"`
+	Permissions              []string `json:"permissions"`
+	UnitDenom                string   `json:"unit_denom"`
+	IbcCounterpartyDenom     string   `json:"ibc_counterparty_denom"`
+	IbcCounterpartyChainId   string   `json:"ibc_counterparty_chain_id"`
+	CommitEnabled            bool     `json:"commit_enabled"`
+	WithdrawEnabled          bool     `json:"withdraw_enabled"`
+}
+
+func (m MsgUpdateEntry) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/burner/UpdateParams.go b/indexer/txs/burner/UpdateParams.go
new file mode 100644
index 00000000..cdf84a1c
--- /dev/null
+++ b/indexer/txs/burner/UpdateParams.go
@@ -0,0 +1,30 @@
+package burner
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type Params struct {
+	EpochIdentifier string `json:"epoch_identifier"`
+}
+
+type MsgUpdateParams struct {
+	Authority string `json:"authority"`
+	Params    Params `json:"params"`
+}
+
+func (m MsgUpdateParams) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/commitments/CancelVest.go b/indexer/txs/commitments/CancelVest.go
new file mode 100644
index 00000000..fae5222e
--- /dev/null
+++ b/indexer/txs/commitments/CancelVest.go
@@ -0,0 +1,26 @@
+package commitments
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgCancelVest struct {
+	Creator string      `json:"creator"`
+	Token   types.Token `json:"token"`
+}
+
+func (m MsgCancelVest) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/commitments/ClaimVesting.go b/indexer/txs/commitments/ClaimVesting.go
new file mode 100644
index 00000000..3c6553f1
--- /dev/null
+++ b/indexer/txs/commitments/ClaimVesting.go
@@ -0,0 +1,26 @@
+package commitments
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgClaimVesting struct {
+	Sender string        `json:"sender"`
+	Claims []types.Token `json:"claims"`
+}
+
+func (m MsgClaimVesting) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/commitments/CommitClaimedRewards.go b/indexer/txs/commitments/CommitClaimedRewards.go
new file mode 100644
index 00000000..9225c172
--- /dev/null
+++ b/indexer/txs/commitments/CommitClaimedRewards.go
@@ -0,0 +1,26 @@
+package commitments
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgCommitClaimedRewards struct {
+	Creator string      `json:"creator"`
+	Token   types.Token `json:"token"`
+}
+
+func (m MsgCommitClaimedRewards) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/commitments/Stake.go b/indexer/txs/commitments/Stake.go
new file mode 100644
index 00000000..dd2ada97
--- /dev/null
+++ b/indexer/txs/commitments/Stake.go
@@ -0,0 +1,29 @@
+package commitments
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgStake struct {
+	Creator           string      `json:"creator"`
+	Token             types.Token `json:"token"`
+	ValidatorAddresss string      `json:"validator_address"`
+}
+
+func (m MsgStake) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	fmt.Println("Successfully Stored")
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/commitments/UncommitTokens.go b/indexer/txs/commitments/UncommitTokens.go
new file mode 100644
index 00000000..937cd1aa
--- /dev/null
+++ b/indexer/txs/commitments/UncommitTokens.go
@@ -0,0 +1,27 @@
+package commitments
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUncommitTokens struct {
+	Creator       string      `json:"creator"`
+	Token         types.Token `json:"token"`
+	IsLiquidation bool        `json:"is_liquidation"`
+}
+
+func (m MsgUncommitTokens) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/commitments/Unstake.go b/indexer/txs/commitments/Unstake.go
new file mode 100644
index 00000000..0db8a88e
--- /dev/null
+++ b/indexer/txs/commitments/Unstake.go
@@ -0,0 +1,27 @@
+package commitments
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUnstake struct {
+	Creator          string      `json:"creator"`
+	Token            types.Token `json:"token"`
+	ValidatorAddress string      `json:"validator_address"`
+}
+
+func (m MsgUnstake) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/commitments/VestLiquid.go b/indexer/txs/commitments/VestLiquid.go
new file mode 100644
index 00000000..2ea7b5d1
--- /dev/null
+++ b/indexer/txs/commitments/VestLiquid.go
@@ -0,0 +1,26 @@
+package commitments
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgVestLiquid struct {
+	Creator string      `json:"creator"`
+	Token   types.Token `json:"token"`
+}
+
+func (m MsgVestLiquid) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/estaking/Message.go b/indexer/txs/estaking/Message.go
new file mode 100644
index 00000000..289756c4
--- /dev/null
+++ b/indexer/txs/estaking/Message.go
@@ -0,0 +1,62 @@
+package estaking
+
+import (
+	"github.com/elys-network/elys/indexer/types"
+)
+
+// UpdateParams Message
+type MsgUpdateParams struct {
+	Authority string      `json:"authority"`
+	Params    interface{} `json:"params"`
+}
+
+func (m MsgUpdateParams) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+	return types.Response{}, database.ProcessNewTx(mergedData, transaction.Author)
+}
+
+// WithdrawReward Message
+type MsgWithdrawReward struct {
+	DelegatorAddress string        `json:"delegator_address"`
+	ValidatorAddress string        `json:"validator_address"`
+	Amount           []types.Token `json:"amount"`
+}
+
+func (m MsgWithdrawReward) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+	return types.Response{}, database.ProcessNewTx(mergedData, transaction.Author)
+}
+
+// WithdrawElysStakingRewards Message
+type MsgWithdrawElysStakingRewards struct {
+	DelegatorAddress string        `json:"delegator_address"`
+	Amount           []types.Token `json:"amount"`
+}
+
+func (m MsgWithdrawElysStakingRewards) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+	return types.Response{}, database.ProcessNewTx(mergedData, transaction.Author)
+}
+
+// WithdrawAllRewards Message
+type MsgWithdrawAllRewards struct {
+	DelegatorAddress string        `json:"delegator_address"`
+	Amount           []types.Token `json:"amount"`
+}
+
+func (m MsgWithdrawAllRewards) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+	return types.Response{}, database.ProcessNewTx(mergedData, transaction.Author)
+}
diff --git a/indexer/txs/leveragelp/AddPool.go b/indexer/txs/leveragelp/AddPool.go
new file mode 100644
index 00000000..c9d11922
--- /dev/null
+++ b/indexer/txs/leveragelp/AddPool.go
@@ -0,0 +1,32 @@
+package leveragelp
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type AddPool struct {
+	AmmPoolID   uint64 `json:"amm_pool_id"`
+	LeverageMax string `json:"leverage_max"`
+	Leverage    string `json:"leverage"`
+}
+
+type MsgAddPool struct {
+	Authority string  `json:"authority"`
+	Pool      AddPool `json:"pool"`
+}
+
+func (m MsgAddPool) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/leveragelp/ClaimRewards.go b/indexer/txs/leveragelp/ClaimRewards.go
new file mode 100644
index 00000000..3d8a0bb3
--- /dev/null
+++ b/indexer/txs/leveragelp/ClaimRewards.go
@@ -0,0 +1,26 @@
+package leveragelp
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgClaimRewards struct {
+	Sender string   `json:"sender"`
+	Ids    []uint64 `json:"position_ids"`
+}
+
+func (m MsgClaimRewards) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/leveragelp/Close.go b/indexer/txs/leveragelp/Close.go
new file mode 100644
index 00000000..9c40085f
--- /dev/null
+++ b/indexer/txs/leveragelp/Close.go
@@ -0,0 +1,37 @@
+package leveragelp
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgClose struct {
+	Creator     string   `json:"creator"`
+	ID          uint64   `json:"id"`
+	LpAmount    string   `json:"lp_amount"`
+	RepayAmount string   `json:"repay_amount"`
+	Position    Position `json:"position"`
+}
+
+type Position struct {
+	ID             uint64      `json:"id"`
+	Address        string      `json:"address"`
+	Collateral     types.Token `json:"collateral"`
+	Liabilities    string      `json:"liabilities"`
+	PositionHealth string      `json:"position_health"`
+}
+
+func (m MsgClose) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/leveragelp/ClosePosition.go b/indexer/txs/leveragelp/ClosePosition.go
new file mode 100644
index 00000000..8cb6d892
--- /dev/null
+++ b/indexer/txs/leveragelp/ClosePosition.go
@@ -0,0 +1,34 @@
+package leveragelp
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type PositionRequest struct {
+	Address string `json:"address"`
+	ID      uint64 `json:"id"`
+}
+
+type MsgClosePositions struct {
+	Creator    string            `json:"creator"`
+	Liquidate  []PositionRequest `json:"liquidate"`
+	StopLoss   []PositionRequest `json:"stop_loss"`
+	LiquidLogs []string          `json:"liquid_logs"`
+	CloseLogs  []string          `json:"close_logs"`
+}
+
+func (m MsgClosePositions) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/leveragelp/Event.go b/indexer/txs/leveragelp/Event.go
new file mode 100644
index 00000000..f2952fd7
--- /dev/null
+++ b/indexer/txs/leveragelp/Event.go
@@ -0,0 +1,64 @@
+package leveragelp
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type LiquidationEvent struct {
+	PositionID     uint64      `json:"position_id"`
+	Address        string      `json:"address"`
+	Collateral     types.Token `json:"collateral"`
+	RepayAmount    string      `json:"repay_amount"`
+	Liabilities    string      `json:"liabilities"`
+	Health         string      `json:"health"`
+	InitialValue   string      `json:"initial_value"`    // Initial position value (collateral)
+	FinalValue     string      `json:"final_value"`      // Final value (repayAmount - liabilities)
+	ProfitLoss     string      `json:"profit_loss"`      // Actual P/L
+	ProfitLossPerc string      `json:"profit_loss_perc"` // P/L as percentage
+}
+
+type StopLossEvent struct {
+	PositionID      uint64      `json:"position_id"`
+	Address         string      `json:"address"`
+	Collateral      types.Token `json:"collateral"`
+	RepayAmount     string      `json:"repay_amount"`
+	Liabilities     string      `json:"liabilities"`
+	Health          string      `json:"health"`
+	StopLossPrice   string      `json:"stop_loss_price"`
+	LpTokenPrice    string      `json:"lp_token_price"`
+	InitialValue    string      `json:"initial_value"`    // Initial position value
+	FinalValue      string      `json:"final_value"`      // Final value at stop loss
+	ProfitLoss      string      `json:"profit_loss"`      // Calculated P&L
+	ProfitLossPerc  string      `json:"profit_loss_perc"` // P&L as percentage
+	RemainingAmount string      `json:"remaining_amount"` // Amount returned to user after closure
+}
+
+func (e LiquidationEvent) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing event: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+func (e StopLossEvent) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing event: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/leveragelp/Open.go b/indexer/txs/leveragelp/Open.go
new file mode 100644
index 00000000..89a043bd
--- /dev/null
+++ b/indexer/txs/leveragelp/Open.go
@@ -0,0 +1,39 @@
+package leveragelp
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type PositionOpen struct {
+	ID          uint64      `json:"id"`
+	Address     string      `json:"address"`
+	Collateral  types.Token `json:"collateral"`
+	Liabilities string      `json:"liabilities"`
+	Health      string      `json:"health"`
+}
+
+type MsgOpen struct {
+	Creator          string       `json:"creator"`
+	CollateralAsset  string       `json:"collateral_asset"`
+	CollateralAmount string       `json:"collateral_amount"`
+	AmmPoolID        uint64       `json:"amm_pool_id"`
+	Leverage         string       `json:"leverage"`
+	StopLossPrice    string       `json:"stop_loss_price"`
+	Position         PositionOpen `json:"position"`
+}
+
+func (m MsgOpen) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/leveragelp/UpdateStopLoss.go b/indexer/txs/leveragelp/UpdateStopLoss.go
new file mode 100644
index 00000000..6f556e8a
--- /dev/null
+++ b/indexer/txs/leveragelp/UpdateStopLoss.go
@@ -0,0 +1,38 @@
+package leveragelp
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type PositionStopLoss struct {
+	ID          uint64      `json:"id"`
+	Address     string      `json:"address"`
+	Collateral  types.Token `json:"collateral"`
+	Liabilities string      `json:"liabilities"`
+	Health      string      `json:"health"`
+	StopLoss    string      `json:"stop_loss"`
+}
+
+type MsgUpdateStopLoss struct {
+	Creator   string           `json:"creator"`
+	Position  uint64           `json:"position"`
+	Price     string           `json:"price"`
+	PoolID    uint64           `json:"pool_id"`
+	Position_ PositionStopLoss `json:"position_details"`
+}
+
+func (m MsgUpdateStopLoss) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/masterchef/ClaimRewards.go b/indexer/txs/masterchef/ClaimRewards.go
new file mode 100644
index 00000000..c90deeed
--- /dev/null
+++ b/indexer/txs/masterchef/ClaimRewards.go
@@ -0,0 +1,26 @@
+package masterchef
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgClaimRewards struct {
+	Sender  string   `json:"sender"`
+	PoolIds []uint64 `json:"pool_ids"`
+}
+
+func (m MsgClaimRewards) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/masterchef/Event.go b/indexer/txs/masterchef/Event.go
new file mode 100644
index 00000000..77d26848
--- /dev/null
+++ b/indexer/txs/masterchef/Event.go
@@ -0,0 +1,28 @@
+package masterchef
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type ClaimRewardsEvent struct {
+	Sender      string        `json:"sender"`
+	Recipient   string        `json:"recipient"`
+	PoolIDs     []uint64      `json:"pool_ids"`
+	RewardCoins []types.Token `json:"reward_coins"`
+}
+
+func (e ClaimRewardsEvent) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing event: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/oracle/CreateAssetInfo.go b/indexer/txs/oracle/CreateAssetInfo.go
new file mode 100644
index 00000000..6919161f
--- /dev/null
+++ b/indexer/txs/oracle/CreateAssetInfo.go
@@ -0,0 +1,30 @@
+package oracle
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgCreateAssetInfo struct {
+	Creator    string `json:"creator"`
+	Denom      string `json:"denom"`
+	Display    string `json:"display"`
+	BandTicker string `json:"band_ticker"`
+	ElysTicker string `json:"elys_ticker"`
+	Decimal    uint64 `json:"decimal"`
+}
+
+func (m MsgCreateAssetInfo) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/oracle/DeletePriceFeeder.go b/indexer/txs/oracle/DeletePriceFeeder.go
new file mode 100644
index 00000000..d5f4725f
--- /dev/null
+++ b/indexer/txs/oracle/DeletePriceFeeder.go
@@ -0,0 +1,25 @@
+package oracle
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgDeletePriceFeeder struct {
+	Feeder string `json:"feeder"`
+}
+
+func (m MsgDeletePriceFeeder) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/oracle/FeedMutiplePricess.go b/indexer/txs/oracle/FeedMutiplePricess.go
new file mode 100644
index 00000000..5a3b302f
--- /dev/null
+++ b/indexer/txs/oracle/FeedMutiplePricess.go
@@ -0,0 +1,33 @@
+package oracle
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type FeedPrice struct {
+	Asset  string `json:"asset"`
+	Price  string `json:"price"`
+	Source string `json:"source"`
+}
+
+type MsgFeedMultiplePrices struct {
+	Creator    string      `json:"creator"`
+	FeedPrices []FeedPrice `json:"feed_prices"`
+	Timestamp  uint64      `json:"timestamp"`
+}
+
+func (m MsgFeedMultiplePrices) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/oracle/FeedPrice.go b/indexer/txs/oracle/FeedPrice.go
new file mode 100644
index 00000000..9780927f
--- /dev/null
+++ b/indexer/txs/oracle/FeedPrice.go
@@ -0,0 +1,37 @@
+package oracle
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+// Defined in FeedMutiplePrices.go
+// type FeedPrice struct {
+// 	Asset  string `json:"asset"`
+// 	Price  string `json:"price"`
+// 	Source string `json:"source"`
+// }
+
+type MsgFeedPrice struct {
+	Provider    string `json:"provider"`
+	Asset       string `json:"asset"`
+	Price       string `json:"price"`
+	Source      string `json:"source"`
+	Timestamp   uint64 `json:"timestamp"`
+	BlockHeight uint64 `json:"block_height"`
+}
+
+func (m MsgFeedPrice) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/oracle/SetPriceFeeder.go b/indexer/txs/oracle/SetPriceFeeder.go
new file mode 100644
index 00000000..fe6e35e0
--- /dev/null
+++ b/indexer/txs/oracle/SetPriceFeeder.go
@@ -0,0 +1,26 @@
+package oracle
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgSetPriceFeeder struct {
+	Feeder   string `json:"feeder"`
+	IsActive bool   `json:"is_active"`
+}
+
+func (m MsgSetPriceFeeder) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/parameter/UpdateMaxVotingPower.go b/indexer/txs/parameter/UpdateMaxVotingPower.go
new file mode 100644
index 00000000..6ae1c7f6
--- /dev/null
+++ b/indexer/txs/parameter/UpdateMaxVotingPower.go
@@ -0,0 +1,25 @@
+package parameter
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUpdateMaxVotingPower struct {
+	Creator        string `json:"creator"`
+	MaxVotingPower string `json:"max_voting_power"`
+}
+
+func (m MsgUpdateMaxVotingPower) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/parameter/UpdateMinCommision.go b/indexer/txs/parameter/UpdateMinCommision.go
new file mode 100644
index 00000000..39922f47
--- /dev/null
+++ b/indexer/txs/parameter/UpdateMinCommision.go
@@ -0,0 +1,25 @@
+package parameter
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUpdateMinCommission struct {
+	Creator       string `json:"creator"`
+	MinCommission string `json:"min_commission"`
+}
+
+func (m MsgUpdateMinCommission) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/parameter/UpdateMinSelfDelegation.go b/indexer/txs/parameter/UpdateMinSelfDelegation.go
new file mode 100644
index 00000000..7633aa8a
--- /dev/null
+++ b/indexer/txs/parameter/UpdateMinSelfDelegation.go
@@ -0,0 +1,25 @@
+package parameter
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUpdateMinSelfDelegation struct {
+	Creator           string `json:"creator"`
+	MinSelfDelegation string `json:"min_self_delegation"`
+}
+
+func (m MsgUpdateMinSelfDelegation) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/parameter/UpdateRewardsDataLifetime.go b/indexer/txs/parameter/UpdateRewardsDataLifetime.go
new file mode 100644
index 00000000..cc311528
--- /dev/null
+++ b/indexer/txs/parameter/UpdateRewardsDataLifetime.go
@@ -0,0 +1,26 @@
+package parameter
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUpdateRewardsDataLifetime struct {
+	Creator             string `json:"creator"`
+	RewardsDataLifetime uint64 `json:"rewards_data_lifetime"`
+}
+
+func (m MsgUpdateRewardsDataLifetime) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/parameter/UpdateTotalBlocksPerYear.go b/indexer/txs/parameter/UpdateTotalBlocksPerYear.go
new file mode 100644
index 00000000..a202419e
--- /dev/null
+++ b/indexer/txs/parameter/UpdateTotalBlocksPerYear.go
@@ -0,0 +1,25 @@
+package parameter
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUpdateTotalBlocksPerYear struct {
+	Creator            string `json:"creator"`
+	TotalBlocksPerYear uint64 `json:"total_blocks_per_year"`
+}
+
+func (m MsgUpdateTotalBlocksPerYear) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/perpetual/Close.go b/indexer/txs/perpetual/Close.go
new file mode 100644
index 00000000..f633b91f
--- /dev/null
+++ b/indexer/txs/perpetual/Close.go
@@ -0,0 +1,43 @@
+package perpetual
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgClose struct {
+	Creator     string      `json:"creator"`
+	Id          uint64      `json:"id"`
+	Amount      string      `json:"amount"`
+	RepayAmount string      `json:"repay_amount"`
+	Position    string      `json:"position"`
+	Collateral  types.Token `json:"collateral"`
+	Custody     types.Token `json:"custody"`
+	Liabilities types.Token `json:"liabilities"`
+	// Profit/Loss tracking
+	InitialValue   string `json:"initial_value"`
+	FinalValue     string `json:"final_value"`
+	ProfitLoss     string `json:"profit_loss"`
+	ProfitLossPerc string `json:"profit_loss_perc"`
+	// Additional MTP info
+	CollateralAsset  string `json:"collateral_asset"`
+	TradingAsset     string `json:"trading_asset"`
+	LiabilitiesAsset string `json:"liabilities_asset"`
+	MtpHealth        string `json:"mtp_health"`
+	OpenPrice        string `json:"open_price"`
+}
+
+func (m MsgClose) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/perpetual/ClosePositions.go b/indexer/txs/perpetual/ClosePositions.go
new file mode 100644
index 00000000..d58efa1f
--- /dev/null
+++ b/indexer/txs/perpetual/ClosePositions.go
@@ -0,0 +1,33 @@
+package perpetual
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type PositionRequest struct {
+	Address string `json:"address"`
+	ID      uint64 `json:"id"`
+}
+
+type MsgClosePositions struct {
+	Creator    string            `json:"creator"`
+	Liquidate  []PositionRequest `json:"liquidate"`
+	StopLoss   []PositionRequest `json:"stop_loss"`
+	TakeProfit []PositionRequest `json:"take_profit"`
+}
+
+func (m MsgClosePositions) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/perpetual/Event.go b/indexer/txs/perpetual/Event.go
new file mode 100644
index 00000000..76940b72
--- /dev/null
+++ b/indexer/txs/perpetual/Event.go
@@ -0,0 +1,115 @@
+package perpetual
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type ClosePositionEvent struct {
+	Address        string      `json:"address"`
+	ID             uint64      `json:"id"`
+	Collateral     types.Token `json:"collateral"`
+	Custody        types.Token `json:"custody"`
+	Liabilities    types.Token `json:"liabilities"`
+	Health         string      `json:"health"`
+	InitialValue   string      `json:"initial_value"`
+	FinalValue     string      `json:"final_value"`
+	ProfitLoss     string      `json:"profit_loss"`
+	ProfitLossPerc string      `json:"profit_loss_perc"`
+	OpenPrice      string      `json:"open_price"`
+	Position       string      `json:"position"` // Long or Short
+}
+
+type TakeProfitEvent struct {
+	Address                string      `json:"address"`
+	ID                     uint64      `json:"id"`
+	Position               string      `json:"position"` // Long or Short
+	Collateral             types.Token `json:"collateral"`
+	Custody                types.Token `json:"custody"`
+	Liabilities            types.Token `json:"liabilities"`
+	TakeProfitPrice        string      `json:"take_profit_price"`
+	TakeProfitLiabilities  string      `json:"take_profit_liabilities"`
+	TakeProfitCustody      string      `json:"take_profit_custody"`
+	TakeProfitBorrowFactor string      `json:"take_profit_borrow_factor"`
+	OpenPrice              string      `json:"open_price"`
+	Health                 string      `json:"health"`
+	ProfitLoss             string      `json:"profit_loss"`
+	ProfitLossPerc         string      `json:"profit_loss_perc"`
+}
+
+type StopLossEvent struct {
+	Address        string      `json:"address"`
+	ID             uint64      `json:"id"`
+	Position       string      `json:"position"`
+	Collateral     types.Token `json:"collateral"`
+	Custody        types.Token `json:"custody"`
+	Liabilities    types.Token `json:"liabilities"`
+	StopLossPrice  string      `json:"stop_loss_price"`
+	OpenPrice      string      `json:"open_price"`
+	Health         string      `json:"health"`
+	ProfitLoss     string      `json:"profit_loss"`
+	ProfitLossPerc string      `json:"profit_loss_perc"`
+}
+
+type UpdateStopLossEvent struct {
+	ID       uint64 `json:"id"`
+	Address  string `json:"address"`
+	StopLoss string `json:"stop_loss"`
+}
+
+func (e ClosePositionEvent) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+func (e TakeProfitEvent) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+func (e StopLossEvent) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+func (e UpdateStopLossEvent) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing event: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/perpetual/Open.go b/indexer/txs/perpetual/Open.go
new file mode 100644
index 00000000..43b0b7de
--- /dev/null
+++ b/indexer/txs/perpetual/Open.go
@@ -0,0 +1,42 @@
+package perpetual
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type Position int32
+
+const (
+	Position_UNSPECIFIED Position = 0
+	Position_LONG        Position = 1
+	Position_SHORT       Position = 2
+)
+
+type MsgOpen struct {
+	Creator         string      `json:"creator"`
+	Position        Position    `json:"position"`
+	Leverage        string      `json:"leverage"`
+	TradingAsset    string      `json:"trading_asset"`
+	Collateral      types.Token `json:"collateral"`
+	TakeProfitPrice string      `json:"take_profit_price"`
+	StopLossPrice   string      `json:"stop_loss_price"`
+	PoolID          uint64      `json:"pool_id"`
+	PositionID      uint64      `json:"position_id"`
+	OpenPrice       string      `json:"open_price"`
+}
+
+func (m MsgOpen) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/perpetual/UpdateStoppLoss.go b/indexer/txs/perpetual/UpdateStoppLoss.go
new file mode 100644
index 00000000..7c340d2f
--- /dev/null
+++ b/indexer/txs/perpetual/UpdateStoppLoss.go
@@ -0,0 +1,27 @@
+package perpetual
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUpdateStopLoss struct {
+	Creator string `json:"creator"`
+	ID      uint64 `json:"id"`
+	Price   string `json:"price"`
+}
+
+func (m MsgUpdateStopLoss) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/perpetual/UpdateTakeProfitPrice.go b/indexer/txs/perpetual/UpdateTakeProfitPrice.go
new file mode 100644
index 00000000..8f847254
--- /dev/null
+++ b/indexer/txs/perpetual/UpdateTakeProfitPrice.go
@@ -0,0 +1,31 @@
+package perpetual
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUpdateTakeProfitPrice struct {
+	Creator      string      `json:"creator"`
+	ID           uint64      `json:"id"`
+	Price        string      `json:"price"`
+	Position     string      `json:"position"`
+	Collateral   types.Token `json:"collateral"`
+	OpenPrice    string      `json:"open_price"`
+	CurrentPrice string      `json:"current_price"`
+}
+
+func (m MsgUpdateTakeProfitPrice) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/stablestake/Bond.go b/indexer/txs/stablestake/Bond.go
new file mode 100644
index 00000000..85c5ae2b
--- /dev/null
+++ b/indexer/txs/stablestake/Bond.go
@@ -0,0 +1,30 @@
+package stablestake
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgBond struct {
+	Creator        string `json:"creator"`
+	Amount         string `json:"amount"`
+	DepositDenom   string `json:"deposit_denom"`
+	ShareAmount    string `json:"share_amount"`
+	ShareDenom     string `json:"share_denom"`
+	RedemptionRate string `json:"redemption_rate"`
+}
+
+func (m MsgBond) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/stablestake/Unbond.go b/indexer/txs/stablestake/Unbond.go
new file mode 100644
index 00000000..b7b40eba
--- /dev/null
+++ b/indexer/txs/stablestake/Unbond.go
@@ -0,0 +1,29 @@
+package stablestake
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUnbond struct {
+	Creator         string      `json:"creator"`
+	Amount          string      `json:"amount"`
+	ShareDenom      string      `json:"share_denom"`
+	RedemptionRate  string      `json:"redemption_rate"`
+	RedemptionToken types.Token `json:"redemption_token"`
+}
+
+func (m MsgUnbond) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/stablestake/UpdateParams.go b/indexer/txs/stablestake/UpdateParams.go
new file mode 100644
index 00000000..31f8185a
--- /dev/null
+++ b/indexer/txs/stablestake/UpdateParams.go
@@ -0,0 +1,40 @@
+package stablestake
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type Params struct {
+	DepositDenom         string `json:"deposit_denom"`
+	RedemptionRate       string `json:"redemption_rate"`
+	EpochLength          int64  `json:"epoch_length"`
+	InterestRate         string `json:"interest_rate"`
+	InterestRateMax      string `json:"interest_rate_max"`
+	InterestRateMin      string `json:"interest_rate_min"`
+	InterestRateIncrease string `json:"interest_rate_increase"`
+	InterestRateDecrease string `json:"interest_rate_decrease"`
+	HealthGainFactor     string `json:"health_gain_factor"`
+	TotalValue           string `json:"total_value"`
+	MaxLeverageRatio     string `json:"max_leverage_ratio"`
+}
+
+type MsgUpdateParams struct {
+	Authority string `json:"authority"`
+	Params    Params `json:"params"`
+}
+
+func (m MsgUpdateParams) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/tradeshield/CancelPerpetualOrder.go b/indexer/txs/tradeshield/CancelPerpetualOrder.go
new file mode 100644
index 00000000..4275dd95
--- /dev/null
+++ b/indexer/txs/tradeshield/CancelPerpetualOrder.go
@@ -0,0 +1,27 @@
+package tradeshield
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgCancelPerpetualOrder struct {
+	OwnerAddress string      `json:"owner_address"`
+	OrderID      uint64      `json:"order_id"`
+	Collateral   types.Token `json:"collateral"` // Include collateral information for tracking returned funds
+}
+
+func (m MsgCancelPerpetualOrder) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/tradeshield/CancelPerpetualOrders.go b/indexer/txs/tradeshield/CancelPerpetualOrders.go
new file mode 100644
index 00000000..ab966af0
--- /dev/null
+++ b/indexer/txs/tradeshield/CancelPerpetualOrders.go
@@ -0,0 +1,26 @@
+package tradeshield
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgCancelPerpetualOrders struct {
+	OwnerAddress string   `json:"owner_address"`
+	OrderIds     []uint64 `json:"order_ids"`
+}
+
+func (m MsgCancelPerpetualOrders) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/tradeshield/CreatePerpetualOrder.go b/indexer/txs/tradeshield/CreatePerpetualOrder.go
new file mode 100644
index 00000000..4aeb9bdc
--- /dev/null
+++ b/indexer/txs/tradeshield/CreatePerpetualOrder.go
@@ -0,0 +1,39 @@
+package tradeshield
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type TriggerPrice struct {
+	TradingAssetDenom string `json:"trading_asset_denom"`
+	Rate              string `json:"rate"`
+}
+
+type MsgCreatePerpetualOpenOrder struct {
+	OwnerAddress    string       `json:"owner_address"`
+	TriggerPrice    TriggerPrice `json:"trigger_price"`
+	Collateral      types.Token  `json:"collateral"`
+	TradingAsset    string       `json:"trading_asset"`
+	Position        int32        `json:"position"`
+	Leverage        string       `json:"leverage"`
+	TakeProfitPrice string       `json:"take_profit_price"`
+	StopLossPrice   string       `json:"stop_loss_price"`
+	PoolID          uint64       `json:"pool_id"`
+	OrderID         uint64       `json:"order_id"`
+}
+
+func (m MsgCreatePerpetualOpenOrder) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/tradeshield/Events.go b/indexer/txs/tradeshield/Events.go
new file mode 100644
index 00000000..6354ed4b
--- /dev/null
+++ b/indexer/txs/tradeshield/Events.go
@@ -0,0 +1,155 @@
+package tradeshield
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/txs/tradeshield/common"
+	"github.com/elys-network/elys/indexer/types"
+)
+
+// Unified Execution Event
+type ExecutionEvent struct {
+	common.BaseOrder
+	OrderType        common.OrderType     `json:"order_type"`
+	OrderTargetDenom string               `json:"order_target_denom,omitempty"`
+	Status           common.OrderStatus   `json:"status"`
+	Date             common.OrderDate     `json:"date,omitempty"`
+	MarketPrice      string               `json:"market_price,omitempty"`
+	TriggerPrice     *common.TriggerPrice `json:"trigger_price,omitempty"` // For stop-loss or perpetual
+	SwapOutput       *types.Token         `json:"swap_output,omitempty"`   // For limit or spot
+	ReceivedAmount   *types.Token         `json:"received_amount,omitempty"`
+}
+
+func (e ExecutionEvent) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing execution event: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+// LimitSellExecutionEvent represents the event for a limit sell execution
+type LimitSellExecutionEvent struct {
+	common.BaseOrder
+	OrderTargetDenom string             `json:"order_target_denom"`
+	MarketPrice      string             `json:"market_price"`
+	ExecutionStatus  common.OrderStatus `json:"execution_status"`
+}
+
+func (e LimitSellExecutionEvent) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing event: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+// SpotOrderExecution represents the event for a spot order execution
+type SpotOrderExecution struct {
+	common.BaseOrder
+	OrderType      common.OrderType `json:"order_type"`
+	Date           common.OrderDate `json:"date"`
+	ReceivedAmount types.Token      `json:"received_amount"`
+}
+
+func (e SpotOrderExecution) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing event: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+// LimitOrderExecutionEvent represents the event for a limit buy execution
+type LimitOrderExecutionEvent struct {
+	common.BaseOrder
+	OrderType        common.SpotOrder   `json:"order_type"`
+	OrderTargetDenom string             `json:"order_target_denom"`
+	Status           common.OrderStatus `json:"status"`
+	Date             common.OrderDate   `json:"date"`
+	SwapOutput       types.Token        `json:"swap_output"`
+	MarketPrice      string             `json:"market_price"`
+}
+
+func (e LimitOrderExecutionEvent) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing event: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+// StopLossExecutionEvent represents the event for a stop-loss execution
+type StopLossExecutionEvent struct {
+	common.BaseOrder
+	SwapOutput  types.Token      `json:"swap_output"`
+	MarketPrice string           `json:"market_price"`
+	TargetDenom string           `json:"target_denom"`
+	Date        common.OrderDate `json:"date"`
+}
+
+func (e StopLossExecutionEvent) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing event: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+type MarketOrderExecutionEvent struct {
+	common.BaseOrder
+	OrderType   common.OrderType `json:"order_type"`
+	Date        common.OrderDate `json:"date"`
+	TargetDenom string           `json:"target_denom"`
+	SwapOutput  types.Token      `json:"swap_output"`
+}
+
+func (e MarketOrderExecutionEvent) Process(database types.DatabaseManager, event types.BaseEvent) (types.Response, error) {
+	mergedData := types.GenericEvent{
+		BaseEvent: event,
+		Data:      e,
+	}
+
+	err := database.ProcessNewEvent(mergedData, event.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing market order execution event: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+// ExecutionLog represents the log for batch execution processing
+type ExecutionLog struct {
+	OrderID uint64 `json:"order_id"`
+	Error   string `json:"error,omitempty"`
+}
diff --git a/indexer/txs/tradeshield/ExecuteOrders.go b/indexer/txs/tradeshield/ExecuteOrders.go
new file mode 100644
index 00000000..de28c1ed
--- /dev/null
+++ b/indexer/txs/tradeshield/ExecuteOrders.go
@@ -0,0 +1,34 @@
+package tradeshield
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type OrderExecutionLog struct {
+	OrderID uint64 `json:"order_id"`
+	Error   string `json:"error,omitempty"`
+}
+
+type MsgExecuteOrders struct {
+	Creator           string              `json:"creator"`
+	SpotOrderIds      []uint64            `json:"spot_order_ids"`
+	PerpetualOrderIds []uint64            `json:"perpetual_order_ids"`
+	SpotLogs          []OrderExecutionLog `json:"spot_logs"`
+	PerpetualLogs     []OrderExecutionLog `json:"perpetual_logs"`
+}
+
+func (m MsgExecuteOrders) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/tradeshield/SpotOrders.go b/indexer/txs/tradeshield/SpotOrders.go
new file mode 100644
index 00000000..178f55b4
--- /dev/null
+++ b/indexer/txs/tradeshield/SpotOrders.go
@@ -0,0 +1,90 @@
+package tradeshield
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/txs/tradeshield/common"
+	"github.com/elys-network/elys/indexer/types"
+	"google.golang.org/genproto/googleapis/type/decimal"
+)
+
+// Update MsgCreateSpotOrder to use BaseOrder
+type MsgCreateSpotOrder struct {
+	BaseOrder        common.BaseOrder `json:"base_order"`
+	OrderType        common.OrderType `json:"order_type"`
+	OrderTargetDenom string           `json:"order_target_denom"`
+	StopPrice        *decimal.Decimal `json:"stop_price,omitempty"`
+}
+
+type MsgUpdateSpotOrder struct {
+	OrderID      uint64            `json:"order_id"`
+	OwnerAddress string            `json:"owner_address"`
+	OrderPrice   common.OrderPrice `json:"order_price"`
+	StopPrice    *decimal.Decimal  `json:"stop_price,omitempty"`
+}
+
+type MsgCancelSpotOrder struct {
+	OwnerAddress string `json:"owner_address"`
+	OrderId      uint64 `json:"order_id"`
+}
+
+type MsgCancelSpotOrders struct {
+	Creator      string   `json:"creator"`
+	SpotOrderIds []uint64 `json:"spot_order_ids"`
+}
+
+func (m MsgCreateSpotOrder) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+func (m MsgUpdateSpotOrder) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+func (m MsgCancelSpotOrder) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
+
+func (m MsgCancelSpotOrders) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/tradeshield/UpdateParams.go b/indexer/txs/tradeshield/UpdateParams.go
new file mode 100644
index 00000000..c2edf6ce
--- /dev/null
+++ b/indexer/txs/tradeshield/UpdateParams.go
@@ -0,0 +1,27 @@
+package tradeshield
+
+import (
+	"fmt"
+
+	common "github.com/elys-network/elys/indexer/txs/tradeshield/common"
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUpdateParams struct {
+	Authority string        `json:"authority"`
+	Params    common.Params `json:"params"`
+}
+
+func (m MsgUpdateParams) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/tradeshield/UpdatePerpetualOrder.go b/indexer/txs/tradeshield/UpdatePerpetualOrder.go
new file mode 100644
index 00000000..031c7c02
--- /dev/null
+++ b/indexer/txs/tradeshield/UpdatePerpetualOrder.go
@@ -0,0 +1,27 @@
+package tradeshield
+
+import (
+	"fmt"
+
+	"github.com/elys-network/elys/indexer/types"
+)
+
+type MsgUpdatePerpetualOrder struct {
+	OwnerAddress string       `json:"owner_address"`
+	OrderID      uint64       `json:"order_id"`
+	TriggerPrice TriggerPrice `json:"trigger_price"`
+}
+
+func (m MsgUpdatePerpetualOrder) Process(database types.DatabaseManager, transaction types.BaseTransaction) (types.Response, error) {
+	mergedData := types.GenericTransaction{
+		BaseTransaction: transaction,
+		Data:            m,
+	}
+
+	err := database.ProcessNewTx(mergedData, transaction.Author)
+	if err != nil {
+		return types.Response{}, fmt.Errorf("error processing transaction: %w", err)
+	}
+
+	return types.Response{}, nil
+}
diff --git a/indexer/txs/tradeshield/common/events.go b/indexer/txs/tradeshield/common/events.go
new file mode 100644
index 00000000..d034f2fe
--- /dev/null
+++ b/indexer/txs/tradeshield/common/events.go
@@ -0,0 +1,13 @@
+package common
+
+type BaseEvent struct {
+	EventID   uint64 `json:"event_id"`
+	EventName string `json:"event_name"`
+	EventTime uint64 `json:"event_time"`
+}
+
+type BaseTransaction struct {
+	TransactionID uint64 `json:"transaction_id"`
+	Author        string `json:"author"`
+	Timestamp     uint64 `json:"timestamp"`
+}
diff --git a/indexer/txs/tradeshield/common/order_types.go b/indexer/txs/tradeshield/common/order_types.go
new file mode 100644
index 00000000..78e7062e
--- /dev/null
+++ b/indexer/txs/tradeshield/common/order_types.go
@@ -0,0 +1,48 @@
+// common/order_types.go
+
+package common
+
+import "github.com/elys-network/elys/indexer/types"
+
+type OrderPrice struct {
+	BaseDenom  string `json:"base_denom"`
+	QuoteDenom string `json:"quote_denom"`
+	Rate       string `json:"rate"`
+}
+
+type OrderDate struct {
+	Height    uint64 `json:"height"`
+	Timestamp uint64 `json:"timestamp"`
+}
+
+type BaseOrder struct {
+	OrderID      uint64      `json:"order_id"`
+	OwnerAddress string      `json:"owner_address"`
+	OrderPrice   OrderPrice  `json:"order_price"`
+	OrderAmount  types.Token `json:"order_amount"`
+}
+
+type OrderType int32
+
+const (
+	OrderType_UNKNOWN   OrderType = 0
+	OrderType_SPOT      OrderType = 1
+	OrderType_PERPETUAL OrderType = 2
+)
+
+type SpotOrder int32
+
+const (
+	SpotOrder_UNKNOWN    SpotOrder = 0
+	SpotOrder_LIMIT_BUY  SpotOrder = 1
+	SpotOrder_LIMIT_SELL SpotOrder = 2
+	SpotOrder_MARKET_BUY SpotOrder = 3
+)
+
+type OrderStatus int32
+
+const (
+	Status_PENDING  OrderStatus = 0
+	Status_EXECUTED OrderStatus = 1
+	Status_CANCELED OrderStatus = 2
+)
diff --git a/indexer/txs/tradeshield/common/params.go b/indexer/txs/tradeshield/common/params.go
new file mode 100644
index 00000000..d4c69e3e
--- /dev/null
+++ b/indexer/txs/tradeshield/common/params.go
@@ -0,0 +1,15 @@
+package common
+
+type Params struct {
+	MarketOrderEnabled   bool   `json:"market_order_enabled"`
+	StakeEnabled         bool   `json:"stake_enabled"`
+	ProcessOrdersEnabled bool   `json:"process_orders_enabled"`
+	SwapEnabled          bool   `json:"swap_enabled"`
+	PerpetualEnabled     bool   `json:"perpetual_enabled"`
+	RewardEnabled        bool   `json:"reward_enabled"`
+	LeverageEnabled      bool   `json:"leverage_enabled"`
+	LimitProcessOrder    uint64 `json:"limit_process_order"`
+	RewardPercentage     string `json:"reward_percentage"`
+	MarginError          string `json:"margin_error"`
+	MinimumDeposit       string `json:"minimum_deposit"`
+}
diff --git a/indexer/txs/tradeshield/common/trigger_price.go b/indexer/txs/tradeshield/common/trigger_price.go
new file mode 100644
index 00000000..ee4cfd14
--- /dev/null
+++ b/indexer/txs/tradeshield/common/trigger_price.go
@@ -0,0 +1,6 @@
+package common
+
+type TriggerPrice struct {
+	TradingAssetDenom string `json:"trading_asset_denom"`
+	Rate              string `json:"rate"`
+}
diff --git a/indexer/types/types.go b/indexer/types/types.go
new file mode 100644
index 00000000..d767e17e
--- /dev/null
+++ b/indexer/types/types.go
@@ -0,0 +1,62 @@
+package types
+
+import (
+	"time"
+)
+
+type FeeDetail struct {
+	Amount string `json:"amount"`
+	Denom  string `json:"denom"`
+}
+
+type Token struct {
+	Amount string `json:"amount"`
+	Denom  string `json:"denom"`
+}
+
+type BaseTransaction struct {
+	BlockTime         time.Time   `json:"block_time"`
+	Author            string      `json:"author"`
+	IncludedAddresses []string    `json:"included_addresses"`
+	BlockHeight       int64       `json:"block_height"`
+	TxHash            string      `json:"tx_hash"`
+	TxType            string      `json:"tx_type"`
+	Fees              []FeeDetail `json:"fees"`
+	GasLimit          string      `json:"gas_limit"`
+	GasUsed           string      `json:"gas_used"`
+	Memo              string      `json:"memo"`
+	Status            string      `json:"status"`
+}
+
+type BaseEvent struct {
+	BlockTime         time.Time `json:"block_time"`
+	Author            string    `json:"author"`
+	IncludedAddresses []string  `json:"included_addresses"`
+	BlockHeight       int64     `json:"block_height"`
+	EventType         string    `json:"event_type"`
+}
+
+type GenericTransaction struct {
+	BaseTransaction BaseTransaction `json:"base_transaction"`
+	Data            interface{}     `json:"data"`
+}
+
+type GenericEvent struct {
+	BaseEvent BaseEvent   `json:"base_event"`
+	Data      interface{} `json:"data"`
+}
+
+type Response struct{}
+
+type DatabaseManager interface {
+	ProcessNewTx(GenericTransaction, string) error
+	ProcessNewEvent(GenericEvent, string) error
+}
+
+type Processor interface {
+	Process(DatabaseManager, BaseTransaction) (Response, error)
+}
+
+type EventProcessor interface {
+	Process(DatabaseManager, BaseEvent) (Response, error)
+}
diff --git a/lmdb-data/data.mdb b/lmdb-data/data.mdb
new file mode 100644
index 00000000..c212d05d
Binary files /dev/null and b/lmdb-data/data.mdb differ
diff --git a/lmdb-data/lock.mdb b/lmdb-data/lock.mdb
new file mode 100644
index 00000000..706a8918
Binary files /dev/null and b/lmdb-data/lock.mdb differ
diff --git a/proto/elys/parameter/params.proto b/proto/elys/parameter/params.proto
index c2f065c6..bf00018a 100644
--- a/proto/elys/parameter/params.proto
+++ b/proto/elys/parameter/params.proto
@@ -22,9 +22,8 @@ message LegacyParams {
     (gogoproto.customtype) = "cosmossdk.io/math.Int",
     (gogoproto.nullable) = false
   ];
-  string broker_address = 4;
-  int64 total_blocks_per_year = 5;
-  int64 rewards_data_lifetime = 6; // default 1 day = 86400
+  uint64 total_blocks_per_year = 4;
+  uint64 rewards_data_lifetime = 5; // default 1 day = 86400
 }
 
 // Params defines the parameters for the module.
diff --git a/scripts/examples/transferhook/mars.yml b/scripts/examples/transferhook/mars.yml
index b70bddc9..bfedcbbb 100644
--- a/scripts/examples/transferhook/mars.yml
+++ b/scripts/examples/transferhook/mars.yml
@@ -377,7 +377,6 @@ genesis:
         min_commission_rate: "0.05"
         max_voting_power: "0.66"
         min_self_delegation: "1"
-        broker_address: ""
     perpetual:
       params:
         leverage_max: "10"
diff --git a/scripts/test_scripts/estaking/tx.sh b/scripts/test_scripts/estaking/tx.sh
index fbda20af..7b3b09fa 100755
--- a/scripts/test_scripts/estaking/tx.sh
+++ b/scripts/test_scripts/estaking/tx.sh
@@ -5,7 +5,6 @@ set -e
 BINARY="elysd"
 NODE="tcp://localhost:26657"
 MY_VALIDATOR_ADDRESS=$($BINARY keys show my_validator -a --keyring-backend test)
-BROKER_ADDRESS=$($BINARY keys show test1 -a --keyring-backend test)
 MY_TEST2_ADDRESS=$($BINARY keys show test2 -a --keyring-backend test)
 current_dir=$(pwd)
 
diff --git a/scripts/test_scripts/masterchef/tx.sh b/scripts/test_scripts/masterchef/tx.sh
index 8fe5cbe7..e4b0817b 100755
--- a/scripts/test_scripts/masterchef/tx.sh
+++ b/scripts/test_scripts/masterchef/tx.sh
@@ -5,7 +5,6 @@ set -e
 BINARY="elysd"
 NODE="tcp://localhost:26657"
 MY_VALIDATOR_ADDRESS=$($BINARY keys show my_validator -a --keyring-backend test)
-BROKER_ADDRESS=$($BINARY keys show test1 -a --keyring-backend test)
 MY_TEST2_ADDRESS=$($BINARY keys show test2 -a --keyring-backend test)
 MY_TEST3_ADDRESS=$($BINARY keys show test3 -a --keyring-backend test)
 MY_TEST4_ADDRESS=$($BINARY keys show test4 -a --keyring-backend test)
diff --git a/scripts/test_scripts/oracle/tx.sh b/scripts/test_scripts/oracle/tx.sh
index b8315d52..e21501ef 100755
--- a/scripts/test_scripts/oracle/tx.sh
+++ b/scripts/test_scripts/oracle/tx.sh
@@ -5,7 +5,6 @@
 BINARY="elysd"
 NODE="tcp://localhost:26657"
 MY_VALIDATOR_ADDRESS=$($BINARY keys show my_validator -a --keyring-backend test)
-BROKER_ADDRESS=$($BINARY keys show test1 -a --keyring-backend test)
 MY_TEST2_ADDRESS=$($BINARY keys show test2 -a --keyring-backend test)
 current_dir=$(pwd)
 
diff --git a/scripts/test_scripts/parameter/tx.sh b/scripts/test_scripts/parameter/tx.sh
index b8af3a48..6c745d4e 100755
--- a/scripts/test_scripts/parameter/tx.sh
+++ b/scripts/test_scripts/parameter/tx.sh
@@ -5,7 +5,6 @@ set -e
 BINARY="elysd"
 NODE="tcp://localhost:26657"
 MY_VALIDATOR_ADDRESS=$($BINARY keys show my_validator -a --keyring-backend test)
-BROKER_ADDRESS=$($BINARY keys show test1 -a --keyring-backend test)
 MY_TEST2_ADDRESS=$($BINARY keys show test2 -a --keyring-backend test)
 current_dir=$(pwd)
 
@@ -37,13 +36,6 @@ sh ${current_dir}/scripts/test_tx_query/parameter/query.sh
 
 # sleep 10s
 
-# echo "Tx: Create and vote on gov Proposal for MsgUpdateBrokerAddress"
-# $BINARY tx gov submit-proposal ${current_dir}/scripts/test_tx_query/parameter/update_broker_address.json --from=$MY_VALIDATOR_ADDRESS --keyring-backend=test --chain-id=elys --gas=1000000
-# query_tx "create gov proposal"
-# sh ${current_dir}/scripts/test_tx_query/vote.sh
-
-# sleep 10s
-
 # echo "Tx: Create and vote on gov Proposal for MsgUpdateTotalBlocksPerYear"
 # $BINARY tx gov submit-proposal ${current_dir}/scripts/test_tx_query/parameter/update_total_block_per_year.json --from=$MY_VALIDATOR_ADDRESS --keyring-backend=test --chain-id=elys --gas=1000000
 # query_tx "create gov proposal"
diff --git a/scripts/test_scripts/parameter/update_broker_address.json b/scripts/test_scripts/parameter/update_broker_address.json
deleted file mode 100644
index 52c0d5d7..00000000
--- a/scripts/test_scripts/parameter/update_broker_address.json
+++ /dev/null
@@ -1,14 +0,0 @@
-{
-    "messages": [
-     {
-      "@type": "/elys.parameter.MsgUpdateBrokerAddress",
-      "creator": "elys10d07y265gmmuvt4z0w9aw880jnsr700j6z2zm3",
-      "broker_address": "elys1679c7fc2sxedkjwfu24qmdax9e86fx6tdqmlj5"
-     }
-    ],
-    "metadata": "ipfs://CID",
-   
-    "deposit": "10000000stake",
-    "title": "MsgUpdateBrokerAddress",
-    "summary": "asdasd"
-}
\ No newline at end of file
diff --git a/scripts/test_scripts/perpetual/tx.sh b/scripts/test_scripts/perpetual/tx.sh
index 0f6d46a5..06e5b207 100755
--- a/scripts/test_scripts/perpetual/tx.sh
+++ b/scripts/test_scripts/perpetual/tx.sh
@@ -5,7 +5,6 @@ set -e
 BINARY="elysd"
 NODE="tcp://localhost:26657"
 MY_VALIDATOR_ADDRESS=$($BINARY keys show my_validator -a --keyring-backend test)
-BROKER_ADDRESS=$($BINARY keys show test1 -a --keyring-backend test)
 MY_TEST2_ADDRESS=$($BINARY keys show test2 -a --keyring-backend test)
 MY_TEST3_ADDRESS=$($BINARY keys show test3 -a --keyring-backend test)
 MY_TEST4_ADDRESS=$($BINARY keys show test4 -a --keyring-backend test)
@@ -65,19 +64,6 @@ query_tx "perpetual open long"
 echo "Querying position"
 $BINARY q perpetual get-positions-for-address $MY_TEST5_ADDRESS
 
-# echo "Open long position using broker"
-# $BINARY tx perpetual broker-open long 5 5 uatom 100000000uusdc $MY_TEST2_ADDRESS --take-profit 45 --from=$BROKER_ADDRESS --keyring-backend=test --chain-id=elys --gas=1000000
-# query_tx "perpetual broker-open long"
-# echo "Querying position"
-# $BINARY q perpetual get-positions-for-address $MY_TEST2_ADDRESS
-
-# echo "Close position using broker"
-# $BINARY tx perpetual broker-close 4 49934694 $MY_TEST2_ADDRESS --from=$BROKER_ADDRESS --keyring-backend=test --chain-id=elys --gas=1000000
-# query_tx "perpetual broker-close"
-# echo "Querying position"
-# $BINARY q perpetual get-positions-for-address $MY_TEST2_ADDRESS
-
-
 # sleep 6s
 
 $BINARY tx perpetual open short 5 3 uatom 10000000uusdc --take-profit 1 --stop-loss 10.2 --from=$MY_VALIDATOR_ADDRESS --keyring-backend=test --chain-id=elys --gas=1000000
diff --git a/scripts/test_scripts/perpetual/update_broker_address_proposal_parameter.json b/scripts/test_scripts/perpetual/update_broker_address_proposal_parameter.json
deleted file mode 100644
index 73e76159..00000000
--- a/scripts/test_scripts/perpetual/update_broker_address_proposal_parameter.json
+++ /dev/null
@@ -1,14 +0,0 @@
-{
-
-    "messages": [
-        {
-         "@type": "/elys.parameter.MsgUpdateBrokerAddress",
-         "creator": "elys10d07y265gmmuvt4z0w9aw880jnsr700j6z2zm3",
-         "broker_address": "elys1679c7fc2sxedkjwfu24qmdax9e86fx6tdqmlj5"
-        }
-       ],
-       "metadata": "ipfs://CID",
-       "deposit": "10000000stake",
-       "title": "update broker address",
-       "summary": "asdasd"
-      }
\ No newline at end of file
diff --git a/scripts/test_scripts/stablestake/tx.sh b/scripts/test_scripts/stablestake/tx.sh
index 82893941..80cb6949 100755
--- a/scripts/test_scripts/stablestake/tx.sh
+++ b/scripts/test_scripts/stablestake/tx.sh
@@ -5,7 +5,6 @@
 BINARY="elysd"
 NODE="tcp://localhost:26657"
 MY_VALIDATOR_ADDRESS=$($BINARY keys show my_validator -a --keyring-backend test)
-BROKER_ADDRESS=$($BINARY keys show test1 -a --keyring-backend test)
 MY_TEST1_ADDRESS=$($BINARY keys show test1 -a --keyring-backend test)
 MY_TEST2_ADDRESS=$($BINARY keys show test2 -a --keyring-backend test)
 MY_TEST3_ADDRESS=$($BINARY keys show test3 -a --keyring-backend test)
diff --git a/scripts/test_scripts/tier/tx.sh b/scripts/test_scripts/tier/tx.sh
index ac6497d6..1ed8000e 100755
--- a/scripts/test_scripts/tier/tx.sh
+++ b/scripts/test_scripts/tier/tx.sh
@@ -5,7 +5,6 @@ set -e
 BINARY="elysd"
 NODE="tcp://localhost:26657"
 MY_VALIDATOR_ADDRESS=$($BINARY keys show my_validator -a --keyring-backend test)
-BROKER_ADDRESS=$($BINARY keys show test1 -a --keyring-backend test)
 MY_TEST1_ADDRESS=$($BINARY keys show test1 -a --keyring-backend test)
 MY_TEST2_ADDRESS=$($BINARY keys show test2 -a --keyring-backend test)
 MY_TEST3_ADDRESS=$($BINARY keys show test3 -a --keyring-backend test)
diff --git a/scripts/test_scripts/tradeshield/tx.sh b/scripts/test_scripts/tradeshield/tx.sh
index 5c44f7f8..c82fa2c6 100755
--- a/scripts/test_scripts/tradeshield/tx.sh
+++ b/scripts/test_scripts/tradeshield/tx.sh
@@ -5,7 +5,6 @@ set -e
 BINARY="elysd"
 NODE="tcp://localhost:26657"
 MY_VALIDATOR_ADDRESS=$($BINARY keys show my_validator -a --keyring-backend test)
-BROKER_ADDRESS=$($BINARY keys show test1 -a --keyring-backend test)
 MY_TEST2_ADDRESS=$($BINARY keys show test2 -a --keyring-backend test)
 current_dir=$(pwd)
 
diff --git a/setup.md b/setup.md
new file mode 100644
index 00000000..e69de29b
diff --git a/x/accountedpool/types/query.pb.go b/x/accountedpool/types/query.pb.go
index 80e07df7..8baceeff 100644
--- a/x/accountedpool/types/query.pb.go
+++ b/x/accountedpool/types/query.pb.go
@@ -356,6 +356,7 @@ func _Query_AccountedPoolAll_Handler(srv interface{}, ctx context.Context, dec f
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.accountedpool.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/accountedpool/types/tx.pb.go b/x/accountedpool/types/tx.pb.go
index 15495384..41a8b321 100644
--- a/x/accountedpool/types/tx.pb.go
+++ b/x/accountedpool/types/tx.pb.go
@@ -78,6 +78,7 @@ func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
 	s.RegisterService(&_Msg_serviceDesc, srv)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.accountedpool.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/amm/keeper/msg_server_create_pool.go b/x/amm/keeper/msg_server_create_pool.go
index 15b1ff1a..1b5584ad 100644
--- a/x/amm/keeper/msg_server_create_pool.go
+++ b/x/amm/keeper/msg_server_create_pool.go
@@ -6,19 +6,24 @@ import (
 	"strconv"
 	"strings"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerAmmTypes "github.com/elys-network/elys/indexer/txs/amm"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/amm/types"
 	ptypes "github.com/elys-network/elys/x/parameter/types"
 )
 
-// CreatePool attempts to create a pool returning the newly created pool ID or an error upon failure.
-// The pool creation fee is used to fund the community pool.
-// It will create a dedicated module account for the pool and sends the initial liquidity to the created module account.
 func (k msgServer) CreatePool(goCtx context.Context, msg *types.MsgCreatePool) (*types.MsgCreatePoolResponse, error) {
 	ctx := sdk.UnwrapSDKContext(goCtx)
 
-	// Pay pool creation fee
 	params := k.GetParams(ctx)
 
 	if !params.IsCreatorAllowed(msg.Sender) {
@@ -55,6 +60,31 @@ func (k msgServer) CreatePool(goCtx context.Context, msg *types.MsgCreatePool) (
 		return &types.MsgCreatePoolResponse{}, err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	poolAssets := make([]indexerAmmTypes.PoolAsset, len(msg.PoolAssets))
+	for i, asset := range msg.PoolAssets {
+		poolAssets[i] = indexerAmmTypes.PoolAsset{
+			Token: indexerTypes.Token{
+				Amount: asset.Token.Amount.String(),
+				Denom:  asset.Token.Denom,
+			},
+		}
+	}
+
+	indexer.QueueTransaction(ctx, indexerAmmTypes.MsgCreatePool{
+		Sender: msg.Sender,
+		PoolParams: indexerAmmTypes.PoolParams{
+			SwapFee:   msg.PoolParams.SwapFee.String(),
+			UseOracle: msg.PoolParams.UseOracle,
+			FeeDenom:  msg.PoolParams.FeeDenom,
+		},
+		PoolAssets: poolAssets,
+		PoolID:     poolId,
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	ctx.EventManager().EmitEvents(sdk.Events{
 		sdk.NewEvent(
 			types.TypeEvtPoolCreated,
diff --git a/x/amm/keeper/msg_server_exit_pool.go b/x/amm/keeper/msg_server_exit_pool.go
index b4ad8eaf..b0039fc7 100644
--- a/x/amm/keeper/msg_server_exit_pool.go
+++ b/x/amm/keeper/msg_server_exit_pool.go
@@ -3,6 +3,15 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerAmmTypes "github.com/elys-network/elys/indexer/txs/amm"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/amm/types"
 )
@@ -27,6 +36,35 @@ func (k msgServer) ExitPool(goCtx context.Context, msg *types.MsgExitPool) (*typ
 		),
 	})
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	minAmountsOut := make([]indexerTypes.Token, len(msg.MinAmountsOut))
+	for i, coin := range msg.MinAmountsOut {
+		minAmountsOut[i] = indexerTypes.Token{
+			Amount: coin.Amount.String(),
+			Denom:  coin.Denom,
+		}
+	}
+
+	tokenOut := make([]indexerTypes.Token, len(exitCoins))
+	for i, coin := range exitCoins {
+		tokenOut[i] = indexerTypes.Token{
+			Amount: coin.Amount.String(),
+			Denom:  coin.Denom,
+		}
+	}
+
+	indexer.QueueTransaction(ctx, indexerAmmTypes.MsgExitPool{
+		Sender:        msg.Sender,
+		PoolID:        msg.PoolId,
+		MinAmountsOut: minAmountsOut,
+		ShareAmountIn: msg.ShareAmountIn.String(),
+		TokenOutDenom: msg.TokenOutDenom,
+		TokenOut:      tokenOut,
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgExitPoolResponse{
 		TokenOut: exitCoins,
 	}, nil
diff --git a/x/amm/keeper/msg_server_feed_multiple_external_liquidity.go b/x/amm/keeper/msg_server_feed_multiple_external_liquidity.go
index 33b9840e..f47c2043 100644
--- a/x/amm/keeper/msg_server_feed_multiple_external_liquidity.go
+++ b/x/amm/keeper/msg_server_feed_multiple_external_liquidity.go
@@ -5,6 +5,14 @@ import (
 
 	sdkmath "cosmossdk.io/math"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerAmmTypes "github.com/elys-network/elys/indexer/txs/amm"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/amm/types"
 	assetprofiletypes "github.com/elys-network/elys/x/assetprofile/types"
@@ -71,6 +79,31 @@ func (k msgServer) FeedMultipleExternalLiquidity(goCtx context.Context, msg *typ
 		return nil, oracletypes.ErrPriceFeederNotActive
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexerLiquidity := make([]indexerAmmTypes.ExternalLiquidity, len(msg.Liquidity))
+	for i, liq := range msg.Liquidity {
+		amountDepthInfo := make([]indexerAmmTypes.AssetAmountDepth, len(liq.AmountDepthInfo))
+		for j, info := range liq.AmountDepthInfo {
+			amountDepthInfo[j] = indexerAmmTypes.AssetAmountDepth{
+				Asset:  info.Asset,
+				Amount: info.Amount.String(),
+				Depth:  info.Depth.String(),
+			}
+		}
+		indexerLiquidity[i] = indexerAmmTypes.ExternalLiquidity{
+			PoolID:          liq.PoolId,
+			AmountDepthInfo: amountDepthInfo,
+		}
+	}
+
+	indexer.QueueTransaction(ctx, indexerAmmTypes.MsgFeedMultipleExternalLiquidity{
+		Sender:    msg.Sender,
+		Liquidity: indexerLiquidity,
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	for _, el := range msg.Liquidity {
 		pool, found := k.GetPool(ctx, el.PoolId)
 		if !found {
diff --git a/x/amm/keeper/msg_server_join_pool.go b/x/amm/keeper/msg_server_join_pool.go
index bb0077f1..c07c04eb 100644
--- a/x/amm/keeper/msg_server_join_pool.go
+++ b/x/amm/keeper/msg_server_join_pool.go
@@ -3,22 +3,19 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerAmmTypes "github.com/elys-network/elys/indexer/txs/amm"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/amm/types"
 )
 
-// JoinPool routes `JoinPoolNoSwap` where we do an abstract calculation on needed lp liquidity coins to get the designated
-// amount of shares for the pool. (This is done by taking the number of shares we want and then using the total number of shares
-// to get the ratio of the pool it accounts for. Using this ratio, we iterate over all pool assets to get the number of tokens we need
-// to get the specified number of shares).
-// Using the number of tokens needed to actually join the pool, we do a basic sanity check on whether the token does not exceed
-// `TokenInMaxs`. Then we hit the actual implementation of `JoinPool` defined by each pool model.
-// `JoinPool` takes in the tokensIn calculated above as the parameter rather than using the number of shares provided in the msg.
-// This can result in negotiable difference between the number of shares provided within the msg
-// and the actual number of share amount resulted from joining pool.
-// Internal logic flow for each pool model is as follows:
-// Balancer: TokensInMaxs provided as the argument must either contain no tokens or containing all assets in the pool.
-// * For the case of a not containing tokens, we simply perform calculation of sharesOut and needed amount of tokens for joining the pool
 func (k msgServer) JoinPool(goCtx context.Context, msg *types.MsgJoinPool) (*types.MsgJoinPoolResponse, error) {
 	ctx := sdk.UnwrapSDKContext(goCtx)
 
@@ -40,6 +37,34 @@ func (k msgServer) JoinPool(goCtx context.Context, msg *types.MsgJoinPool) (*typ
 		),
 	})
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	maxAmountsIn := make([]indexerTypes.Token, len(msg.MaxAmountsIn))
+	for i, coin := range msg.MaxAmountsIn {
+		maxAmountsIn[i] = indexerTypes.Token{
+			Amount: coin.Amount.String(),
+			Denom:  coin.Denom,
+		}
+	}
+
+	tokenIn := make([]indexerTypes.Token, len(neededLp))
+	for i, coin := range neededLp {
+		tokenIn[i] = indexerTypes.Token{
+			Amount: coin.Amount.String(),
+			Denom:  coin.Denom,
+		}
+	}
+
+	indexer.QueueTransaction(ctx, indexerAmmTypes.MsgJoinPool{
+		Sender:         msg.Sender,
+		PoolID:         msg.PoolId,
+		MaxAmountsIn:   maxAmountsIn,
+		ShareAmountOut: sharesOut.String(),
+		TokenIn:        tokenIn,
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgJoinPoolResponse{
 		ShareAmountOut: sharesOut,
 		TokenIn:        neededLp,
diff --git a/x/amm/keeper/msg_server_swap_by_denom.go b/x/amm/keeper/msg_server_swap_by_denom.go
index aa979614..73c7f385 100644
--- a/x/amm/keeper/msg_server_swap_by_denom.go
+++ b/x/amm/keeper/msg_server_swap_by_denom.go
@@ -5,6 +5,15 @@ import (
 
 	sdkmath "cosmossdk.io/math"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerAmmTypes "github.com/elys-network/elys/indexer/txs/amm"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/amm/types"
@@ -13,9 +22,72 @@ import (
 )
 
 func (k msgServer) SwapByDenom(goCtx context.Context, msg *types.MsgSwapByDenom) (*types.MsgSwapByDenomResponse, error) {
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// ! this entire function was changed a bit
+	// ! Originally it was simply return k.Keeper.SwapByDenom(ctx, msg)
+	// ! But SwapByDenom is called a lot in mutiple instances not from TXs, so to maintain simplicity of being able to indentify exact swap outputs from a tx I did it this way
 	ctx := sdk.UnwrapSDKContext(goCtx)
 
-	return k.Keeper.SwapByDenom(ctx, msg)
+	response, err := k.Keeper.SwapByDenom(ctx, msg)
+	if err != nil {
+		return nil, err
+	}
+
+	var indexerInRoute []indexerAmmTypes.SwapAmountInRoute
+	if response.InRoute != nil {
+		indexerInRoute = make([]indexerAmmTypes.SwapAmountInRoute, len(response.InRoute))
+		for i, route := range response.InRoute {
+			indexerInRoute[i] = indexerAmmTypes.SwapAmountInRoute{
+				PoolID:        route.PoolId,
+				TokenOutDenom: route.TokenOutDenom,
+			}
+		}
+	}
+
+	// Convert outRoute to indexer format
+	var indexerOutRoute []indexerAmmTypes.SwapAmountOutRoute
+	if response.OutRoute != nil {
+		indexerOutRoute = make([]indexerAmmTypes.SwapAmountOutRoute, len(response.OutRoute))
+		for i, route := range response.OutRoute {
+			indexerOutRoute[i] = indexerAmmTypes.SwapAmountOutRoute{
+				PoolID:       route.PoolId,
+				TokenInDenom: route.TokenInDenom,
+			}
+		}
+	}
+
+	indexer.QueueTransaction(ctx, indexerAmmTypes.MsgSwapByDenom{
+		Sender: msg.Sender,
+		Amount: indexerTypes.Token{
+			Amount: msg.Amount.Amount.String(),
+			Denom:  msg.Amount.Denom,
+		},
+		MinAmount: indexerTypes.Token{
+			Amount: msg.MinAmount.Amount.String(),
+			Denom:  msg.MinAmount.Denom,
+		},
+		MaxAmount: indexerTypes.Token{
+			Amount: msg.MaxAmount.Amount.String(),
+			Denom:  msg.MaxAmount.Denom,
+		},
+		DenomIn:   msg.DenomIn,
+		DenomOut:  msg.DenomOut,
+		Recipient: msg.Recipient,
+		InRoute:   indexerInRoute,
+		OutRoute:  indexerOutRoute,
+		SpotPrice: response.SpotPrice.String(),
+		SwapFee:   response.SwapFee.String(),
+		Discount:  response.Discount.String(),
+		AmountOut: indexerTypes.Token{
+			Amount: response.Amount.Amount.String(),
+			Denom:  response.Amount.Denom,
+		},
+	}, []string{msg.Sender, msg.Recipient})
+	return response, nil
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 }
 
 func (k Keeper) SwapByDenom(ctx sdk.Context, msg *types.MsgSwapByDenom) (*types.MsgSwapByDenomResponse, error) {
diff --git a/x/amm/keeper/msg_server_swap_exact_amount_in.go b/x/amm/keeper/msg_server_swap_exact_amount_in.go
index 622fd42c..9df0e9a9 100644
--- a/x/amm/keeper/msg_server_swap_exact_amount_in.go
+++ b/x/amm/keeper/msg_server_swap_exact_amount_in.go
@@ -3,6 +3,15 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerAmmTypes "github.com/elys-network/elys/indexer/txs/amm"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdkmath "cosmossdk.io/math"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/amm/types"
@@ -20,7 +29,41 @@ func (k msgServer) SwapExactAmountIn(goCtx context.Context, msg *types.MsgSwapEx
 		),
 	})
 
-	return k.Keeper.SwapExactAmountIn(ctx, msg)
+	response, err := k.Keeper.SwapExactAmountIn(ctx, msg)
+	if err != nil {
+		return nil, err
+	}
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	routes := make([]indexerAmmTypes.SwapAmountInRoute, len(msg.Routes))
+	for i, route := range msg.Routes {
+		routes[i] = indexerAmmTypes.SwapAmountInRoute{
+			PoolID:        route.PoolId,
+			TokenOutDenom: route.TokenOutDenom,
+		}
+	}
+
+	indexer.QueueTransaction(ctx, indexerAmmTypes.MsgSwapExactAmountIn{
+		Sender: msg.Sender,
+		Routes: routes,
+		TokenIn: indexerTypes.Token{
+			Amount: msg.TokenIn.Amount.String(),
+			Denom:  msg.TokenIn.Denom,
+		},
+		TokenOutMinAmount: msg.TokenOutMinAmount.String(),
+		Recipient:         msg.Recipient,
+		SwapFee:           response.SwapFee.String(),
+		Discount:          response.Discount.String(),
+		AmountOut: indexerTypes.Token{
+			Amount: response.TokenOutAmount.String(),
+			Denom:  msg.Routes[len(msg.Routes)-1].TokenOutDenom,
+		},
+	}, []string{msg.Recipient})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
+	return response, nil
 }
 
 func (k Keeper) SwapExactAmountIn(ctx sdk.Context, msg *types.MsgSwapExactAmountIn) (*types.MsgSwapExactAmountInResponse, error) {
diff --git a/x/amm/keeper/msg_server_swap_exact_amount_out.go b/x/amm/keeper/msg_server_swap_exact_amount_out.go
index 76084fac..96eef5a0 100644
--- a/x/amm/keeper/msg_server_swap_exact_amount_out.go
+++ b/x/amm/keeper/msg_server_swap_exact_amount_out.go
@@ -3,6 +3,15 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerAmmTypes "github.com/elys-network/elys/indexer/txs/amm"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/amm/types"
 )
@@ -19,7 +28,51 @@ func (k msgServer) SwapExactAmountOut(goCtx context.Context, msg *types.MsgSwapE
 		),
 	})
 
-	return k.Keeper.SwapExactAmountOut(ctx, msg)
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// ! this entire function was changed a bit
+	// ! Originally it was simply return k.Keeper.SwapExactAmountOut(ctx, msg)
+	// ! But to avoid the keeper being called elsewhere and messing witth things, had to edit this to get the ouput of the swap in context of the tx
+	response, err := k.Keeper.SwapExactAmountOut(ctx, msg)
+	if err != nil {
+		return nil, err
+	}
+
+	routes := make([]indexerAmmTypes.SwapAmountOutRoute, len(msg.Routes))
+	for i, route := range msg.Routes {
+		routes[i] = indexerAmmTypes.SwapAmountOutRoute{
+			PoolID:       route.PoolId,
+			TokenInDenom: route.TokenInDenom,
+		}
+	}
+
+	indexer.QueueTransaction(ctx, indexerAmmTypes.MsgSwapExactAmountOut{
+		Sender: msg.Sender,
+		Routes: routes,
+		TokenOut: indexerTypes.Token{
+			Amount: msg.TokenOut.Amount.String(),
+			Denom:  msg.TokenOut.Denom,
+		},
+		TokenInMaxAmount: msg.TokenInMaxAmount.String(),
+		Recipient:        msg.Recipient,
+		TokenInAmount: indexerTypes.Token{
+			Amount: response.TokenInAmount.String(),
+			Denom:  msg.Routes[0].TokenInDenom, // First route's token denom is the input token
+		},
+		SwapFee: indexerTypes.Token{
+			Amount: response.SwapFee.String(),
+			Denom:  msg.TokenOut.Denom, // Fee is in output token denomination
+		},
+		Discount: indexerTypes.Token{
+			Amount: response.Discount.String(),
+			Denom:  msg.TokenOut.Denom, // Discount is in output token denomination
+		},
+	}, []string{msg.Recipient})
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
+	return response, nil
 }
 
 func (k Keeper) SwapExactAmountOut(ctx sdk.Context, msg *types.MsgSwapExactAmountOut) (*types.MsgSwapExactAmountOutResponse, error) {
diff --git a/x/amm/keeper/msg_server_update_params.go b/x/amm/keeper/msg_server_update_params.go
index ecf99bd4..f9802ab5 100644
--- a/x/amm/keeper/msg_server_update_params.go
+++ b/x/amm/keeper/msg_server_update_params.go
@@ -3,6 +3,14 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerAmmTypes "github.com/elys-network/elys/indexer/txs/amm"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	govtypes "github.com/cosmos/cosmos-sdk/x/gov/types"
@@ -17,5 +25,25 @@ func (k msgServer) UpdateParams(goCtx context.Context, msg *types.MsgUpdateParam
 	}
 
 	k.Keeper.SetParams(ctx, *msg.Params)
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerAmmTypes.MsgUpdateParams{
+		Authority: msg.Authority,
+		Params: indexerAmmTypes.Params{
+			PoolCreationFee:             msg.Params.PoolCreationFee.String(),
+			SlippageTrackDuration:       msg.Params.SlippageTrackDuration,
+			BaseAssets:                  msg.Params.BaseAssets,
+			WeightBreakingFeeExponent:   msg.Params.WeightBreakingFeeExponent.String(),
+			WeightBreakingFeeMultiplier: msg.Params.WeightBreakingFeeMultiplier.String(),
+			WeightBreakingFeePortion:    msg.Params.WeightBreakingFeePortion.String(),
+			WeightRecoveryFeePortion:    msg.Params.WeightRecoveryFeePortion.String(),
+			ThresholdWeightDifference:   msg.Params.ThresholdWeightDifference.String(),
+			AllowedPoolCreators:         msg.Params.AllowedPoolCreators,
+		},
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateParamsResponse{}, nil
 }
diff --git a/x/amm/keeper/msg_server_update_pool_params.go b/x/amm/keeper/msg_server_update_pool_params.go
index f3da01d0..9c7ed6cf 100644
--- a/x/amm/keeper/msg_server_update_pool_params.go
+++ b/x/amm/keeper/msg_server_update_pool_params.go
@@ -3,6 +3,14 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerAmmTypes "github.com/elys-network/elys/indexer/txs/amm"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	govtypes "github.com/cosmos/cosmos-sdk/x/gov/types"
@@ -45,6 +53,20 @@ func (k msgServer) UpdatePoolParams(goCtx context.Context, msg *types.MsgUpdateP
 		return nil, err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerAmmTypes.MsgUpdatePoolParams{
+		Authority: msg.Authority,
+		PoolID:    poolId,
+		PoolParams: indexerAmmTypes.PoolParams{
+			SwapFee:   poolParams.SwapFee.String(),
+			UseOracle: poolParams.UseOracle,
+			FeeDenom:  poolParams.FeeDenom,
+		},
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdatePoolParamsResponse{
 		PoolId:     poolId,
 		PoolParams: &poolParams,
diff --git a/x/amm/types/query.pb.go b/x/amm/types/query.pb.go
index b3e8b744..18c731e2 100644
--- a/x/amm/types/query.pb.go
+++ b/x/amm/types/query.pb.go
@@ -2112,6 +2112,7 @@ func _Query_SwapEstimationByDenom_Handler(srv interface{}, ctx context.Context,
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.amm.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/amm/types/tx.pb.go b/x/amm/types/tx.pb.go
index 1f3bb4b1..243168dd 100644
--- a/x/amm/types/tx.pb.go
+++ b/x/amm/types/tx.pb.go
@@ -1588,6 +1588,7 @@ func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(in
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.amm.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/amm/types/utils_test.go b/x/amm/types/utils_test.go
index cbf8682c..e6ac4ce3 100644
--- a/x/amm/types/utils_test.go
+++ b/x/amm/types/utils_test.go
@@ -89,7 +89,7 @@ func TestApplyDiscount(t *testing.T) {
 			wantFee:  sdkmath.LegacyNewDecWithPrec(100, 2),
 		},
 		{
-			name:     "Positive discount with valid broker address",
+			name:     "Positive discount",
 			swapFee:  sdkmath.LegacyNewDecWithPrec(100, 2),
 			discount: sdkmath.LegacyNewDecWithPrec(10, 2), // 0.10 (10%)
 			wantFee:  sdkmath.LegacyNewDecWithPrec(90, 2), // 0.90 after discount
@@ -113,7 +113,7 @@ func TestApplyDiscount(t *testing.T) {
 			wantFee:  sdkmath.LegacyZeroDec(),
 		},
 		{
-			name:     "Large discount with valid broker address",
+			name:     "Large discount",
 			swapFee:  sdkmath.LegacyNewDecWithPrec(100, 2),
 			discount: sdkmath.LegacyNewDecWithPrec(9000, 4), // 0.90 (90%)
 			wantFee:  sdkmath.LegacyNewDecWithPrec(10, 2),   // 0.10 after discount
diff --git a/x/assetprofile/keeper/msg_server_add_entry.go b/x/assetprofile/keeper/msg_server_add_entry.go
index dc3b3e0f..2fd4a885 100644
--- a/x/assetprofile/keeper/msg_server_add_entry.go
+++ b/x/assetprofile/keeper/msg_server_add_entry.go
@@ -4,6 +4,14 @@ import (
 	"context"
 	"strings"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerAssetProfileTypes "github.com/elys-network/elys/indexer/txs/assetprofile"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
@@ -55,5 +63,32 @@ func (k msgServer) AddEntry(goCtx context.Context, msg *types.MsgAddEntry) (*typ
 	}
 
 	k.SetEntry(ctx, entry)
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerAssetProfileTypes.MsgAddEntry{
+		Authority:                k.authority,
+		BaseDenom:                msg.BaseDenom,
+		Decimals:                 msg.Decimals,
+		Denom:                    msg.Denom,
+		Path:                     msg.Path,
+		IbcChannelId:             msg.IbcChannelId,
+		IbcCounterpartyChannelId: msg.IbcCounterpartyChannelId,
+		DisplayName:              msg.DisplayName,
+		DisplaySymbol:            msg.DisplaySymbol,
+		Network:                  msg.Network,
+		Address:                  msg.Address,
+		ExternalSymbol:           msg.ExternalSymbol,
+		TransferLimit:            msg.TransferLimit,
+		Permissions:              msg.Permissions,
+		UnitDenom:                msg.UnitDenom,
+		IbcCounterpartyDenom:     msg.IbcCounterpartyDenom,
+		IbcCounterpartyChainId:   msg.IbcCounterpartyChainId,
+		CommitEnabled:            msg.CommitEnabled,
+		WithdrawEnabled:          msg.WithdrawEnabled,
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgAddEntryResponse{}, nil
 }
diff --git a/x/assetprofile/keeper/msg_server_entry.go b/x/assetprofile/keeper/msg_server_entry.go
index fb3fe4ec..85f79c4d 100644
--- a/x/assetprofile/keeper/msg_server_entry.go
+++ b/x/assetprofile/keeper/msg_server_entry.go
@@ -4,6 +4,14 @@ import (
 	"context"
 	"strings"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerAssetProfileTypes "github.com/elys-network/elys/indexer/txs/assetprofile"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	"cosmossdk.io/errors"
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
@@ -67,6 +75,32 @@ func (k msgServer) UpdateEntry(goCtx context.Context, msg *types.MsgUpdateEntry)
 
 	k.SetEntry(ctx, entry)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerAssetProfileTypes.MsgUpdateEntry{
+		Authority:                msg.Authority,
+		BaseDenom:                msg.BaseDenom,
+		Decimals:                 msg.Decimals,
+		Denom:                    msg.Denom,
+		Path:                     msg.Path,
+		IbcChannelId:             msg.IbcChannelId,
+		IbcCounterpartyChannelId: msg.IbcCounterpartyChannelId,
+		DisplayName:              msg.DisplayName,
+		DisplaySymbol:            msg.DisplaySymbol,
+		Network:                  msg.Network,
+		Address:                  msg.Address,
+		ExternalSymbol:           msg.ExternalSymbol,
+		TransferLimit:            msg.TransferLimit,
+		Permissions:              msg.Permissions,
+		UnitDenom:                msg.UnitDenom,
+		IbcCounterpartyDenom:     msg.IbcCounterpartyDenom,
+		IbcCounterpartyChainId:   msg.IbcCounterpartyChainId,
+		CommitEnabled:            msg.CommitEnabled,
+		WithdrawEnabled:          msg.WithdrawEnabled,
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateEntryResponse{}, nil
 }
 
@@ -90,5 +124,14 @@ func (k msgServer) DeleteEntry(goCtx context.Context, msg *types.MsgDeleteEntry)
 
 	k.RemoveEntry(ctx, msg.BaseDenom)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerAssetProfileTypes.MsgDeleteEntry{
+		Authority: msg.Authority,
+		BaseDenom: msg.BaseDenom,
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgDeleteEntryResponse{}, nil
 }
diff --git a/x/assetprofile/types/query.pb.go b/x/assetprofile/types/query.pb.go
index c5be1ecd..6ae69bea 100644
--- a/x/assetprofile/types/query.pb.go
+++ b/x/assetprofile/types/query.pb.go
@@ -604,6 +604,7 @@ func _Query_EntryAll_Handler(srv interface{}, ctx context.Context, dec func(inte
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.assetprofile.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/assetprofile/types/tx.pb.go b/x/assetprofile/types/tx.pb.go
index 43afdc98..39985877 100644
--- a/x/assetprofile/types/tx.pb.go
+++ b/x/assetprofile/types/tx.pb.go
@@ -764,6 +764,7 @@ func _Msg_AddEntry_Handler(srv interface{}, ctx context.Context, dec func(interf
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.assetprofile.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/burner/keeper/msg_server_msg_update_params.go b/x/burner/keeper/msg_server_msg_update_params.go
index 3666881c..86c31d8c 100644
--- a/x/burner/keeper/msg_server_msg_update_params.go
+++ b/x/burner/keeper/msg_server_msg_update_params.go
@@ -3,6 +3,14 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerBurnerTypes "github.com/elys-network/elys/indexer/txs/burner"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	govtypes "github.com/cosmos/cosmos-sdk/x/gov/types"
@@ -23,5 +31,17 @@ func (k msgServer) UpdateParams(goCtx context.Context, msg *types.MsgUpdateParam
 	params := k.GetParams(ctx)
 	params.EpochIdentifier = msg.Params.EpochIdentifier
 	k.SetParams(ctx, &params)
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implemsentation*/
+	indexer.QueueTransaction(ctx, indexerBurnerTypes.MsgUpdateParams{
+		Authority: msg.Authority,
+		Params: indexerBurnerTypes.Params{
+			EpochIdentifier: msg.Params.EpochIdentifier,
+		},
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateParamsResponse{}, nil
 }
diff --git a/x/burner/types/query.pb.go b/x/burner/types/query.pb.go
index 3bd23c38..6cbaf0b4 100644
--- a/x/burner/types/query.pb.go
+++ b/x/burner/types/query.pb.go
@@ -487,6 +487,7 @@ func _Query_HistoryAll_Handler(srv interface{}, ctx context.Context, dec func(in
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.burner.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/burner/types/tx.pb.go b/x/burner/types/tx.pb.go
index c30813fb..60d1f982 100644
--- a/x/burner/types/tx.pb.go
+++ b/x/burner/types/tx.pb.go
@@ -218,6 +218,7 @@ func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(in
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.burner.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/commitment/keeper/msg_server_cancel_vest.go b/x/commitment/keeper/msg_server_cancel_vest.go
index 8ac283c0..bbc74a33 100644
--- a/x/commitment/keeper/msg_server_cancel_vest.go
+++ b/x/commitment/keeper/msg_server_cancel_vest.go
@@ -2,8 +2,18 @@ package keeper
 
 import (
 	"context"
+
 	sdkmath "cosmossdk.io/math"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerCommitmentsTypes "github.com/elys-network/elys/indexer/txs/commitments"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 
@@ -61,6 +71,18 @@ func (k msgServer) CancelVest(goCtx context.Context, msg *types.MsgCancelVest) (
 	commitments.AddClaimed(sdk.NewCoin(ptypes.Eden, msg.Amount))
 	k.SetCommitments(ctx, commitments)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerCommitmentsTypes.MsgCancelVest{
+		Creator: msg.Creator,
+		Token: indexerTypes.Token{
+			Amount: msg.Amount.String(),
+			Denom:  msg.Denom,
+		},
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	// Emit blockchain event
 	ctx.EventManager().EmitEvent(
 		sdk.NewEvent(
diff --git a/x/commitment/keeper/msg_server_claim_vesting.go b/x/commitment/keeper/msg_server_claim_vesting.go
index 785a6f63..b8819e41 100644
--- a/x/commitment/keeper/msg_server_claim_vesting.go
+++ b/x/commitment/keeper/msg_server_claim_vesting.go
@@ -3,6 +3,15 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerCommitmentsTypes "github.com/elys-network/elys/indexer/txs/commitments"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 
 	"github.com/elys-network/elys/x/commitment/types"
@@ -39,6 +48,24 @@ func (k msgServer) ClaimVesting(goCtx context.Context, msg *types.MsgClaimVestin
 		if err != nil {
 			return nil, err
 		}
+
+		/* *************************************************************************** */
+		/* Start of kwak-indexer node implementation*/
+		// Convert newClaims to indexer tokens
+		indexerTokens := make([]indexerTypes.Token, len(newClaims))
+		for i, coin := range newClaims {
+			indexerTokens[i] = indexerTypes.Token{
+				Amount: coin.Amount.String(),
+				Denom:  coin.Denom,
+			}
+		}
+
+		indexer.QueueTransaction(ctx, indexerCommitmentsTypes.MsgClaimVesting{
+			Sender: msg.Sender,
+			Claims: indexerTokens,
+		}, []string{})
+		/* End of kwak-indexer node implementation*/
+		/* *************************************************************************** */
 	}
 
 	k.SetCommitments(ctx, commitments)
diff --git a/x/commitment/keeper/msg_server_commit_claimed_rewards.go b/x/commitment/keeper/msg_server_commit_claimed_rewards.go
index 303d32f0..4dffa161 100644
--- a/x/commitment/keeper/msg_server_commit_claimed_rewards.go
+++ b/x/commitment/keeper/msg_server_commit_claimed_rewards.go
@@ -3,6 +3,15 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerCommitmentsTypes "github.com/elys-network/elys/indexer/txs/commitments"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	assetprofiletypes "github.com/elys-network/elys/x/assetprofile/types"
@@ -77,6 +86,18 @@ func (k msgServer) CommitClaimedRewards(goCtx context.Context, msg *types.MsgCom
 		return nil, err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerCommitmentsTypes.MsgCommitClaimedRewards{
+		Creator: msg.Creator,
+		Token: indexerTypes.Token{
+			Amount: msg.Amount.String(),
+			Denom:  msg.Denom,
+		},
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	// Emit blockchain event
 	ctx.EventManager().EmitEvent(
 		sdk.NewEvent(
diff --git a/x/commitment/keeper/msg_server_stake.go b/x/commitment/keeper/msg_server_stake.go
index 40f4f20d..e6cd4add 100644
--- a/x/commitment/keeper/msg_server_stake.go
+++ b/x/commitment/keeper/msg_server_stake.go
@@ -4,6 +4,15 @@ import (
 	"context"
 	"fmt"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerCommitmentsTypes "github.com/elys-network/elys/indexer/txs/commitments"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
@@ -72,6 +81,19 @@ func (k msgServer) performStakeElys(ctx sdk.Context, msg *types.MsgStake) error
 		return errorsmod.Wrap(err, "elys stake msg")
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation */
+	indexer.QueueTransaction(ctx, indexerCommitmentsTypes.MsgStake{
+		Creator: address.String(),
+		Token: indexerTypes.Token{
+			Amount: amount.Amount.String(),
+			Denom:  amount.Denom,
+		},
+		ValidatorAddresss: validator_address.String(),
+	}, []string{address.String()})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return nil
 }
 
diff --git a/x/commitment/keeper/msg_server_uncommit_tokens.go b/x/commitment/keeper/msg_server_uncommit_tokens.go
index 302437d1..41c6b048 100644
--- a/x/commitment/keeper/msg_server_uncommit_tokens.go
+++ b/x/commitment/keeper/msg_server_uncommit_tokens.go
@@ -3,6 +3,15 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerCommitmentsTypes "github.com/elys-network/elys/indexer/txs/commitments"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	"cosmossdk.io/math"
 	sdk "github.com/cosmos/cosmos-sdk/types"
@@ -83,6 +92,19 @@ func (k Keeper) UncommitTokens(ctx sdk.Context, addr sdk.AccAddress, denom strin
 		}
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerCommitmentsTypes.MsgUncommitTokens{
+		Creator: addr.String(),
+		Token: indexerTypes.Token{
+			Amount: amount.String(),
+			Denom:  denom,
+		},
+		IsLiquidation: isLiquidation,
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	// Emit event
 	ctx.EventManager().EmitEvent(
 		sdk.NewEvent(
diff --git a/x/commitment/keeper/msg_server_unstake.go b/x/commitment/keeper/msg_server_unstake.go
index 823f8de9..0d5d3283 100644
--- a/x/commitment/keeper/msg_server_unstake.go
+++ b/x/commitment/keeper/msg_server_unstake.go
@@ -4,6 +4,15 @@ import (
 	"context"
 	"fmt"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerCommitmentsTypes "github.com/elys-network/elys/indexer/txs/commitments"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	stakingkeeper "github.com/cosmos/cosmos-sdk/x/staking/keeper"
@@ -37,7 +46,7 @@ func (k msgServer) performUnstakeElys(ctx sdk.Context, msg *types.MsgUnstake) er
 		return errorsmod.Wrap(errorsmod.Error{}, "staking keeper")
 	}
 
-	msgServer := stakingkeeper.NewMsgServerImpl(stakingKeeper)
+	stakingMsgServer := stakingkeeper.NewMsgServerImpl(stakingKeeper)
 
 	address, err := sdk.AccAddressFromBech32(msg.Creator)
 	if err != nil {
@@ -53,12 +62,26 @@ func (k msgServer) performUnstakeElys(ctx sdk.Context, msg *types.MsgUnstake) er
 	if !amount.IsValid() || amount.Amount.IsZero() {
 		return fmt.Errorf("invalid amount")
 	}
-	msgMsgUndelegate := stakingtypes.NewMsgUndelegate(address.String(), validator_address.String(), amount)
 
-	if _, err := msgServer.Undelegate(ctx, msgMsgUndelegate); err != nil { // Discard the response because it's empty
+	msgUndelegate := stakingtypes.NewMsgUndelegate(address.String(), validator_address.String(), amount)
+
+	if _, err := stakingMsgServer.Undelegate(ctx, msgUndelegate); err != nil {
 		return errorsmod.Wrap(err, "elys unstake msg")
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerCommitmentsTypes.MsgUnstake{
+		Creator: address.String(),
+		Token: indexerTypes.Token{
+			Amount: amount.Amount.String(),
+			Denom:  amount.Denom,
+		},
+		ValidatorAddress: validator_address.String(),
+	}, []string{address.String()})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return nil
 }
 
@@ -69,10 +92,23 @@ func (k msgServer) performUncommit(ctx sdk.Context, msg *types.MsgUnstake) error
 		return errorsmod.Wrap(err, "failed validating msgMsgUncommit")
 	}
 
-	_, err := k.UncommitTokens(ctx, msgMsgUncommit) // Discard the response because it's empty
+	_, err := k.UncommitTokens(ctx, msgMsgUncommit)
 	if err != nil {
 		return errorsmod.Wrap(err, "uncommit msg")
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerCommitmentsTypes.MsgUnstake{
+		Creator: msgMsgUncommit.Creator,
+		Token: indexerTypes.Token{
+			Amount: msgMsgUncommit.Amount.String(),
+			Denom:  msgMsgUncommit.Denom,
+		},
+		ValidatorAddress: "uncommit",
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return nil
 }
diff --git a/x/commitment/keeper/msg_server_vest_liquid.go b/x/commitment/keeper/msg_server_vest_liquid.go
index c4b54e8b..04196d5b 100644
--- a/x/commitment/keeper/msg_server_vest_liquid.go
+++ b/x/commitment/keeper/msg_server_vest_liquid.go
@@ -3,6 +3,15 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerCommitmentsTypes "github.com/elys-network/elys/indexer/txs/commitments"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/commitment/types"
 )
@@ -11,6 +20,7 @@ import (
 func (k msgServer) VestLiquid(goCtx context.Context, msg *types.MsgVestLiquid) (*types.MsgVestLiquidResponse, error) {
 	ctx := sdk.UnwrapSDKContext(goCtx)
 	creator := sdk.MustAccAddressFromBech32(msg.Creator)
+
 	if err := k.DepositLiquidTokensClaimed(ctx, msg.Denom, msg.Amount, creator); err != nil {
 		return &types.MsgVestLiquidResponse{}, err
 	}
@@ -19,5 +29,17 @@ func (k msgServer) VestLiquid(goCtx context.Context, msg *types.MsgVestLiquid) (
 		return &types.MsgVestLiquidResponse{}, err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerCommitmentsTypes.MsgVestLiquid{
+		Creator: creator.String(),
+		Token: indexerTypes.Token{
+			Amount: msg.Amount.String(),
+			Denom:  msg.Denom,
+		},
+	}, []string{creator.String()})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgVestLiquidResponse{}, nil
 }
diff --git a/x/commitment/types/query.pb.go b/x/commitment/types/query.pb.go
index 8d33b49d..d1622085 100644
--- a/x/commitment/types/query.pb.go
+++ b/x/commitment/types/query.pb.go
@@ -817,6 +817,7 @@ func _Query_CommitmentVestingInfo_Handler(srv interface{}, ctx context.Context,
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.commitment.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/commitment/types/tx.pb.go b/x/commitment/types/tx.pb.go
index 8f65161f..1fc3973e 100644
--- a/x/commitment/types/tx.pb.go
+++ b/x/commitment/types/tx.pb.go
@@ -1468,6 +1468,7 @@ func _Msg_Unstake_Handler(srv interface{}, ctx context.Context, dec func(interfa
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.commitment.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/epochs/types/query.pb.go b/x/epochs/types/query.pb.go
index 85ca8b0b..45a4d5bb 100644
--- a/x/epochs/types/query.pb.go
+++ b/x/epochs/types/query.pb.go
@@ -372,6 +372,7 @@ func _Query_CurrentEpoch_Handler(srv interface{}, ctx context.Context, dec func(
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.epochs.v1.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/estaking/keeper/msg_server.go b/x/estaking/keeper/msg_server.go
index 1e546882..4d833fee 100644
--- a/x/estaking/keeper/msg_server.go
+++ b/x/estaking/keeper/msg_server.go
@@ -3,6 +3,15 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerEstakingTypes "github.com/elys-network/elys/indexer/txs/estaking"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	govtypes "github.com/cosmos/cosmos-sdk/x/gov/types"
@@ -30,6 +39,15 @@ func (k msgServer) UpdateParams(goCtx context.Context, req *types.MsgUpdateParam
 	ctx := sdk.UnwrapSDKContext(goCtx)
 	k.SetParams(ctx, req.Params)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerEstakingTypes.MsgUpdateParams{
+		Authority: req.Authority,
+		Params:    req.Params,
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateParamsResponse{}, nil
 }
 
@@ -46,6 +64,24 @@ func (k msgServer) WithdrawReward(goCtx context.Context, msg *types.MsgWithdrawR
 		return nil, err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	tokens := make([]indexerTypes.Token, len(amount))
+	for i, coin := range amount {
+		tokens[i] = indexerTypes.Token{
+			Amount: coin.Amount.String(),
+			Denom:  coin.Denom,
+		}
+	}
+
+	indexer.QueueTransaction(ctx, indexerEstakingTypes.MsgWithdrawReward{
+		DelegatorAddress: msg.DelegatorAddress,
+		ValidatorAddress: msg.ValidatorAddress,
+		Amount:           tokens,
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	ctx.EventManager().EmitEvents(sdk.Events{
 		sdk.NewEvent(
 			types.TypeEvtWithdrawReward,
@@ -96,6 +132,24 @@ func (k msgServer) WithdrawElysStakingRewards(goCtx context.Context, msg *types.
 	if err != nil {
 		return nil, err
 	}
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	tokens := make([]indexerTypes.Token, len(rewards))
+	for i, coin := range rewards {
+		tokens[i] = indexerTypes.Token{
+			Amount: coin.Amount.String(),
+			Denom:  coin.Denom,
+		}
+	}
+
+	indexer.QueueTransaction(ctx, indexerEstakingTypes.MsgWithdrawElysStakingRewards{
+		DelegatorAddress: msg.DelegatorAddress,
+		Amount:           tokens,
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgWithdrawElysStakingRewardsResponse{Amount: rewards}, nil
 }
 
@@ -134,5 +188,23 @@ func (k Keeper) WithdrawAllRewards(goCtx context.Context, msg *types.MsgWithdraw
 	if err != nil {
 		return nil, err
 	}
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	tokens := make([]indexerTypes.Token, len(rewards))
+	for i, coin := range rewards {
+		tokens[i] = indexerTypes.Token{
+			Amount: coin.Amount.String(),
+			Denom:  coin.Denom,
+		}
+	}
+
+	indexer.QueueTransaction(ctx, indexerEstakingTypes.MsgWithdrawAllRewards{
+		DelegatorAddress: msg.DelegatorAddress,
+		Amount:           tokens,
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgWithdrawAllRewardsResponse{Amount: rewards}, nil
 }
diff --git a/x/estaking/types/query.pb.go b/x/estaking/types/query.pb.go
index 0b4b58eb..63b24e68 100644
--- a/x/estaking/types/query.pb.go
+++ b/x/estaking/types/query.pb.go
@@ -535,6 +535,7 @@ func _Query_Invariant_Handler(srv interface{}, ctx context.Context, dec func(int
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.estaking.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/estaking/types/tx.pb.go b/x/estaking/types/tx.pb.go
index a9d5a880..2187e633 100644
--- a/x/estaking/types/tx.pb.go
+++ b/x/estaking/types/tx.pb.go
@@ -645,6 +645,7 @@ func _Msg_WithdrawAllRewards_Handler(srv interface{}, ctx context.Context, dec f
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.estaking.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/leveragelp/keeper/begin_blocker.go b/x/leveragelp/keeper/begin_blocker.go
index 21a9bc65..cc35ee09 100644
--- a/x/leveragelp/keeper/begin_blocker.go
+++ b/x/leveragelp/keeper/begin_blocker.go
@@ -4,6 +4,15 @@ import (
 	"fmt"
 	"strconv"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerPerpetualTypes "github.com/elys-network/elys/indexer/txs/leveragelp"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 
 	"cosmossdk.io/math"
@@ -99,6 +108,32 @@ func (k Keeper) CheckAndLiquidateUnhealthyPosition(ctx sdk.Context, position *ty
 		sdk.NewAttribute("liabilities", position.Liabilities.String()),
 		sdk.NewAttribute("health", position.PositionHealth.String()),
 	))
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	initialValue := math.LegacyNewDecFromInt(position.Collateral.Amount)
+	finalValue := math.LegacyNewDecFromInt(repayAmount).Sub(math.LegacyNewDecFromInt(position.Liabilities))
+	profitLoss, profitLossPerc := calculateProfitLoss(initialValue, finalValue)
+
+	// Queue the liquidation event
+	indexer.QueueEvent(ctx, "/elys-event/leveragelp/liquidation", indexerPerpetualTypes.LiquidationEvent{
+		PositionID: position.Id,
+		Address:    position.Address,
+		Collateral: indexerTypes.Token{
+			Amount: position.Collateral.Amount.String(),
+			Denom:  position.Collateral.Denom,
+		},
+		RepayAmount:    repayAmount.String(),
+		Liabilities:    position.Liabilities.String(),
+		Health:         position.PositionHealth.String(),
+		InitialValue:   initialValue.String(),
+		FinalValue:     finalValue.String(),
+		ProfitLoss:     profitLoss.String(),
+		ProfitLossPerc: profitLossPerc.String(),
+	}, []string{position.Address})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return isHealthy, true, h, nil
 }
 
@@ -141,5 +176,50 @@ func (k Keeper) CheckAndCloseAtStopLoss(ctx sdk.Context, position *types.Positio
 		sdk.NewAttribute("liabilities", position.Liabilities.String()),
 		sdk.NewAttribute("health", position.PositionHealth.String()),
 	))
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	initialValue := math.LegacyNewDecFromInt(position.Collateral.Amount)
+	finalValue := math.LegacyNewDecFromInt(repayAmount).Sub(math.LegacyNewDecFromInt(position.Liabilities))
+	profitLoss, profitLossPerc := calculateProfitLoss(initialValue, finalValue)
+
+	// Queue the stop loss event
+	indexer.QueueEvent(ctx, "/elys-event/stop-loss", indexerPerpetualTypes.StopLossEvent{
+		PositionID: position.Id,
+		Address:    position.Address,
+		Collateral: indexerTypes.Token{
+			Amount: position.Collateral.Amount.String(),
+			Denom:  position.Collateral.Denom,
+		},
+		RepayAmount:     repayAmount.String(),
+		Liabilities:     position.Liabilities.String(),
+		Health:          position.PositionHealth.String(),
+		StopLossPrice:   position.StopLossPrice.String(),
+		LpTokenPrice:    lpTokenPrice.String(),
+		InitialValue:    initialValue.String(),
+		FinalValue:      finalValue.String(),
+		ProfitLoss:      profitLoss.String(),
+		ProfitLossPerc:  profitLossPerc.String(),
+		RemainingAmount: finalValue.String(),
+	}, []string{position.Address})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return underStopLossPrice, true, nil
 }
+
+/* *************************************************************************** */
+/* Start of kwak-indexer node implementation*/
+func calculateProfitLoss(
+	initialValue math.LegacyDec,
+	finalValue math.LegacyDec,
+) (profitLoss math.LegacyDec, profitLossPerc math.LegacyDec) {
+	profitLoss = finalValue.Sub(initialValue)
+	if !initialValue.IsZero() {
+		profitLossPerc = profitLoss.Quo(initialValue).Mul(math.LegacyNewDec(100))
+	}
+	return profitLoss, profitLossPerc
+}
+
+/* End of kwak-indexer node implementation*/
+/* *************************************************************************** */
diff --git a/x/leveragelp/keeper/msg_server_add_pool.go b/x/leveragelp/keeper/msg_server_add_pool.go
index 59b65770..6ada6df8 100644
--- a/x/leveragelp/keeper/msg_server_add_pool.go
+++ b/x/leveragelp/keeper/msg_server_add_pool.go
@@ -2,9 +2,18 @@ package keeper
 
 import (
 	"context"
-	sdkmath "cosmossdk.io/math"
 	"fmt"
 
+	sdkmath "cosmossdk.io/math"
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerLeveragelpTypes "github.com/elys-network/elys/indexer/txs/leveragelp"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	govtypes "github.com/cosmos/cosmos-sdk/x/gov/types"
@@ -46,5 +55,18 @@ func (k msgServer) AddPool(goCtx context.Context, msg *types.MsgAddPool) (*types
 		}
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerLeveragelpTypes.MsgAddPool{
+		Authority: msg.Authority,
+		Pool: indexerLeveragelpTypes.AddPool{
+			AmmPoolID:   msg.Pool.AmmPoolId,
+			LeverageMax: msg.Pool.LeverageMax.String(),
+			Leverage:    leverage.String(),
+		},
+	}, []string{})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgAddPoolResponse{}, nil
 }
diff --git a/x/leveragelp/keeper/msg_server_claim_rewards.go b/x/leveragelp/keeper/msg_server_claim_rewards.go
index 1643f778..79ba10fb 100644
--- a/x/leveragelp/keeper/msg_server_claim_rewards.go
+++ b/x/leveragelp/keeper/msg_server_claim_rewards.go
@@ -3,6 +3,14 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerLeveragelpTypes "github.com/elys-network/elys/indexer/txs/leveragelp"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/leveragelp/types"
 )
@@ -22,5 +30,14 @@ func (k msgServer) ClaimRewards(goCtx context.Context, msg *types.MsgClaimReward
 		}
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerLeveragelpTypes.MsgClaimRewards{
+		Sender: msg.Sender,
+		Ids:    msg.Ids,
+	}, []string{sender.String()})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgClaimRewardsResponse{}, nil
 }
diff --git a/x/leveragelp/keeper/msg_server_close.go b/x/leveragelp/keeper/msg_server_close.go
index 559c30a9..e1f59184 100644
--- a/x/leveragelp/keeper/msg_server_close.go
+++ b/x/leveragelp/keeper/msg_server_close.go
@@ -4,6 +4,15 @@ import (
 	"context"
 	"strconv"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerLeveragelpTypes "github.com/elys-network/elys/indexer/txs/leveragelp"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/leveragelp/types"
 )
@@ -40,5 +49,26 @@ func (k Keeper) Close(ctx sdk.Context, msg *types.MsgClose) (*types.MsgCloseResp
 		sdk.NewAttribute("health", closedPosition.PositionHealth.String()),
 	))
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerLeveragelpTypes.MsgClose{
+		Creator:     msg.Creator,
+		ID:          msg.Id,
+		LpAmount:    msg.LpAmount.String(),
+		RepayAmount: repayAmount.String(),
+		Position: indexerLeveragelpTypes.Position{
+			ID:      closedPosition.Id,
+			Address: closedPosition.Address,
+			Collateral: indexerTypes.Token{
+				Amount: closedPosition.Collateral.Amount.String(),
+				Denom:  closedPosition.Collateral.Denom,
+			},
+			Liabilities:    closedPosition.Liabilities.String(),
+			PositionHealth: closedPosition.PositionHealth.String(),
+		},
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgCloseResponse{}, nil
 }
diff --git a/x/leveragelp/keeper/msg_server_close_positions.go b/x/leveragelp/keeper/msg_server_close_positions.go
index c6d70f82..2867fb8d 100644
--- a/x/leveragelp/keeper/msg_server_close_positions.go
+++ b/x/leveragelp/keeper/msg_server_close_positions.go
@@ -2,10 +2,18 @@ package keeper
 
 import (
 	"context"
-	errorsmod "cosmossdk.io/errors"
 	"fmt"
 	"strings"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerLeveragelpTypes "github.com/elys-network/elys/indexer/txs/leveragelp"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
+	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/leveragelp/types"
 )
@@ -48,7 +56,6 @@ func (k msgServer) ClosePositions(goCtx context.Context, msg *types.MsgClosePosi
 				return nil, err
 			}
 		}
-
 	}
 
 	// Handle stop loss
@@ -92,5 +99,35 @@ func (k msgServer) ClosePositions(goCtx context.Context, msg *types.MsgClosePosi
 		sdk.NewAttribute("stop_loss", strings.Join(closeLog, "\n")),
 	))
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// Convert position requests to indexer format
+	liquidateRequests := make([]indexerLeveragelpTypes.PositionRequest, len(msg.Liquidate))
+	for i, req := range msg.Liquidate {
+		liquidateRequests[i] = indexerLeveragelpTypes.PositionRequest{
+			Address: req.Address,
+			ID:      req.Id,
+		}
+	}
+
+	stopLossRequests := make([]indexerLeveragelpTypes.PositionRequest, len(msg.StopLoss))
+	for i, req := range msg.StopLoss {
+		stopLossRequests[i] = indexerLeveragelpTypes.PositionRequest{
+			Address: req.Address,
+			ID:      req.Id,
+		}
+	}
+
+	// Queue the transaction
+	indexer.QueueTransaction(ctx, indexerLeveragelpTypes.MsgClosePositions{
+		Creator:    msg.Creator,
+		Liquidate:  liquidateRequests,
+		StopLoss:   stopLossRequests,
+		LiquidLogs: liqLog,
+		CloseLogs:  closeLog,
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgClosePositionsResponse{}, nil
 }
diff --git a/x/leveragelp/keeper/msg_server_open.go b/x/leveragelp/keeper/msg_server_open.go
index 47bb659b..56effeb2 100644
--- a/x/leveragelp/keeper/msg_server_open.go
+++ b/x/leveragelp/keeper/msg_server_open.go
@@ -5,6 +5,15 @@ import (
 	"fmt"
 	"strconv"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerLeveragelpTypes "github.com/elys-network/elys/indexer/txs/leveragelp"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdkmath "cosmossdk.io/math"
 	sdk "github.com/cosmos/cosmos-sdk/types"
@@ -100,5 +109,28 @@ func (k Keeper) Open(ctx sdk.Context, msg *types.MsgOpen) (*types.MsgOpenRespons
 	)
 	ctx.EventManager().EmitEvent(event)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerLeveragelpTypes.MsgOpen{
+		Creator:          msg.Creator,
+		CollateralAsset:  msg.CollateralAsset,
+		CollateralAmount: msg.CollateralAmount.String(),
+		AmmPoolID:        msg.AmmPoolId,
+		Leverage:         msg.Leverage.String(),
+		StopLossPrice:    msg.StopLossPrice.String(),
+		Position: indexerLeveragelpTypes.PositionOpen{
+			ID:      position.Id,
+			Address: position.Address,
+			Collateral: indexerTypes.Token{
+				Amount: position.Collateral.Amount.String(),
+				Denom:  position.Collateral.Denom,
+			},
+			Liabilities: position.Liabilities.String(),
+			Health:      position.PositionHealth.String(),
+		},
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgOpenResponse{}, nil
 }
diff --git a/x/leveragelp/keeper/msg_server_update_stop_loss.go b/x/leveragelp/keeper/msg_server_update_stop_loss.go
index 353def8c..4b695212 100644
--- a/x/leveragelp/keeper/msg_server_update_stop_loss.go
+++ b/x/leveragelp/keeper/msg_server_update_stop_loss.go
@@ -5,6 +5,15 @@ import (
 	"fmt"
 	"strconv"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerLeveragelpTypes "github.com/elys-network/elys/indexer/txs/leveragelp"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/leveragelp/types"
@@ -16,7 +25,6 @@ func (k msgServer) UpdateStopLoss(goCtx context.Context, msg *types.MsgUpdateSto
 	position, found := k.GetPositionWithId(ctx, sdk.MustAccAddressFromBech32(msg.Creator), msg.Position)
 	if !found {
 		return nil, errorsmod.Wrap(types.ErrPositionDoesNotExist, fmt.Sprintf("positionId: %d", msg.Position))
-
 	}
 
 	poolId := position.AmmPoolId
@@ -38,5 +46,27 @@ func (k msgServer) UpdateStopLoss(goCtx context.Context, msg *types.MsgUpdateSto
 	)
 	ctx.EventManager().EmitEvent(event)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerLeveragelpTypes.MsgUpdateStopLoss{
+		Creator:  msg.Creator,
+		Position: msg.Position,
+		Price:    msg.Price.String(),
+		PoolID:   poolId,
+		Position_: indexerLeveragelpTypes.PositionStopLoss{
+			ID:      position.Id,
+			Address: position.Address,
+			Collateral: indexerTypes.Token{
+				Amount: position.Collateral.Amount.String(),
+				Denom:  position.Collateral.Denom,
+			},
+			Liabilities: position.Liabilities.String(),
+			Health:      position.PositionHealth.String(),
+			StopLoss:    position.StopLossPrice.String(),
+		},
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateStopLossResponse{}, nil
 }
diff --git a/x/leveragelp/types/query.pb.go b/x/leveragelp/types/query.pb.go
index a6dbbc07..45b5f8f2 100644
--- a/x/leveragelp/types/query.pb.go
+++ b/x/leveragelp/types/query.pb.go
@@ -2158,6 +2158,7 @@ func _Query_CommittedTokensLocked_Handler(srv interface{}, ctx context.Context,
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.leveragelp.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/leveragelp/types/tx.pb.go b/x/leveragelp/types/tx.pb.go
index cda344e0..6aecc175 100644
--- a/x/leveragelp/types/tx.pb.go
+++ b/x/leveragelp/types/tx.pb.go
@@ -1436,6 +1436,7 @@ func _Msg_ClosePositions_Handler(srv interface{}, ctx context.Context, dec func(
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.leveragelp.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/masterchef/keeper/msg_server.go b/x/masterchef/keeper/msg_server.go
index e4817e95..68358032 100644
--- a/x/masterchef/keeper/msg_server.go
+++ b/x/masterchef/keeper/msg_server.go
@@ -6,6 +6,15 @@ import (
 	"strconv"
 	"strings"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerMasterchefTypes "github.com/elys-network/elys/indexer/txs/masterchef"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	"cosmossdk.io/math"
 	sdk "github.com/cosmos/cosmos-sdk/types"
@@ -168,6 +177,34 @@ func (k Keeper) ClaimRewards(ctx sdk.Context, sender sdk.AccAddress, poolIds []u
 		),
 	})
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// Convert coins to indexer token type
+	rewardTokens := make([]indexerTypes.Token, len(coins))
+	for i, coin := range coins {
+		rewardTokens[i] = indexerTypes.Token{
+			Amount: coin.Amount.String(),
+			Denom:  coin.Denom,
+		}
+	}
+
+	// Convert pool IDs from strings back to uint64
+	poolIDsUint := make([]uint64, len(rewardPoolIds))
+	for i, idStr := range rewardPoolIds {
+		id, _ := strconv.ParseUint(idStr, 10, 64)
+		poolIDsUint[i] = id
+	}
+
+	// Queue the event
+	indexer.QueueEvent(ctx, "/elys-event/claim-rewards", indexerMasterchefTypes.ClaimRewardsEvent{
+		Sender:      sender.String(),
+		Recipient:   recipient.String(),
+		PoolIDs:     poolIDsUint,
+		RewardCoins: rewardTokens,
+	}, []string{recipient.String()})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	// Transfer rewards (Eden/EdenB is transferred through commitment module)
 	err := k.commitmentKeeper.SendCoinsFromModuleToAccount(ctx, types.ModuleName, recipient, coins)
 	if err != nil {
@@ -193,6 +230,15 @@ func (k msgServer) ClaimRewards(goCtx context.Context, msg *types.MsgClaimReward
 		return nil, err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerMasterchefTypes.MsgClaimRewards{
+		Sender:  msg.Sender,
+		PoolIds: msg.PoolIds,
+	}, []string{sender.String()})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgClaimRewardsResponse{}, nil
 }
 
diff --git a/x/masterchef/types/query.pb.go b/x/masterchef/types/query.pb.go
index 0148b56e..087908b3 100644
--- a/x/masterchef/types/query.pb.go
+++ b/x/masterchef/types/query.pb.go
@@ -1957,6 +1957,7 @@ func _Query_PoolRewards_Handler(srv interface{}, ctx context.Context, dec func(i
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.masterchef.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/masterchef/types/tx.pb.go b/x/masterchef/types/tx.pb.go
index ca3a9ae6..5912f2a3 100644
--- a/x/masterchef/types/tx.pb.go
+++ b/x/masterchef/types/tx.pb.go
@@ -952,6 +952,7 @@ func _Msg_TogglePoolEdenRewards_Handler(srv interface{}, ctx context.Context, de
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.masterchef.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/oracle/keeper/msg_server_create_asset_info.go b/x/oracle/keeper/msg_server_create_asset_info.go
index a136d874..fe2d130c 100644
--- a/x/oracle/keeper/msg_server_create_asset_info.go
+++ b/x/oracle/keeper/msg_server_create_asset_info.go
@@ -3,6 +3,14 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerOracleTypes "github.com/elys-network/elys/indexer/txs/oracle"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	"cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/oracle/types"
@@ -25,5 +33,18 @@ func (k msgServer) CreateAssetInfo(goCtx context.Context, msg *types.MsgCreateAs
 		Decimal:    msg.Decimal,
 	})
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerOracleTypes.MsgCreateAssetInfo{
+		Creator:    msg.Creator,
+		Denom:      msg.Denom,
+		Display:    msg.Display,
+		BandTicker: msg.BandTicker,
+		ElysTicker: msg.ElysTicker,
+		Decimal:    msg.Decimal,
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgCreateAssetInfoResponse{}, nil
 }
diff --git a/x/oracle/keeper/msg_server_feed_multiple_prices.go b/x/oracle/keeper/msg_server_feed_multiple_prices.go
index 65f9a8e8..22ae9a85 100644
--- a/x/oracle/keeper/msg_server_feed_multiple_prices.go
+++ b/x/oracle/keeper/msg_server_feed_multiple_prices.go
@@ -1,7 +1,16 @@
 package keeper
 
 import (
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerOracleTypes "github.com/elys-network/elys/indexer/txs/oracle"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	"context"
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/oracle/types"
 )
@@ -31,5 +40,26 @@ func (k msgServer) FeedMultiplePrices(goCtx context.Context, msg *types.MsgFeedM
 		k.SetPrice(ctx, price)
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// Convert feed prices to indexer format
+	indexerFeedPrices := make([]indexerOracleTypes.FeedPrice, len(msg.FeedPrices))
+	for i, fp := range msg.FeedPrices {
+		indexerFeedPrices[i] = indexerOracleTypes.FeedPrice{
+			Asset:  fp.Asset,
+			Price:  fp.Price.String(),
+			Source: fp.Source,
+		}
+	}
+
+	// Queue the transaction
+	indexer.QueueTransaction(ctx, indexerOracleTypes.MsgFeedMultiplePrices{
+		Creator:    msg.Creator,
+		FeedPrices: indexerFeedPrices,
+		Timestamp:  uint64(ctx.BlockTime().Unix()),
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgFeedMultiplePricesResponse{}, nil
 }
diff --git a/x/oracle/keeper/msg_server_price.go b/x/oracle/keeper/msg_server_price.go
index e15d2216..0047b677 100644
--- a/x/oracle/keeper/msg_server_price.go
+++ b/x/oracle/keeper/msg_server_price.go
@@ -3,6 +3,14 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerOracleTypes "github.com/elys-network/elys/indexer/txs/oracle"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/oracle/types"
 )
@@ -30,5 +38,19 @@ func (k msgServer) FeedPrice(goCtx context.Context, msg *types.MsgFeedPrice) (*t
 	}
 
 	k.SetPrice(ctx, price)
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerOracleTypes.MsgFeedPrice{
+		Provider:    msg.Provider,
+		Asset:       msg.FeedPrice.Asset,
+		Price:       msg.FeedPrice.Price.String(),
+		Source:      msg.FeedPrice.Source,
+		Timestamp:   uint64(ctx.BlockTime().Unix()),
+		BlockHeight: uint64(ctx.BlockHeight()),
+	}, []string{msg.Provider})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgFeedPriceResponse{}, nil
 }
diff --git a/x/oracle/keeper/msg_server_price_feeder.go b/x/oracle/keeper/msg_server_price_feeder.go
index d3f36353..2506ba89 100644
--- a/x/oracle/keeper/msg_server_price_feeder.go
+++ b/x/oracle/keeper/msg_server_price_feeder.go
@@ -3,6 +3,14 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerOracleTypes "github.com/elys-network/elys/indexer/txs/oracle"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/oracle/types"
 )
@@ -18,6 +26,16 @@ func (k msgServer) SetPriceFeeder(goCtx context.Context, msg *types.MsgSetPriceF
 		Feeder:   msg.Feeder,
 		IsActive: msg.IsActive,
 	})
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerOracleTypes.MsgSetPriceFeeder{
+		Feeder:   msg.Feeder,
+		IsActive: msg.IsActive,
+	}, []string{msg.Feeder})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgSetPriceFeederResponse{}, nil
 }
 
@@ -28,6 +46,16 @@ func (k msgServer) DeletePriceFeeder(goCtx context.Context, msg *types.MsgDelete
 	if !found {
 		return nil, types.ErrNotAPriceFeeder
 	}
+
 	k.RemovePriceFeeder(ctx, feederAccount)
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerOracleTypes.MsgDeletePriceFeeder{
+		Feeder: msg.Feeder,
+	}, []string{msg.Feeder})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgDeletePriceFeederResponse{}, nil
 }
diff --git a/x/oracle/types/query.pb.go b/x/oracle/types/query.pb.go
index 38e20e06..8b2c2f4f 100644
--- a/x/oracle/types/query.pb.go
+++ b/x/oracle/types/query.pb.go
@@ -1280,6 +1280,7 @@ func _Query_PriceFeederAll_Handler(srv interface{}, ctx context.Context, dec fun
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.oracle.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/oracle/types/tx.pb.go b/x/oracle/types/tx.pb.go
index d88ee769..39fcfe94 100644
--- a/x/oracle/types/tx.pb.go
+++ b/x/oracle/types/tx.pb.go
@@ -1323,6 +1323,7 @@ func _Msg_CreateAssetInfo_Handler(srv interface{}, ctx context.Context, dec func
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.oracle.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/parameter/autocli.go b/x/parameter/autocli.go
index 89fa6185..0b6b51f6 100644
--- a/x/parameter/autocli.go
+++ b/x/parameter/autocli.go
@@ -35,10 +35,6 @@ func (am AppModule) AutoCLIOptions() *autocliv1.ModuleOptions {
 					RpcMethod: "UpdateMinSelfDelegation",
 					Skip:      true, // skipped because authority gated
 				},
-				{
-					RpcMethod: "UpdateBrokerAddress",
-					Skip:      true, // skipped because authority gated
-				},
 				{
 					RpcMethod: "UpdateTotalBlocksPerYear",
 					Skip:      true, // skipped because authority gated
diff --git a/x/parameter/keeper/msg_server.go b/x/parameter/keeper/msg_server.go
index 418e5495..2cd585c9 100644
--- a/x/parameter/keeper/msg_server.go
+++ b/x/parameter/keeper/msg_server.go
@@ -2,11 +2,17 @@ package keeper
 
 import (
 	"context"
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	govtypes "github.com/cosmos/cosmos-sdk/x/gov/types"
 	"github.com/elys-network/elys/x/parameter/types"
-)
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerParamTypes "github.com/elys-network/elys/indexer/txs/parameter"
+	/* End of kwak-indexer node implementation*/ /* *************************************************************************** */)
 
 type msgServer struct {
 	Keeper
@@ -30,6 +36,16 @@ func (k msgServer) UpdateMinCommission(goCtx context.Context, msg *types.MsgUpda
 	params := k.GetParams(ctx)
 	params.MinCommissionRate = msg.MinCommission
 	k.SetParams(ctx, params)
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerParamTypes.MsgUpdateMinCommission{
+		Creator:       msg.Creator,
+		MinCommission: msg.MinCommission.String(),
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateMinCommissionResponse{}, nil
 }
 
@@ -43,6 +59,16 @@ func (k msgServer) UpdateMaxVotingPower(goCtx context.Context, msg *types.MsgUpd
 	params := k.GetParams(ctx)
 	params.MaxVotingPower = msg.MaxVotingPower
 	k.SetParams(ctx, params)
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerParamTypes.MsgUpdateMaxVotingPower{
+		Creator:        msg.Creator,
+		MaxVotingPower: msg.MaxVotingPower.String(),
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateMaxVotingPowerResponse{}, nil
 }
 
@@ -56,6 +82,16 @@ func (k msgServer) UpdateMinSelfDelegation(goCtx context.Context, msg *types.Msg
 	params := k.GetParams(ctx)
 	params.MinSelfDelegation = msg.MinSelfDelegation
 	k.SetParams(ctx, params)
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerParamTypes.MsgUpdateMinSelfDelegation{
+		Creator:           msg.Creator,
+		MinSelfDelegation: msg.MinSelfDelegation.String(),
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateMinSelfDelegationResponse{}, nil
 }
 
@@ -69,5 +105,15 @@ func (k msgServer) UpdateTotalBlocksPerYear(goCtx context.Context, msg *types.Ms
 	params := k.GetParams(ctx)
 	params.TotalBlocksPerYear = msg.TotalBlocksPerYear
 	k.SetParams(ctx, params)
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerParamTypes.MsgUpdateTotalBlocksPerYear{
+		Creator:            msg.Creator,
+		TotalBlocksPerYear: msg.TotalBlocksPerYear,
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateTotalBlocksPerYearResponse{}, nil
 }
diff --git a/x/parameter/keeper/msg_server_update_rewards_data_lifetime.go b/x/parameter/keeper/msg_server_update_rewards_data_lifetime.go
index 5875d39a..a9c0b4b5 100644
--- a/x/parameter/keeper/msg_server_update_rewards_data_lifetime.go
+++ b/x/parameter/keeper/msg_server_update_rewards_data_lifetime.go
@@ -2,6 +2,14 @@ package keeper
 
 import (
 	"context"
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerParamTypes "github.com/elys-network/elys/indexer/txs/parameter"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	govtypes "github.com/cosmos/cosmos-sdk/x/gov/types"
@@ -19,5 +27,14 @@ func (k msgServer) UpdateRewardsDataLifetime(goCtx context.Context, msg *types.M
 	params.RewardsDataLifetime = msg.RewardsDataLifetime
 	k.SetParams(ctx, params)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerParamTypes.MsgUpdateRewardsDataLifetime{
+		Creator:             msg.Creator,
+		RewardsDataLifetime: msg.RewardsDataLifetime,
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateRewardsDataLifetimeResponse{}, nil
 }
diff --git a/x/parameter/spec/01_concepts.md b/x/parameter/spec/01_concepts.md
index 9a126a22..8e6b424a 100644
--- a/x/parameter/spec/01_concepts.md
+++ b/x/parameter/spec/01_concepts.md
@@ -4,7 +4,7 @@ order: 1
 
 # Concepts
 
-The `parameter` module in the Elys Network manages key configuration parameters for the network, enabling dynamic updates and retrievals. It facilitates the modification of various parameters related to commissions, voting power, self-delegation, broker address and total blocks per year.
+The `parameter` module in the Elys Network manages key configuration parameters for the network, enabling dynamic updates and retrievals. It facilitates the modification of various parameters related to commissions, voting power, self-delegation and total blocks per year.
 
 ## Module Components
 
diff --git a/x/parameter/spec/04_protobuf_definitions.md b/x/parameter/spec/04_protobuf_definitions.md
index 02c02f9a..6408be3a 100644
--- a/x/parameter/spec/04_protobuf_definitions.md
+++ b/x/parameter/spec/04_protobuf_definitions.md
@@ -8,7 +8,7 @@ order: 4
 
 ### Params
 
-The `Params` message defines the structure of the configuration parameters, including commission rates, voting power, self-delegation and broker address.
+The `Params` message defines the structure of the configuration parameters, including commission rates, voting power and self-delegation.
 
 ```proto
 message Params {
@@ -24,9 +24,8 @@ message Params {
     (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
     (gogoproto.nullable) = false
   ];
-  string broker_address = 4;
-  int64 total_blocks_per_year = 5;
-  int64 rewards_data_lifetime = 6;
+  int64 total_blocks_per_year = 4;
+  int64 rewards_data_lifetime = 5;
 }
 ```
 
diff --git a/x/parameter/types/errors.go b/x/parameter/types/errors.go
index f8a7fa1b..2e63e67c 100644
--- a/x/parameter/types/errors.go
+++ b/x/parameter/types/errors.go
@@ -11,6 +11,5 @@ var (
 	ErrInvalidMinCommissionRate    = errorsmod.Register(ModuleName, 1101, "invalid min commission rate")
 	ErrInvalidMaxVotingPower       = errorsmod.Register(ModuleName, 1102, "invalid max voting power")
 	ErrInvalidMinSelfDelegation    = errorsmod.Register(ModuleName, 1103, "invalid min self delegation")
-	ErrInvalidBrokerAddress        = errorsmod.Register(ModuleName, 1104, "invalid broker address")
-	ErrInvalidRewardsDataLifecycle = errorsmod.Register(ModuleName, 1105, "invalid rewards data lifecycle")
+	ErrInvalidRewardsDataLifecycle = errorsmod.Register(ModuleName, 1104, "invalid rewards data lifecycle")
 )
diff --git a/x/parameter/types/params.pb.go b/x/parameter/types/params.pb.go
index 62a1d0cf..bd30e55c 100644
--- a/x/parameter/types/params.pb.go
+++ b/x/parameter/types/params.pb.go
@@ -29,9 +29,8 @@ type LegacyParams struct {
 	MinCommissionRate   cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=min_commission_rate,json=minCommissionRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_commission_rate"`
 	MaxVotingPower      cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=max_voting_power,json=maxVotingPower,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_voting_power"`
 	MinSelfDelegation   cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=min_self_delegation,json=minSelfDelegation,proto3,customtype=cosmossdk.io/math.Int" json:"min_self_delegation"`
-	BrokerAddress       string                      `protobuf:"bytes,4,opt,name=broker_address,json=brokerAddress,proto3" json:"broker_address,omitempty"`
-	TotalBlocksPerYear  int64                       `protobuf:"varint,5,opt,name=total_blocks_per_year,json=totalBlocksPerYear,proto3" json:"total_blocks_per_year,omitempty"`
-	RewardsDataLifetime int64                       `protobuf:"varint,6,opt,name=rewards_data_lifetime,json=rewardsDataLifetime,proto3" json:"rewards_data_lifetime,omitempty"`
+	TotalBlocksPerYear  uint64                      `protobuf:"varint,4,opt,name=total_blocks_per_year,json=totalBlocksPerYear,proto3" json:"total_blocks_per_year,omitempty"`
+	RewardsDataLifetime uint64                      `protobuf:"varint,5,opt,name=rewards_data_lifetime,json=rewardsDataLifetime,proto3" json:"rewards_data_lifetime,omitempty"`
 }
 
 func (m *LegacyParams) Reset()         { *m = LegacyParams{} }
@@ -67,21 +66,14 @@ func (m *LegacyParams) XXX_DiscardUnknown() {
 
 var xxx_messageInfo_LegacyParams proto.InternalMessageInfo
 
-func (m *LegacyParams) GetBrokerAddress() string {
-	if m != nil {
-		return m.BrokerAddress
-	}
-	return ""
-}
-
-func (m *LegacyParams) GetTotalBlocksPerYear() int64 {
+func (m *LegacyParams) GetTotalBlocksPerYear() uint64 {
 	if m != nil {
 		return m.TotalBlocksPerYear
 	}
 	return 0
 }
 
-func (m *LegacyParams) GetRewardsDataLifetime() int64 {
+func (m *LegacyParams) GetRewardsDataLifetime() uint64 {
 	if m != nil {
 		return m.RewardsDataLifetime
 	}
@@ -152,35 +144,33 @@ func init() {
 func init() { proto.RegisterFile("elys/parameter/params.proto", fileDescriptor_b61780a5be327c2b) }
 
 var fileDescriptor_b61780a5be327c2b = []byte{
-	// 438 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x93, 0x41, 0x6b, 0x13, 0x41,
-	0x14, 0xc7, 0xb3, 0xa6, 0x0d, 0x38, 0x68, 0xd0, 0xad, 0x81, 0xb5, 0x85, 0x6d, 0x29, 0x08, 0x05,
-	0xe9, 0x2e, 0xd5, 0x4f, 0x60, 0xcc, 0xc1, 0x42, 0x0f, 0x21, 0x82, 0xa0, 0x3d, 0x0c, 0x2f, 0xbb,
-	0x2f, 0xdb, 0x21, 0x3b, 0xfb, 0x96, 0x99, 0xa7, 0x49, 0xbe, 0x83, 0x07, 0x3f, 0x8c, 0x17, 0xbf,
-	0x41, 0x8f, 0xc5, 0x93, 0x78, 0x28, 0x92, 0x7c, 0x11, 0xd9, 0x99, 0x10, 0x0a, 0x2a, 0xa2, 0xe7,
-	0xde, 0xe6, 0xbd, 0xdf, 0xbe, 0xdf, 0x3e, 0xf8, 0xf3, 0xc4, 0x1e, 0x96, 0x0b, 0x9b, 0xd6, 0x60,
-	0x40, 0x23, 0xa3, 0xf1, 0x2f, 0x9b, 0xd4, 0x86, 0x98, 0xc2, 0x6e, 0x03, 0x93, 0x0d, 0xdc, 0x7d,
-	0x54, 0x50, 0x41, 0x0e, 0xa5, 0xcd, 0xcb, 0x7f, 0xb5, 0xfb, 0x38, 0x23, 0xab, 0xc9, 0x4a, 0x0f,
-	0x7c, 0xe1, 0xd1, 0xe1, 0x97, 0xb6, 0xb8, 0x77, 0x86, 0x05, 0x64, 0x8b, 0xa1, 0xf3, 0x86, 0x20,
-	0x76, 0xb4, 0xaa, 0x64, 0x46, 0x5a, 0x2b, 0x6b, 0x15, 0x55, 0xd2, 0x00, 0x63, 0x14, 0x1c, 0x04,
-	0x47, 0x77, 0xfb, 0x27, 0x97, 0xd7, 0xfb, 0xad, 0xef, 0xd7, 0xfb, 0x7b, 0xde, 0x61, 0xf3, 0x69,
-	0xa2, 0x28, 0xd5, 0xc0, 0x17, 0x89, 0x97, 0x0c, 0x30, 0xfb, 0xfa, 0xf9, 0x58, 0xac, 0x7f, 0x31,
-	0xc0, 0x6c, 0xf4, 0x50, 0xab, 0xea, 0xe5, 0x46, 0x36, 0x02, 0xc6, 0xf0, 0x5c, 0x3c, 0xd0, 0x30,
-	0x97, 0x1f, 0x88, 0x55, 0x55, 0xc8, 0x9a, 0x66, 0x68, 0xa2, 0x3b, 0xff, 0xeb, 0xef, 0x6a, 0x98,
-	0xbf, 0x71, 0xa6, 0x61, 0x23, 0x0a, 0xcf, 0xfd, 0xfe, 0x16, 0xcb, 0x89, 0xcc, 0xb1, 0xc4, 0x02,
-	0x58, 0x51, 0x15, 0xb5, 0x9d, 0xff, 0xe9, 0xda, 0xdf, 0xfb, 0xd5, 0x7f, 0x5a, 0xf1, 0x0d, 0xf3,
-	0x69, 0xc5, 0x6e, 0xf3, 0xd7, 0x58, 0x4e, 0x06, 0x1b, 0x4b, 0xf8, 0x44, 0x74, 0xc7, 0x86, 0xa6,
-	0x68, 0x24, 0xe4, 0xb9, 0x41, 0x6b, 0xa3, 0xad, 0xc6, 0x3b, 0xba, 0xef, 0xbb, 0x2f, 0x7c, 0x33,
-	0x3c, 0x11, 0x3d, 0x26, 0x86, 0x52, 0x8e, 0x4b, 0xca, 0xa6, 0x56, 0xd6, 0x68, 0xe4, 0x02, 0xc1,
-	0x44, 0xdb, 0x07, 0xc1, 0x51, 0x7b, 0x14, 0x3a, 0xd8, 0x77, 0x6c, 0x88, 0xe6, 0x2d, 0x82, 0x09,
-	0x9f, 0x89, 0x9e, 0xc1, 0x19, 0x98, 0xdc, 0xca, 0x1c, 0x18, 0x64, 0xa9, 0x26, 0xc8, 0x4a, 0x63,
-	0xd4, 0x71, 0x23, 0x3b, 0x6b, 0x38, 0x00, 0x86, 0xb3, 0x35, 0x3a, 0xfc, 0xd8, 0x16, 0x9d, 0xdb,
-	0xd4, 0xfe, 0x9e, 0xda, 0x1f, 0xe3, 0x68, 0xc2, 0xdb, 0xfa, 0xb7, 0x38, 0xb6, 0xdd, 0xc8, 0xef,
-	0xe2, 0xe8, 0xbf, 0xba, 0x5c, 0xc6, 0xc1, 0xd5, 0x32, 0x0e, 0x7e, 0x2c, 0xe3, 0xe0, 0xd3, 0x2a,
-	0x6e, 0x5d, 0xad, 0xe2, 0xd6, 0xb7, 0x55, 0xdc, 0x7a, 0x97, 0x14, 0x8a, 0x2f, 0xde, 0x8f, 0x93,
-	0x8c, 0x74, 0xda, 0x1c, 0xec, 0x71, 0x85, 0x3c, 0x23, 0x33, 0x75, 0x45, 0x3a, 0xbf, 0x71, 0xdc,
-	0xbc, 0xa8, 0xd1, 0x8e, 0x3b, 0xee, 0x36, 0x9f, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x1a,
-	0x03, 0x6a, 0xfb, 0x03, 0x00, 0x00,
+	// 401 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x93, 0xc1, 0x6a, 0x14, 0x41,
+	0x10, 0x86, 0x77, 0xdc, 0x18, 0xb0, 0x91, 0xa0, 0x13, 0x17, 0xc6, 0x04, 0x26, 0x21, 0xa7, 0x80,
+	0x64, 0x86, 0xe8, 0x1b, 0xac, 0x7b, 0x30, 0x90, 0xc3, 0xb2, 0x82, 0xa0, 0x39, 0x34, 0xb5, 0xb3,
+	0xb5, 0x93, 0x66, 0xa7, 0xbb, 0x86, 0xee, 0xd2, 0xdd, 0x79, 0x07, 0x0f, 0xe2, 0xb3, 0xf8, 0x10,
+	0x39, 0x06, 0x4f, 0xe2, 0x21, 0xc8, 0xee, 0x8b, 0xc8, 0x74, 0x0f, 0x4b, 0xc0, 0x9b, 0x27, 0x0f,
+	0xde, 0xaa, 0xf8, 0xba, 0xbf, 0x2a, 0x28, 0x7e, 0x71, 0x88, 0x55, 0xe3, 0xf2, 0x1a, 0x2c, 0x68,
+	0x64, 0xb4, 0xa1, 0x72, 0x59, 0x6d, 0x89, 0x29, 0xde, 0x6b, 0x61, 0xb6, 0x85, 0x07, 0xcf, 0x4a,
+	0x2a, 0xc9, 0xa3, 0xbc, 0xad, 0xc2, 0xab, 0x83, 0xe7, 0x05, 0x39, 0x4d, 0x4e, 0x06, 0x10, 0x9a,
+	0x80, 0x4e, 0xbe, 0xf6, 0xc5, 0xe3, 0x4b, 0x2c, 0xa1, 0x68, 0xc6, 0xde, 0x1b, 0x83, 0xd8, 0xd7,
+	0xca, 0xc8, 0x82, 0xb4, 0x56, 0xce, 0x29, 0x32, 0xd2, 0x02, 0x63, 0x12, 0x1d, 0x47, 0xa7, 0x8f,
+	0x86, 0xe7, 0x37, 0x77, 0x47, 0xbd, 0x9f, 0x77, 0x47, 0x87, 0xc1, 0xe1, 0x66, 0x8b, 0x4c, 0x51,
+	0xae, 0x81, 0xaf, 0xb3, 0x20, 0x19, 0x61, 0xf1, 0xfd, 0xdb, 0x99, 0xe8, 0x46, 0x8c, 0xb0, 0x98,
+	0x3c, 0xd5, 0xca, 0xbc, 0xde, 0xca, 0x26, 0xc0, 0x18, 0x5f, 0x89, 0x27, 0x1a, 0x56, 0xf2, 0x13,
+	0xb1, 0x32, 0xa5, 0xac, 0x69, 0x89, 0x36, 0x79, 0xf0, 0xb7, 0xfe, 0x3d, 0x0d, 0xab, 0x77, 0xde,
+	0x34, 0x6e, 0x45, 0xf1, 0x55, 0xd8, 0xdf, 0x61, 0x35, 0x97, 0x33, 0xac, 0xb0, 0x04, 0x56, 0x64,
+	0x92, 0xbe, 0xf7, 0xbf, 0xe8, 0xfc, 0x83, 0x3f, 0xfd, 0x17, 0x86, 0xef, 0x99, 0x2f, 0x0c, 0xfb,
+	0xcd, 0xdf, 0x62, 0x35, 0x1f, 0x6d, 0x2d, 0xf1, 0xb9, 0x18, 0x30, 0x31, 0x54, 0x72, 0x5a, 0x51,
+	0xb1, 0x70, 0xb2, 0x46, 0x2b, 0x1b, 0x04, 0x9b, 0xec, 0x1c, 0x47, 0xa7, 0x3b, 0x93, 0xd8, 0xc3,
+	0xa1, 0x67, 0x63, 0xb4, 0xef, 0x11, 0x6c, 0xfc, 0x52, 0x0c, 0x2c, 0x2e, 0xc1, 0xce, 0x9c, 0x9c,
+	0x01, 0x83, 0xac, 0xd4, 0x1c, 0x59, 0x69, 0x4c, 0x1e, 0xfa, 0x2f, 0xfb, 0x1d, 0x1c, 0x01, 0xc3,
+	0x65, 0x87, 0x4e, 0x3e, 0xf7, 0xc5, 0xee, 0xff, 0x73, 0xfc, 0x2b, 0xe7, 0x18, 0xbe, 0xb9, 0x59,
+	0xa7, 0xd1, 0xed, 0x3a, 0x8d, 0x7e, 0xad, 0xd3, 0xe8, 0xcb, 0x26, 0xed, 0xdd, 0x6e, 0xd2, 0xde,
+	0x8f, 0x4d, 0xda, 0xfb, 0x90, 0x95, 0x8a, 0xaf, 0x3f, 0x4e, 0xb3, 0x82, 0x74, 0xde, 0x26, 0xf1,
+	0xcc, 0x20, 0x2f, 0xc9, 0x2e, 0x7c, 0x93, 0xaf, 0xee, 0xa5, 0x96, 0x9b, 0x1a, 0xdd, 0x74, 0xd7,
+	0x87, 0xee, 0xd5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xa9, 0x12, 0x98, 0xd4, 0x03, 0x00,
+	0x00,
 }
 
 func (m *LegacyParams) Marshal() (dAtA []byte, err error) {
@@ -206,19 +196,12 @@ func (m *LegacyParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
 	if m.RewardsDataLifetime != 0 {
 		i = encodeVarintParams(dAtA, i, uint64(m.RewardsDataLifetime))
 		i--
-		dAtA[i] = 0x30
+		dAtA[i] = 0x28
 	}
 	if m.TotalBlocksPerYear != 0 {
 		i = encodeVarintParams(dAtA, i, uint64(m.TotalBlocksPerYear))
 		i--
-		dAtA[i] = 0x28
-	}
-	if len(m.BrokerAddress) > 0 {
-		i -= len(m.BrokerAddress)
-		copy(dAtA[i:], m.BrokerAddress)
-		i = encodeVarintParams(dAtA, i, uint64(len(m.BrokerAddress)))
-		i--
-		dAtA[i] = 0x22
+		dAtA[i] = 0x20
 	}
 	{
 		size := m.MinSelfDelegation.Size()
@@ -339,10 +322,6 @@ func (m *LegacyParams) Size() (n int) {
 	n += 1 + l + sovParams(uint64(l))
 	l = m.MinSelfDelegation.Size()
 	n += 1 + l + sovParams(uint64(l))
-	l = len(m.BrokerAddress)
-	if l > 0 {
-		n += 1 + l + sovParams(uint64(l))
-	}
 	if m.TotalBlocksPerYear != 0 {
 		n += 1 + sovParams(uint64(m.TotalBlocksPerYear))
 	}
@@ -511,38 +490,6 @@ func (m *LegacyParams) Unmarshal(dAtA []byte) error {
 			}
 			iNdEx = postIndex
 		case 4:
-			if wireType != 2 {
-				return fmt.Errorf("proto: wrong wireType = %d for field BrokerAddress", wireType)
-			}
-			var stringLen uint64
-			for shift := uint(0); ; shift += 7 {
-				if shift >= 64 {
-					return ErrIntOverflowParams
-				}
-				if iNdEx >= l {
-					return io.ErrUnexpectedEOF
-				}
-				b := dAtA[iNdEx]
-				iNdEx++
-				stringLen |= uint64(b&0x7F) << shift
-				if b < 0x80 {
-					break
-				}
-			}
-			intStringLen := int(stringLen)
-			if intStringLen < 0 {
-				return ErrInvalidLengthParams
-			}
-			postIndex := iNdEx + intStringLen
-			if postIndex < 0 {
-				return ErrInvalidLengthParams
-			}
-			if postIndex > l {
-				return io.ErrUnexpectedEOF
-			}
-			m.BrokerAddress = string(dAtA[iNdEx:postIndex])
-			iNdEx = postIndex
-		case 5:
 			if wireType != 0 {
 				return fmt.Errorf("proto: wrong wireType = %d for field TotalBlocksPerYear", wireType)
 			}
@@ -556,12 +503,12 @@ func (m *LegacyParams) Unmarshal(dAtA []byte) error {
 				}
 				b := dAtA[iNdEx]
 				iNdEx++
-				m.TotalBlocksPerYear |= int64(b&0x7F) << shift
+				m.TotalBlocksPerYear |= uint64(b&0x7F) << shift
 				if b < 0x80 {
 					break
 				}
 			}
-		case 6:
+		case 5:
 			if wireType != 0 {
 				return fmt.Errorf("proto: wrong wireType = %d for field RewardsDataLifetime", wireType)
 			}
@@ -575,7 +522,7 @@ func (m *LegacyParams) Unmarshal(dAtA []byte) error {
 				}
 				b := dAtA[iNdEx]
 				iNdEx++
-				m.RewardsDataLifetime |= int64(b&0x7F) << shift
+				m.RewardsDataLifetime |= uint64(b&0x7F) << shift
 				if b < 0x80 {
 					break
 				}
diff --git a/x/parameter/types/query.pb.go b/x/parameter/types/query.pb.go
index 1cfe0187..5e460ad8 100644
--- a/x/parameter/types/query.pb.go
+++ b/x/parameter/types/query.pb.go
@@ -209,6 +209,7 @@ func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interf
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.parameter.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/parameter/types/tx.pb.go b/x/parameter/types/tx.pb.go
index bd1937d0..e5f597c2 100644
--- a/x/parameter/types/tx.pb.go
+++ b/x/parameter/types/tx.pb.go
@@ -709,6 +709,7 @@ func _Msg_UpdateRewardsDataLifetime_Handler(srv interface{}, ctx context.Context
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.parameter.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/perpetual/keeper/close.go b/x/perpetual/keeper/close.go
index c1a96e40..5b632bb5 100644
--- a/x/perpetual/keeper/close.go
+++ b/x/perpetual/keeper/close.go
@@ -16,6 +16,12 @@ func (k Keeper) Close(ctx sdk.Context, msg *types.MsgClose) (*types.MsgCloseResp
 	}
 	baseCurrency := entry.Denom
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// ! Close is handled in the function below
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+
 	closedMtp, repayAmount, closingRatio, err := k.ClosePosition(ctx, msg, baseCurrency)
 	if err != nil {
 		return nil, err
diff --git a/x/perpetual/keeper/close_position.go b/x/perpetual/keeper/close_position.go
index 8e103561..ca9c3c2e 100644
--- a/x/perpetual/keeper/close_position.go
+++ b/x/perpetual/keeper/close_position.go
@@ -3,6 +3,16 @@ package keeper
 import (
 	"fmt"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+
+	indexer "github.com/elys-network/elys/indexer"
+	indexerPerpetualTypes "github.com/elys-network/elys/indexer/txs/perpetual"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	"cosmossdk.io/math"
 	sdk "github.com/cosmos/cosmos-sdk/types"
@@ -10,6 +20,12 @@ import (
 )
 
 func (k Keeper) ClosePosition(ctx sdk.Context, msg *types.MsgClose, baseCurrency string) (*types.MTP, math.Int, math.LegacyDec, error) {
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	var initialCollateral math.LegacyDec
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	// Retrieve MTP
 	creator := sdk.MustAccAddressFromBech32(msg.Creator)
 	mtp, err := k.GetMTP(ctx, creator, msg.Id)
@@ -17,6 +33,12 @@ func (k Keeper) ClosePosition(ctx sdk.Context, msg *types.MsgClose, baseCurrency
 		return nil, math.ZeroInt(), math.LegacyZeroDec(), err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	initialCollateral = math.LegacyNewDecFromInt(mtp.Collateral)
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	// Retrieve AmmPool
 	ammPool, err := k.GetAmmPool(ctx, mtp.AmmPoolId)
 	if err != nil {
@@ -65,5 +87,57 @@ func (k Keeper) ClosePosition(ctx sdk.Context, msg *types.MsgClose, baseCurrency
 		}
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	finalValue := math.LegacyNewDecFromInt(repayAmt).Sub(mtp.Liabilities.ToLegacyDec())
+	profitLoss, profitLossPerc := calculateProfitLoss(initialCollateral, finalValue)
+
+	indexer.QueueTransaction(ctx, indexerPerpetualTypes.MsgClose{
+		Creator:  msg.Creator,
+		Id:       msg.Id,
+		Amount:   msg.Amount.String(),
+		Position: mtp.Position.String(),
+		Collateral: indexerTypes.Token{
+			Amount: mtp.Collateral.String(),
+			Denom:  mtp.CollateralAsset,
+		},
+		Custody: indexerTypes.Token{
+			Amount: mtp.Custody.String(),
+			Denom:  mtp.CustodyAsset,
+		},
+		Liabilities: indexerTypes.Token{
+			Amount: mtp.Liabilities.String(),
+			Denom:  mtp.LiabilitiesAsset,
+		},
+		RepayAmount:      repayAmt.String(),
+		InitialValue:     initialCollateral.String(),
+		FinalValue:       finalValue.String(),
+		ProfitLoss:       profitLoss.String(),
+		ProfitLossPerc:   profitLossPerc.String(),
+		CollateralAsset:  mtp.CollateralAsset,
+		TradingAsset:     mtp.TradingAsset,
+		LiabilitiesAsset: mtp.LiabilitiesAsset,
+		MtpHealth:        mtp.MtpHealth.String(),
+		OpenPrice:        mtp.OpenPrice.String(),
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &mtp, repayAmt, closingRatio, nil
 }
+
+/* *************************************************************************** */
+/* Start of kwak-indexer node implementation*/
+func calculateProfitLoss(
+	initialValue math.LegacyDec,
+	finalValue math.LegacyDec,
+) (profitLoss math.LegacyDec, profitLossPerc math.LegacyDec) {
+	profitLoss = finalValue.Sub(initialValue)
+	if !initialValue.IsZero() {
+		profitLossPerc = profitLoss.Quo(initialValue).Mul(math.LegacyNewDec(100))
+	}
+	return profitLoss, profitLossPerc
+}
+
+/* End of kwak-indexer node implementation*/
+/* *************************************************************************** */
diff --git a/x/perpetual/keeper/msg_server_close.go b/x/perpetual/keeper/msg_server_close.go
index 71f5c4cd..998f8a9e 100644
--- a/x/perpetual/keeper/msg_server_close.go
+++ b/x/perpetual/keeper/msg_server_close.go
@@ -10,5 +10,11 @@ import (
 func (k msgServer) Close(goCtx context.Context, msg *types.MsgClose) (*types.MsgCloseResponse, error) {
 	ctx := sdk.UnwrapSDKContext(goCtx)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// ! Close is handled in the function below
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+
 	return k.Keeper.Close(ctx, msg)
 }
diff --git a/x/perpetual/keeper/msg_server_close_positions.go b/x/perpetual/keeper/msg_server_close_positions.go
index 64398f46..0d966cde 100644
--- a/x/perpetual/keeper/msg_server_close_positions.go
+++ b/x/perpetual/keeper/msg_server_close_positions.go
@@ -6,6 +6,16 @@ import (
 	"strconv"
 	"strings"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	"cosmossdk.io/math"
+	indexer "github.com/elys-network/elys/indexer"
+	indexerPerpetualTypes "github.com/elys-network/elys/indexer/txs/perpetual"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	ptypes "github.com/elys-network/elys/x/parameter/types"
 	"github.com/elys-network/elys/x/perpetual/types"
@@ -14,6 +24,42 @@ import (
 func (k msgServer) ClosePositions(goCtx context.Context, msg *types.MsgClosePositions) (*types.MsgClosePositionsResponse, error) {
 	ctx := sdk.UnwrapSDKContext(goCtx)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// Queue the initial close positions transaction
+	liquidateRequests := make([]indexerPerpetualTypes.PositionRequest, len(msg.Liquidate))
+	for i, req := range msg.Liquidate {
+		liquidateRequests[i] = indexerPerpetualTypes.PositionRequest{
+			Address: req.Address,
+			ID:      req.Id,
+		}
+	}
+
+	stopLossRequests := make([]indexerPerpetualTypes.PositionRequest, len(msg.StopLoss))
+	for i, req := range msg.StopLoss {
+		stopLossRequests[i] = indexerPerpetualTypes.PositionRequest{
+			Address: req.Address,
+			ID:      req.Id,
+		}
+	}
+
+	takeProfitRequests := make([]indexerPerpetualTypes.PositionRequest, len(msg.TakeProfit))
+	for i, req := range msg.TakeProfit {
+		takeProfitRequests[i] = indexerPerpetualTypes.PositionRequest{
+			Address: req.Address,
+			ID:      req.Id,
+		}
+	}
+
+	indexer.QueueTransaction(ctx, indexerPerpetualTypes.MsgClosePositions{
+		Creator:    msg.Creator,
+		Liquidate:  liquidateRequests,
+		StopLoss:   stopLossRequests,
+		TakeProfit: takeProfitRequests,
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	baseCurrency, found := k.assetProfileKeeper.GetEntry(ctx, ptypes.BaseCurrency)
 	if !found {
 		return nil, nil
@@ -42,6 +88,44 @@ func (k msgServer) ClosePositions(goCtx context.Context, msg *types.MsgClosePosi
 			// Add log about error or not liquidated
 			liqLog = append(liqLog, fmt.Sprintf("Position: Address:%s Id:%d cannot be liquidated due to err: %s", position.Address, position.Id, err.Error()))
 		} else {
+			/* *************************************************************************** */
+			/* Start of kwak-indexer node implementation*/
+			initialValue := math.LegacyNewDecFromInt(position.Collateral)
+			// For perpetual positions, we calculate final value based on custody and liabilities
+			finalValue := math.LegacyNewDecFromInt(position.Custody.Sub(position.Liabilities))
+			profitLoss := finalValue.Sub(initialValue)
+			var profitLossPerc math.LegacyDec
+			if !initialValue.IsZero() {
+				profitLossPerc = profitLoss.Quo(initialValue).Mul(math.LegacyNewDec(100))
+			}
+
+			indexer.QueueEvent(ctx, "/elys-event/perpetual/liquidation", indexerPerpetualTypes.ClosePositionEvent{
+				Address: position.Address,
+				ID:      position.Id,
+				Collateral: indexerTypes.Token{
+					Amount: position.Collateral.String(),
+					Denom:  position.CollateralAsset,
+				},
+				Custody: indexerTypes.Token{
+					Amount: position.Custody.String(),
+					Denom:  position.CustodyAsset,
+				},
+				Liabilities: indexerTypes.Token{
+					Amount: position.Liabilities.String(),
+					Denom:  position.LiabilitiesAsset,
+				},
+				Health:         position.MtpHealth.String(),
+				InitialValue:   initialValue.String(),
+				FinalValue:     finalValue.String(),
+				ProfitLoss:     profitLoss.String(),
+				ProfitLossPerc: profitLossPerc.String(),
+				OpenPrice:      position.OpenPrice.String(),
+				Position:       position.Position.String(),
+			}, []string{position.Address})
+
+			/* End of kwak-indexer node implementation*/
+			/* *************************************************************************** */
+
 			ctx.EventManager().EmitEvent(sdk.NewEvent(types.EventClosePositions,
 				sdk.NewAttribute("address", position.Address),
 				sdk.NewAttribute("id", strconv.FormatUint(position.Id, 10)),
@@ -68,6 +152,42 @@ func (k msgServer) ClosePositions(goCtx context.Context, msg *types.MsgClosePosi
 			// Add log about error or not closed
 			closeLog = append(closeLog, fmt.Sprintf("Position: Address:%s Id:%d cannot be liquidated due to err: %s", position.Address, position.Id, err.Error()))
 		} else {
+			/* *************************************************************************** */
+			/* Start of kwak-indexer node implementation*/
+			initialValue := math.LegacyNewDecFromInt(position.Collateral)
+			// For perpetual positions, we calculate final value based on custody and liabilities
+			finalValue := math.LegacyNewDecFromInt(position.Custody.Sub(position.Liabilities))
+			profitLoss := finalValue.Sub(initialValue)
+			var profitLossPerc math.LegacyDec
+			if !initialValue.IsZero() {
+				profitLossPerc = profitLoss.Quo(initialValue).Mul(math.LegacyNewDec(100))
+			}
+
+			indexer.QueueEvent(ctx, "/elys-event/perpetual/stop-loss", indexerPerpetualTypes.StopLossEvent{
+				Address:  position.Address,
+				ID:       position.Id,
+				Position: position.Position.String(),
+				Collateral: indexerTypes.Token{
+					Amount: position.Collateral.String(),
+					Denom:  position.CollateralAsset,
+				},
+				Custody: indexerTypes.Token{
+					Amount: position.Custody.String(),
+					Denom:  position.CustodyAsset,
+				},
+				Liabilities: indexerTypes.Token{
+					Amount: position.Liabilities.String(),
+					Denom:  position.LiabilitiesAsset,
+				},
+				StopLossPrice:  position.StopLossPrice.String(),
+				OpenPrice:      position.OpenPrice.String(),
+				Health:         position.MtpHealth.String(),
+				ProfitLoss:     profitLoss.String(),
+				ProfitLossPerc: profitLossPerc.String(),
+			}, []string{position.Address})
+			/* End of kwak-indexer node implementation*/
+			/* *************************************************************************** */
+
 			ctx.EventManager().EmitEvent(sdk.NewEvent(types.EventClosePositions,
 				sdk.NewAttribute("address", position.Address),
 				sdk.NewAttribute("id", strconv.FormatUint(position.Id, 10)),
@@ -94,6 +214,46 @@ func (k msgServer) ClosePositions(goCtx context.Context, msg *types.MsgClosePosi
 			// Add log about error or not closed
 			takeProfitLog = append(takeProfitLog, fmt.Sprintf("Position: Address:%s Id:%d cannot be liquidated due to err: %s", position.Address, position.Id, err.Error()))
 		} else {
+			/* *************************************************************************** */
+			/* Start of kwak-indexer node implementation*/
+			initialValue := math.LegacyNewDecFromInt(position.Collateral)
+
+			// For perpetual positions, we calculate final value based on custody and liabilities
+			finalValue := math.LegacyNewDecFromInt(position.Custody.Sub(position.Liabilities))
+			profitLoss := finalValue.Sub(initialValue)
+			var profitLossPerc math.LegacyDec
+			if !initialValue.IsZero() {
+				profitLossPerc = profitLoss.Quo(initialValue).Mul(math.LegacyNewDec(100))
+			}
+
+			indexer.QueueEvent(ctx, "/elys-event/perpetual/take-profit", indexerPerpetualTypes.TakeProfitEvent{
+				Address:  position.Address,
+				ID:       position.Id,
+				Position: position.Position.String(),
+				Collateral: indexerTypes.Token{
+					Amount: position.Collateral.String(),
+					Denom:  position.CollateralAsset,
+				},
+				Custody: indexerTypes.Token{
+					Amount: position.Custody.String(),
+					Denom:  position.CustodyAsset,
+				},
+				Liabilities: indexerTypes.Token{
+					Amount: position.Liabilities.String(),
+					Denom:  position.LiabilitiesAsset,
+				},
+				TakeProfitPrice:        position.TakeProfitPrice.String(),
+				TakeProfitLiabilities:  position.TakeProfitLiabilities.String(),
+				TakeProfitCustody:      position.TakeProfitCustody.String(),
+				TakeProfitBorrowFactor: position.TakeProfitBorrowFactor.String(),
+				OpenPrice:              position.OpenPrice.String(),
+				Health:                 position.MtpHealth.String(),
+				ProfitLoss:             profitLoss.String(),
+				ProfitLossPerc:         profitLossPerc.String(),
+			}, []string{position.Address})
+			/* End of kwak-indexer node implementation*/
+			/* *************************************************************************** */
+
 			ctx.EventManager().EmitEvent(sdk.NewEvent(types.EventClosePositions,
 				sdk.NewAttribute("address", position.Address),
 				sdk.NewAttribute("id", strconv.FormatUint(position.Id, 10)),
diff --git a/x/perpetual/keeper/msg_server_open.go b/x/perpetual/keeper/msg_server_open.go
index 3da4a13b..2e2e07e7 100644
--- a/x/perpetual/keeper/msg_server_open.go
+++ b/x/perpetual/keeper/msg_server_open.go
@@ -10,5 +10,10 @@ import (
 func (k msgServer) Open(goCtx context.Context, msg *types.MsgOpen) (*types.MsgOpenResponse, error) {
 	ctx := sdk.UnwrapSDKContext(goCtx)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// ! Close is handled in the function below
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
 	return k.Keeper.Open(ctx, msg)
 }
diff --git a/x/perpetual/keeper/msg_server_update_stop_loss.go b/x/perpetual/keeper/msg_server_update_stop_loss.go
index b2000c8e..c2251992 100644
--- a/x/perpetual/keeper/msg_server_update_stop_loss.go
+++ b/x/perpetual/keeper/msg_server_update_stop_loss.go
@@ -5,6 +5,14 @@ import (
 	"fmt"
 	"strconv"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerPerpetualTypes "github.com/elys-network/elys/indexer/txs/perpetual"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/perpetual/types"
@@ -55,5 +63,23 @@ func (k msgServer) UpdateStopLoss(goCtx context.Context, msg *types.MsgUpdateSto
 	)
 	ctx.EventManager().EmitEvent(event)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// Queue the transaction
+	indexer.QueueTransaction(ctx, indexerPerpetualTypes.MsgUpdateStopLoss{
+		Creator: msg.Creator,
+		ID:      msg.Id,
+		Price:   msg.Price.String(),
+	}, []string{msg.Creator})
+
+	// Queue the event
+	indexer.QueueEvent(ctx, "/elys-event/perpetual/update/stop-loss", indexerPerpetualTypes.UpdateStopLossEvent{
+		ID:       mtp.Id,
+		Address:  mtp.Address,
+		StopLoss: mtp.StopLossPrice.String(),
+	}, []string{mtp.Address})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateStopLossResponse{}, nil
 }
diff --git a/x/perpetual/keeper/msg_server_update_take_profit_price.go b/x/perpetual/keeper/msg_server_update_take_profit_price.go
index d1c1ff8d..1e66f72a 100644
--- a/x/perpetual/keeper/msg_server_update_take_profit_price.go
+++ b/x/perpetual/keeper/msg_server_update_take_profit_price.go
@@ -5,6 +5,15 @@ import (
 	"fmt"
 	"strconv"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerPerpetualTypes "github.com/elys-network/elys/indexer/txs/perpetual"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/perpetual/types"
@@ -91,5 +100,22 @@ func (k msgServer) UpdateTakeProfitPrice(goCtx context.Context, msg *types.MsgUp
 	)
 	ctx.EventManager().EmitEvent(event)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerPerpetualTypes.MsgUpdateTakeProfitPrice{
+		Creator:  msg.Creator,
+		ID:       msg.Id,
+		Price:    msg.Price.String(),
+		Position: mtp.Position.String(),
+		Collateral: indexerTypes.Token{
+			Amount: mtp.Collateral.String(),
+			Denom:  mtp.CollateralAsset,
+		},
+		OpenPrice:    mtp.OpenPrice.String(),
+		CurrentPrice: tradingAssetPrice.String(),
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateTakeProfitPriceResponse{}, nil
 }
diff --git a/x/perpetual/keeper/open.go b/x/perpetual/keeper/open.go
index 5e7cdcda..bf147e60 100644
--- a/x/perpetual/keeper/open.go
+++ b/x/perpetual/keeper/open.go
@@ -3,6 +3,15 @@ package keeper
 import (
 	"fmt"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerPerpetualTypes "github.com/elys-network/elys/indexer/txs/perpetual"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	"cosmossdk.io/math"
 	sdk "github.com/cosmos/cosmos-sdk/types"
@@ -132,6 +141,31 @@ func (k Keeper) Open(ctx sdk.Context, msg *types.MsgOpen) (*types.MsgOpenRespons
 			return nil, err
 		}
 	}
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// Get the open price for indexing
+	openPrice, err := k.GetAssetPrice(ctx, msg.TradingAsset)
+	if err != nil {
+		return nil, err
+	}
+
+	indexer.QueueTransaction(ctx, indexerPerpetualTypes.MsgOpen{
+		Creator:      msg.Creator,
+		Position:     indexerPerpetualTypes.Position(msg.Position),
+		Leverage:     msg.Leverage.String(),
+		TradingAsset: msg.TradingAsset,
+		Collateral: indexerTypes.Token{
+			Amount: msg.Collateral.Amount.String(),
+			Denom:  msg.Collateral.Denom,
+		},
+		TakeProfitPrice: msg.TakeProfitPrice.String(),
+		StopLossPrice:   msg.StopLossPrice.String(),
+		PoolID:          msg.PoolId,
+		PositionID:      mtp.Id,
+		OpenPrice:       openPrice.String(),
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
 
 	return &types.MsgOpenResponse{
 		Id: mtp.Id,
diff --git a/x/perpetual/module_simulation.go b/x/perpetual/module_simulation.go
index 9b11c8ac..6c26714f 100644
--- a/x/perpetual/module_simulation.go
+++ b/x/perpetual/module_simulation.go
@@ -45,10 +45,6 @@ const (
 	// TODO: Determine the simulation weight value
 	defaultWeightMsgAddCollateral int = 100
 
-	opWeightMsgBrokerAddCollateral = "op_weight_msg_broker_add_collateral"
-	// TODO: Determine the simulation weight value
-	defaultWeightMsgBrokerAddCollateral int = 100
-
 	opWeightMsgClosePositions = "op_weight_msg_close_positions"
 	// TODO: Determine the simulation weight value
 	defaultWeightMsgClosePositions int = 100
diff --git a/x/perpetual/spec/05_protobuf_definitions.md b/x/perpetual/spec/05_protobuf_definitions.md
index 43f54143..bbea6667 100644
--- a/x/perpetual/spec/05_protobuf_definitions.md
+++ b/x/perpetual/spec/05_protobuf_definitions.md
@@ -573,9 +573,7 @@ The `Msg` service defines the gRPC transaction service for the perpetual module.
 ### Msg Service
 
 - **Open**: Opens a new position.
-- **BrokerOpen**: Broker opens a new position.
 - **Close**: Closes an existing position.
-- **BrokerClose**: Broker closes an existing position.
 - **UpdateParams**: Updates the module parameters.
 - **Whitelist**: Adds an address to the whitelist.
 - **Dewhitelist**: Removes an address from the whitelist.
@@ -618,46 +616,6 @@ message MsgOpenResponse {
 }
 ```
 
-### MsgBrokerOpen
-
-**Request**:
-
-- **string creator**: Creator of the message.
-- **Position position**: Position to open.
-- **string leverage**: Leverage for the position.
-- **string trading_asset**: Trading asset.
-- **cosmos.base.v1beta1.Coin collateral**: Collateral.
-- **string take_profit_price**: Take profit price.
-- **string owner**: Owner of the position.
-
-**Response**:
-
-- **uint64 id**: ID of the opened position.
-
-```proto
-message MsgBrokerOpen {
-  string creator = 1;
-  Position position = 2;
-  string leverage = 3 [
-    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
-    (gogoproto.nullable) = false
-  ];
-  string trading_asset = 4;
-  cosmos.base.v1beta1.Coin collateral = 5 [
-    (gogoproto.nullable) = false
-  ];
-  string take_profit_price = 6 [
-    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
-    (gogoproto.nullable) = false
-  ];
-  string owner = 7;
-}
-
-message MsgOpenResponse {
-  uint64 id = 1;
-}
-```
-
 ### MsgClose
 
 **Request**:
@@ -690,40 +648,6 @@ message MsgCloseResponse {
 }
 ```
 
-### MsgBrokerClose
-
-**Request**:
-
-- **string creator**: Creator of the message.
-- **uint64 id**: ID of the position to close.
-- **string amount**: Amount to close.
-- **string owner**: Owner of the position.
-
-**Response**:
-
-- **uint64 id**: ID of the closed position.
-- **string amount**: Closed amount.
-
-```proto
-message MsgBrokerClose {
-  string creator = 1;
-  uint64 id = 2;
-  string amount = 3 [
-    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
-    (gogoproto.nullable) = false
-  ];
-  string owner = 4;
-}
-
-message MsgCloseResponse {
-  uint64 id = 1;
-  string amount = 2 [
-    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
-    (gogoproto.nullable) = false
-  ];
-}
-```
-
 ### MsgUpdateParams
 
 **Request**:
diff --git a/x/perpetual/types/query.pb.go b/x/perpetual/types/query.pb.go
index 23f70dd5..8d7f051c 100644
--- a/x/perpetual/types/query.pb.go
+++ b/x/perpetual/types/query.pb.go
@@ -2142,6 +2142,7 @@ func _Query_CloseEstimation_Handler(srv interface{}, ctx context.Context, dec fu
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.perpetual.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/perpetual/types/tx.pb.go b/x/perpetual/types/tx.pb.go
index 8e741fce..4809a5fd 100644
--- a/x/perpetual/types/tx.pb.go
+++ b/x/perpetual/types/tx.pb.go
@@ -1185,6 +1185,7 @@ func _Msg_UpdateTakeProfitPrice_Handler(srv interface{}, ctx context.Context, de
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.perpetual.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/stablestake/keeper/msg_server_bond.go b/x/stablestake/keeper/msg_server_bond.go
index 816e1138..66d21cf9 100644
--- a/x/stablestake/keeper/msg_server_bond.go
+++ b/x/stablestake/keeper/msg_server_bond.go
@@ -2,8 +2,17 @@ package keeper
 
 import (
 	"context"
+
 	sdkmath "cosmossdk.io/math"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerStableStakeTypes "github.com/elys-network/elys/indexer/txs/stablestake"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"
 	assetprofiletypes "github.com/elys-network/elys/x/assetprofile/types"
@@ -80,6 +89,19 @@ func (k msgServer) Bond(goCtx context.Context, msg *types.MsgBond) (*types.MsgBo
 	params.TotalValue = params.TotalValue.Add(msg.Amount)
 	k.SetParams(ctx, params)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerStableStakeTypes.MsgBond{
+		Creator:        msg.Creator,
+		Amount:         msg.Amount.String(),
+		DepositDenom:   depositDenom,
+		ShareAmount:    shareAmount.String(),
+		ShareDenom:     shareDenom,
+		RedemptionRate: redemptionRate.String(),
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	if k.hooks != nil {
 		err = k.hooks.AfterBond(ctx, creator, shareAmount)
 		if err != nil {
diff --git a/x/stablestake/keeper/msg_server_unbond.go b/x/stablestake/keeper/msg_server_unbond.go
index 69bd0c2b..312d72e3 100644
--- a/x/stablestake/keeper/msg_server_unbond.go
+++ b/x/stablestake/keeper/msg_server_unbond.go
@@ -2,6 +2,16 @@ package keeper
 
 import (
 	"context"
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerStableStakeTypes "github.com/elys-network/elys/indexer/txs/stablestake"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/stablestake/types"
 )
@@ -45,6 +55,21 @@ func (k msgServer) Unbond(goCtx context.Context, msg *types.MsgUnbond) (*types.M
 	params.TotalValue = params.TotalValue.Sub(redemptionAmount)
 	k.SetParams(ctx, params)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerStableStakeTypes.MsgUnbond{
+		Creator:        msg.Creator,
+		Amount:         msg.Amount.String(),
+		ShareDenom:     shareDenom,
+		RedemptionRate: redemptionRate.String(),
+		RedemptionToken: indexerTypes.Token{
+			Amount: redemptionAmount.String(),
+			Denom:  depositDenom,
+		},
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	if k.hooks != nil {
 		err = k.hooks.AfterUnbond(ctx, creator, msg.Amount)
 		if err != nil {
diff --git a/x/stablestake/keeper/msg_server_update_params.go b/x/stablestake/keeper/msg_server_update_params.go
index b15568d3..94d218dd 100644
--- a/x/stablestake/keeper/msg_server_update_params.go
+++ b/x/stablestake/keeper/msg_server_update_params.go
@@ -3,6 +3,14 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerStableStakeTypes "github.com/elys-network/elys/indexer/txs/stablestake"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	govtypes "github.com/cosmos/cosmos-sdk/x/gov/types"
@@ -24,5 +32,26 @@ func (k msgServer) UpdateParams(goCtx context.Context, msg *types.MsgUpdateParam
 	// store params
 	k.SetParams(ctx, *msg.Params)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerStableStakeTypes.MsgUpdateParams{
+		Authority: msg.Authority,
+		Params: indexerStableStakeTypes.Params{
+			DepositDenom:         msg.Params.DepositDenom,
+			RedemptionRate:       msg.Params.RedemptionRate.String(),
+			EpochLength:          msg.Params.EpochLength,
+			InterestRate:         msg.Params.InterestRate.String(),
+			InterestRateMax:      msg.Params.InterestRateMax.String(),
+			InterestRateMin:      msg.Params.InterestRateMin.String(),
+			InterestRateIncrease: msg.Params.InterestRateIncrease.String(),
+			InterestRateDecrease: msg.Params.InterestRateDecrease.String(),
+			HealthGainFactor:     msg.Params.HealthGainFactor.String(),
+			TotalValue:           msg.Params.TotalValue.String(),
+			MaxLeverageRatio:     msg.Params.MaxLeverageRatio.String(),
+		},
+	}, []string{msg.Authority})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateParamsResponse{}, nil
 }
diff --git a/x/stablestake/types/query.pb.go b/x/stablestake/types/query.pb.go
index a6a256c5..4c000b8f 100644
--- a/x/stablestake/types/query.pb.go
+++ b/x/stablestake/types/query.pb.go
@@ -340,6 +340,7 @@ func _Query_BorrowRatio_Handler(srv interface{}, ctx context.Context, dec func(i
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.stablestake.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/stablestake/types/tx.pb.go b/x/stablestake/types/tx.pb.go
index 97f64099..8c925923 100644
--- a/x/stablestake/types/tx.pb.go
+++ b/x/stablestake/types/tx.pb.go
@@ -463,6 +463,7 @@ func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(in
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.stablestake.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/tier/types/query.pb.go b/x/tier/types/query.pb.go
index 65ae543b..d278108c 100644
--- a/x/tier/types/query.pb.go
+++ b/x/tier/types/query.pb.go
@@ -1750,6 +1750,7 @@ func _Query_GetUsersPoolData_Handler(srv interface{}, ctx context.Context, dec f
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.tier.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/tier/types/tx.pb.go b/x/tier/types/tx.pb.go
index 36df4574..3f8f67e9 100644
--- a/x/tier/types/tx.pb.go
+++ b/x/tier/types/tx.pb.go
@@ -216,6 +216,7 @@ func _Msg_SetPortfolio_Handler(srv interface{}, ctx context.Context, dec func(in
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.tier.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/tokenomics/types/query.pb.go b/x/tokenomics/types/query.pb.go
index 0c048722..90d2fe16 100644
--- a/x/tokenomics/types/query.pb.go
+++ b/x/tokenomics/types/query.pb.go
@@ -874,6 +874,7 @@ func _Query_TimeBasedInflationAll_Handler(srv interface{}, ctx context.Context,
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.tokenomics.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/tokenomics/types/tx.pb.go b/x/tokenomics/types/tx.pb.go
index 0667a446..441b60fa 100644
--- a/x/tokenomics/types/tx.pb.go
+++ b/x/tokenomics/types/tx.pb.go
@@ -1198,6 +1198,7 @@ func _Msg_DeleteTimeBasedInflation_Handler(srv interface{}, ctx context.Context,
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.tokenomics.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/tradeshield/keeper/msg_server_execute_orders.go b/x/tradeshield/keeper/msg_server_execute_orders.go
index a18b0c0a..0fb35d61 100644
--- a/x/tradeshield/keeper/msg_server_execute_orders.go
+++ b/x/tradeshield/keeper/msg_server_execute_orders.go
@@ -5,6 +5,14 @@ import (
 	"fmt"
 	"strings"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerTradeshieldTypes "github.com/elys-network/elys/indexer/txs/tradeshield"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	"github.com/elys-network/elys/x/tradeshield/types"
 )
@@ -12,6 +20,13 @@ import (
 func (k msgServer) ExecuteOrders(goCtx context.Context, msg *types.MsgExecuteOrders) (*types.MsgExecuteOrdersResponse, error) {
 	ctx := sdk.UnwrapSDKContext(goCtx)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	spotExecutionLogs := []indexerTradeshieldTypes.OrderExecutionLog{}
+	perpExecutionLogs := []indexerTradeshieldTypes.OrderExecutionLog{}
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	spotLog := []string{}
 	// loop through the spot orders and execute them
 	for _, spotOrderId := range msg.SpotOrderIds {
@@ -26,30 +41,40 @@ func (k msgServer) ExecuteOrders(goCtx context.Context, msg *types.MsgExecuteOrd
 		// dispatch based on the order type
 		switch spotOrder.OrderType {
 		case types.SpotOrderType_STOPLOSS:
-			// execute the stop loss order
 			err = k.ExecuteStopLossOrder(ctx, spotOrder)
 		case types.SpotOrderType_LIMITSELL:
-			// execute the limit sell order
 			err = k.ExecuteLimitSellOrder(ctx, spotOrder)
 		case types.SpotOrderType_LIMITBUY:
-			// execute the limit buy order
 			err = k.ExecuteLimitBuyOrder(ctx, spotOrder)
 		case types.SpotOrderType_MARKETBUY:
-			// execute the market buy order
 			err = k.ExecuteMarketBuyOrder(ctx, spotOrder)
 		}
 
-		// log the error if any
 		if err != nil {
-			// Add log about error or not executed
-			spotLog = append(spotLog, fmt.Sprintf("Spot order Id:%d cannot be executed due to err: %s", spotOrderId, err.Error()))
+			errLog := fmt.Sprintf("Spot order Id:%d cannot be executed due to err: %s", spotOrderId, err.Error())
+			spotLog = append(spotLog, errLog)
+			/* *************************************************************************** */
+			/* Start of kwak-indexer node implementation*/
+			spotExecutionLogs = append(spotExecutionLogs, indexerTradeshieldTypes.OrderExecutionLog{
+				OrderID: spotOrderId,
+				Error:   err.Error(),
+			})
+			/* End of kwak-indexer node implementation*/
+			/* *************************************************************************** */
+		} else {
+			/* *************************************************************************** */
+			/* Start of kwak-indexer node implementation*/
+			spotExecutionLogs = append(spotExecutionLogs, indexerTradeshieldTypes.OrderExecutionLog{
+				OrderID: spotOrderId,
+			})
+			/* End of kwak-indexer node implementation*/
+			/* *************************************************************************** */
 		}
 	}
 
 	perpLog := []string{}
 	// loop through the perpetual orders and execute them
 	for _, perpetualOrderId := range msg.PerpetualOrderIds {
-		// get the perpetual order
 		perpetualOrder, found := k.GetPendingPerpetualOrder(ctx, perpetualOrderId)
 		if !found {
 			return nil, types.ErrPerpetualOrderNotFound
@@ -57,22 +82,30 @@ func (k msgServer) ExecuteOrders(goCtx context.Context, msg *types.MsgExecuteOrd
 
 		var err error
 
-		// dispatch based on the order type
 		switch perpetualOrder.PerpetualOrderType {
 		case types.PerpetualOrderType_LIMITOPEN:
-			// execute the limit open order
 			err = k.ExecuteLimitOpenOrder(ctx, perpetualOrder)
-			// Disable for v1
-			// case types.PerpetualOrderType_LIMITCLOSE:
-			// 	// execute the limit close order
-			// 	err = k.ExecuteLimitCloseOrder(ctx, perpetualOrder)
 		}
 
-		// return the error if any
-		// log the error if any
 		if err != nil {
-			// Add log about error or not executed
-			perpLog = append(perpLog, fmt.Sprintf("Perpetual order Id:%d cannot be executed due to err: %s", perpetualOrderId, err.Error()))
+			errLog := fmt.Sprintf("Perpetual order Id:%d cannot be executed due to err: %s", perpetualOrderId, err.Error())
+			perpLog = append(perpLog, errLog)
+			/* *************************************************************************** */
+			/* Start of kwak-indexer node implementation*/
+			perpExecutionLogs = append(perpExecutionLogs, indexerTradeshieldTypes.OrderExecutionLog{
+				OrderID: perpetualOrderId,
+				Error:   err.Error(),
+			})
+			/* End of kwak-indexer node implementation*/
+			/* *************************************************************************** */
+		} else {
+			/* *************************************************************************** */
+			/* Start of kwak-indexer node implementation*/
+			perpExecutionLogs = append(perpExecutionLogs, indexerTradeshieldTypes.OrderExecutionLog{
+				OrderID: perpetualOrderId,
+			})
+			/* End of kwak-indexer node implementation*/
+			/* *************************************************************************** */
 		}
 	}
 
@@ -81,5 +114,17 @@ func (k msgServer) ExecuteOrders(goCtx context.Context, msg *types.MsgExecuteOrd
 		sdk.NewAttribute("perpetual_orders", strings.Join(perpLog, "\n")),
 	))
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerTradeshieldTypes.MsgExecuteOrders{
+		Creator:           msg.Creator,
+		SpotOrderIds:      msg.SpotOrderIds,
+		PerpetualOrderIds: msg.PerpetualOrderIds,
+		SpotLogs:          spotExecutionLogs,
+		PerpetualLogs:     perpExecutionLogs,
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgExecuteOrdersResponse{}, nil
 }
diff --git a/x/tradeshield/keeper/msg_server_perpetual_order.go b/x/tradeshield/keeper/msg_server_perpetual_order.go
index 6049536b..9760c9cc 100644
--- a/x/tradeshield/keeper/msg_server_perpetual_order.go
+++ b/x/tradeshield/keeper/msg_server_perpetual_order.go
@@ -4,6 +4,15 @@ import (
 	"context"
 	"fmt"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerTradeshieldTypes "github.com/elys-network/elys/indexer/txs/tradeshield"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 
 	sdk "github.com/cosmos/cosmos-sdk/types"
@@ -94,6 +103,29 @@ func (k msgServer) CreatePerpetualOpenOrder(goCtx context.Context, msg *types.Ms
 		return nil, err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerTradeshieldTypes.MsgCreatePerpetualOpenOrder{
+		OwnerAddress: msg.OwnerAddress,
+		TriggerPrice: indexerTradeshieldTypes.TriggerPrice{
+			TradingAssetDenom: msg.TriggerPrice.TradingAssetDenom,
+			Rate:              msg.TriggerPrice.Rate.String(),
+		},
+		Collateral: indexerTypes.Token{
+			Amount: msg.Collateral.Amount.String(),
+			Denom:  msg.Collateral.Denom,
+		},
+		TradingAsset:    msg.TradingAsset,
+		Position:        int32(msg.Position),
+		Leverage:        msg.Leverage.String(),
+		TakeProfitPrice: msg.TakeProfitPrice.String(),
+		StopLossPrice:   msg.StopLossPrice.String(),
+		PoolID:          msg.PoolId,
+		OrderID:         id,
+	}, []string{msg.OwnerAddress})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgCreatePerpetualOpenOrderResponse{
 		OrderId: pendingPerpetualOrder.OrderId,
 	}, nil
@@ -162,6 +194,19 @@ func (k msgServer) UpdatePerpetualOrder(goCtx context.Context, msg *types.MsgUpd
 	order.TriggerPrice = msg.TriggerPrice
 	k.SetPendingPerpetualOrder(ctx, order)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerTradeshieldTypes.MsgUpdatePerpetualOrder{
+		OwnerAddress: msg.OwnerAddress,
+		OrderID:      msg.OrderId,
+		TriggerPrice: indexerTradeshieldTypes.TriggerPrice{
+			TradingAssetDenom: msg.TriggerPrice.TradingAssetDenom,
+			Rate:              msg.TriggerPrice.Rate.String(),
+		},
+	}, []string{msg.OwnerAddress})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdatePerpetualOrderResponse{}, nil
 }
 
@@ -189,6 +234,19 @@ func (k msgServer) CancelPerpetualOrder(goCtx context.Context, msg *types.MsgCan
 	k.RemovePendingPerpetualOrder(ctx, msg.OrderId)
 	types.EmitCancelPerpetualOrderEvent(ctx, order)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerTradeshieldTypes.MsgCancelPerpetualOrder{
+		OwnerAddress: msg.OwnerAddress,
+		OrderID:      msg.OrderId,
+		Collateral: indexerTypes.Token{
+			Amount: order.Collateral.Amount.String(),
+			Denom:  order.Collateral.Denom,
+		},
+	}, []string{msg.OwnerAddress})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgCancelPerpetualOrderResponse{
 		OrderId: order.OrderId,
 	}, nil
@@ -198,6 +256,17 @@ func (k msgServer) CancelPerpetualOrders(goCtx context.Context, msg *types.MsgCa
 	if len(msg.OrderIds) == 0 {
 		return nil, types.ErrSizeZero
 	}
+
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	ctx := sdk.UnwrapSDKContext(goCtx)
+	indexer.QueueTransaction(ctx, indexerTradeshieldTypes.MsgCancelPerpetualOrders{
+		OwnerAddress: msg.OwnerAddress,
+		OrderIds:     msg.OrderIds,
+	}, []string{msg.OwnerAddress})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	// loop through the spot orders and cancel them
 	for _, orderId := range msg.OrderIds {
 		_, err := k.CancelPerpetualOrder(goCtx, &types.MsgCancelPerpetualOrder{
diff --git a/x/tradeshield/keeper/msg_server_spot_order.go b/x/tradeshield/keeper/msg_server_spot_order.go
index 5e8fd825..c2ad6015 100644
--- a/x/tradeshield/keeper/msg_server_spot_order.go
+++ b/x/tradeshield/keeper/msg_server_spot_order.go
@@ -5,6 +5,15 @@ import (
 
 	errorsmod "cosmossdk.io/errors"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerTradeShieldTypes "github.com/elys-network/elys/indexer/txs/tradeshield"
+	"github.com/elys-network/elys/indexer/txs/tradeshield/common"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
 	"github.com/elys-network/elys/x/tradeshield/types"
@@ -48,6 +57,28 @@ func (k msgServer) CreateSpotOrder(goCtx context.Context, msg *types.MsgCreateSp
 		return nil, err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerTradeShieldTypes.MsgCreateSpotOrder{
+		BaseOrder: common.BaseOrder{
+			OrderID:      id,
+			OwnerAddress: msg.OwnerAddress,
+			OrderPrice: common.OrderPrice{
+				BaseDenom:  msg.OrderPrice.BaseDenom,
+				QuoteDenom: msg.OrderPrice.QuoteDenom,
+				Rate:       msg.OrderPrice.Rate.String(),
+			},
+			OrderAmount: indexerTypes.Token{
+				Amount: msg.OrderAmount.Amount.String(),
+				Denom:  msg.OrderAmount.Denom,
+			},
+		},
+		OrderType:        common.OrderType(msg.OrderType),
+		OrderTargetDenom: msg.OrderTargetDenom,
+	}, []string{msg.OwnerAddress})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	// return the order id
 	return &types.MsgCreateSpotOrderResponse{
 		OrderId: pendingSpotOrder.OrderId,
@@ -72,6 +103,20 @@ func (k msgServer) UpdateSpotOrder(goCtx context.Context, msg *types.MsgUpdateSp
 	order.OrderPrice = msg.OrderPrice
 	k.SetPendingSpotOrder(ctx, order)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerTradeShieldTypes.MsgUpdateSpotOrder{
+		OwnerAddress: msg.OwnerAddress,
+		OrderID:      msg.OrderId,
+		OrderPrice: common.OrderPrice{
+			BaseDenom:  msg.OrderPrice.BaseDenom,
+			QuoteDenom: msg.OrderPrice.QuoteDenom,
+			Rate:       msg.OrderPrice.Rate.String(),
+		},
+	}, []string{msg.OwnerAddress})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateSpotOrderResponse{}, nil
 }
 
@@ -98,6 +143,15 @@ func (k msgServer) CancelSpotOrder(goCtx context.Context, msg *types.MsgCancelSp
 	k.RemovePendingSpotOrder(ctx, msg.OrderId)
 	types.EmitCloseSpotOrderEvent(ctx, spotOrder)
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerTradeShieldTypes.MsgCancelSpotOrder{
+		OwnerAddress: msg.OwnerAddress,
+		OrderId:      msg.OrderId,
+	}, []string{msg.OwnerAddress})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgCancelSpotOrderResponse{
 		OrderId: spotOrder.OrderId,
 	}, nil
@@ -118,5 +172,15 @@ func (k msgServer) CancelSpotOrders(goCtx context.Context, msg *types.MsgCancelS
 		}
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	ctx := sdk.UnwrapSDKContext(goCtx)
+	indexer.QueueTransaction(ctx, indexerTradeShieldTypes.MsgCancelSpotOrders{
+		Creator:      msg.Creator,
+		SpotOrderIds: msg.SpotOrderIds,
+	}, []string{msg.Creator})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgCancelSpotOrdersResponse{}, nil
 }
diff --git a/x/tradeshield/keeper/msg_server_update_params.go b/x/tradeshield/keeper/msg_server_update_params.go
index 03abf960..bbfbae44 100644
--- a/x/tradeshield/keeper/msg_server_update_params.go
+++ b/x/tradeshield/keeper/msg_server_update_params.go
@@ -3,6 +3,15 @@ package keeper
 import (
 	"context"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerTradeShieldTypes "github.com/elys-network/elys/indexer/txs/tradeshield"
+	commonTradeShieldIndxer "github.com/elys-network/elys/indexer/txs/tradeshield/common"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdk "github.com/cosmos/cosmos-sdk/types"
 	govtypes "github.com/cosmos/cosmos-sdk/x/gov/types"
@@ -21,5 +30,26 @@ func (k msgServer) UpdateParams(goCtx context.Context, msg *types.MsgUpdateParam
 		return nil, err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer.QueueTransaction(ctx, indexerTradeShieldTypes.MsgUpdateParams{
+		Authority: msg.Authority,
+		Params: commonTradeShieldIndxer.Params{
+			MarketOrderEnabled:   msg.Params.MarketOrderEnabled,
+			StakeEnabled:         msg.Params.StakeEnabled,
+			ProcessOrdersEnabled: msg.Params.ProcessOrdersEnabled,
+			SwapEnabled:          msg.Params.SwapEnabled,
+			PerpetualEnabled:     msg.Params.PerpetualEnabled,
+			RewardEnabled:        msg.Params.RewardEnabled,
+			LeverageEnabled:      msg.Params.LeverageEnabled,
+			LimitProcessOrder:    msg.Params.LimitProcessOrder,
+			RewardPercentage:     msg.Params.RewardPercentage.String(),
+			MarginError:          msg.Params.MarginError.String(),
+			MinimumDeposit:       msg.Params.MinimumDeposit.String(),
+		},
+	}, []string{msg.Authority})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return &types.MsgUpdateParamsResponse{}, nil
 }
diff --git a/x/tradeshield/keeper/pending_spot_order.go b/x/tradeshield/keeper/pending_spot_order.go
index 4a979004..1ad62dfa 100644
--- a/x/tradeshield/keeper/pending_spot_order.go
+++ b/x/tradeshield/keeper/pending_spot_order.go
@@ -4,6 +4,16 @@ import (
 	"encoding/binary"
 	"math"
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	indexer "github.com/elys-network/elys/indexer"
+	indexerTradeshieldTypes "github.com/elys-network/elys/indexer/txs/tradeshield"
+	"github.com/elys-network/elys/indexer/txs/tradeshield/common"
+	indexerTypes "github.com/elys-network/elys/indexer/types"
+
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	errorsmod "cosmossdk.io/errors"
 	sdkmath "cosmossdk.io/math"
 	storetypes "cosmossdk.io/store/types"
@@ -204,8 +214,12 @@ func (k Keeper) ExecuteStopLossOrder(ctx sdk.Context, order types.SpotOrder) err
 		return err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// ! Needed to change SwapByDenom so we can get the outputs, thats why its included in here
+
 	// Swap the order amount with the target denom
-	_, err = k.amm.SwapByDenom(ctx, &ammtypes.MsgSwapByDenom{
+	swapRes, err := k.amm.SwapByDenom(ctx, &ammtypes.MsgSwapByDenom{
 		Sender:    order.OwnerAddress,
 		Recipient: order.OwnerAddress,
 		Amount:    order.OrderAmount,
@@ -217,6 +231,34 @@ func (k Keeper) ExecuteStopLossOrder(ctx sdk.Context, order types.SpotOrder) err
 		return err
 	}
 
+	indexer.QueueEvent(ctx, "/elys-event/tradeshield/stop-loss", indexerTradeshieldTypes.StopLossExecutionEvent{
+		BaseOrder: common.BaseOrder{
+			OrderID:      order.OrderId,
+			OwnerAddress: order.OwnerAddress,
+			OrderPrice: common.OrderPrice{
+				BaseDenom:  order.OrderPrice.BaseDenom,
+				QuoteDenom: order.OrderPrice.QuoteDenom,
+				Rate:       order.OrderPrice.Rate.String(),
+			},
+			OrderAmount: indexerTypes.Token{
+				Amount: order.OrderAmount.Amount.String(),
+				Denom:  order.OrderAmount.Denom,
+			},
+		},
+		SwapOutput: indexerTypes.Token{
+			Amount: swapRes.Amount.Amount.String(),
+			Denom:  swapRes.Amount.Denom,
+		},
+		MarketPrice: marketPrice.String(),
+		TargetDenom: order.OrderTargetDenom,
+		Date: common.OrderDate{
+			Height:    uint64(ctx.BlockHeight()),
+			Timestamp: uint64(ctx.BlockTime().Unix()),
+		},
+	}, []string{order.OwnerAddress})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	// Remove the order from the pending order list
 	k.RemovePendingSpotOrder(ctx, order.OrderId)
 
@@ -245,8 +287,12 @@ func (k Keeper) ExecuteLimitSellOrder(ctx sdk.Context, order types.SpotOrder) er
 		return err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// ! Needed to change SwapByDenom so we can get the outputs, thats why its included in here
+
 	// Swap the order amount with the target denom
-	_, err = k.amm.SwapByDenom(ctx, &ammtypes.MsgSwapByDenom{
+	swapRes, err := k.amm.SwapByDenom(ctx, &ammtypes.MsgSwapByDenom{
 		Sender:    order.OwnerAddress,
 		Recipient: order.OwnerAddress,
 		Amount:    order.OrderAmount,
@@ -257,6 +303,34 @@ func (k Keeper) ExecuteLimitSellOrder(ctx sdk.Context, order types.SpotOrder) er
 	if err != nil {
 		return err
 	}
+	// Queue the limit sell order execution event
+	indexer.QueueEvent(ctx, "/elys-event/tradeshield/limit-sell", indexerTradeshieldTypes.StopLossExecutionEvent{
+		BaseOrder: common.BaseOrder{
+			OrderID:      order.OrderId,
+			OwnerAddress: order.OwnerAddress,
+			OrderPrice: common.OrderPrice{
+				BaseDenom:  order.OrderPrice.BaseDenom,
+				QuoteDenom: order.OrderPrice.QuoteDenom,
+				Rate:       order.OrderPrice.Rate.String(),
+			},
+			OrderAmount: indexerTypes.Token{
+				Amount: order.OrderAmount.Amount.String(),
+				Denom:  order.OrderAmount.Denom,
+			},
+		},
+		SwapOutput: indexerTypes.Token{
+			Amount: swapRes.Amount.Amount.String(),
+			Denom:  swapRes.Amount.Denom,
+		},
+		MarketPrice: marketPrice.String(),
+		TargetDenom: order.OrderTargetDenom,
+		Date: common.OrderDate{
+			Height:    uint64(ctx.BlockHeight()),
+			Timestamp: uint64(ctx.BlockTime().Unix()),
+		},
+	}, []string{order.OwnerAddress})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
 
 	// Remove the order from the pending order list
 	k.RemovePendingSpotOrder(ctx, order.OrderId)
@@ -286,8 +360,11 @@ func (k Keeper) ExecuteLimitBuyOrder(ctx sdk.Context, order types.SpotOrder) err
 		return err
 	}
 
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// ! Needed to change SwapByDenom so we can get the outputs, thats why its included in here
 	// Swap the order amount with the target denom
-	_, err = k.amm.SwapByDenom(ctx, &ammtypes.MsgSwapByDenom{
+	swapRes, err := k.amm.SwapByDenom(ctx, &ammtypes.MsgSwapByDenom{
 		Sender:    order.OwnerAddress,
 		Recipient: order.OwnerAddress,
 		Amount:    order.OrderAmount,
@@ -298,6 +375,33 @@ func (k Keeper) ExecuteLimitBuyOrder(ctx sdk.Context, order types.SpotOrder) err
 	if err != nil {
 		return err
 	}
+	indexer.QueueEvent(ctx, "/elys-event/tradeshield/limit-buy", indexerTradeshieldTypes.LimitOrderExecutionEvent{
+		BaseOrder: common.BaseOrder{
+			OrderID:      order.OrderId,
+			OwnerAddress: order.OwnerAddress,
+			OrderPrice: common.OrderPrice{
+				BaseDenom:  order.OrderPrice.BaseDenom,
+				QuoteDenom: order.OrderPrice.QuoteDenom,
+				Rate:       order.OrderPrice.Rate.String(),
+			},
+			OrderAmount: indexerTypes.Token{
+				Amount: order.OrderAmount.Amount.String(),
+				Denom:  order.OrderAmount.Denom,
+			},
+		},
+		SwapOutput: indexerTypes.Token{
+			Amount: swapRes.Amount.Amount.String(),
+			Denom:  swapRes.Amount.Denom,
+		},
+		MarketPrice:      marketPrice.String(),
+		OrderTargetDenom: order.OrderTargetDenom,
+		Date: common.OrderDate{
+			Height:    uint64(ctx.BlockHeight()),
+			Timestamp: uint64(ctx.BlockTime().Unix()),
+		},
+	}, []string{order.OwnerAddress})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
 
 	// Remove the order from the pending order list
 	k.RemovePendingSpotOrder(ctx, order.OrderId)
@@ -307,8 +411,11 @@ func (k Keeper) ExecuteLimitBuyOrder(ctx sdk.Context, order types.SpotOrder) err
 
 // ExecuteMarketBuyOrder executes a market buy order
 func (k Keeper) ExecuteMarketBuyOrder(ctx sdk.Context, order types.SpotOrder) error {
+	/* *************************************************************************** */
+	/* Start of kwak-indexer node implementation*/
+	// ! Needed to change SwapByDenom so we can get the outputs, thats why its included in here
 	// Swap the order amount with the target denom
-	_, err := k.amm.SwapByDenom(ctx, &ammtypes.MsgSwapByDenom{
+	swapRes, err := k.amm.SwapByDenom(ctx, &ammtypes.MsgSwapByDenom{
 		Sender:    order.OwnerAddress,
 		Recipient: order.OwnerAddress,
 		Amount:    order.OrderAmount,
@@ -320,5 +427,32 @@ func (k Keeper) ExecuteMarketBuyOrder(ctx sdk.Context, order types.SpotOrder) er
 		return err
 	}
 
+	indexer.QueueEvent(ctx, "/elys-event/tradeshield/market-buy", indexerTradeshieldTypes.MarketOrderExecutionEvent{
+		BaseOrder: common.BaseOrder{
+			OrderID:      order.OrderId,
+			OwnerAddress: order.OwnerAddress,
+			OrderPrice: common.OrderPrice{
+				BaseDenom:  order.OrderPrice.BaseDenom,
+				QuoteDenom: order.OrderPrice.QuoteDenom,
+				Rate:       order.OrderPrice.Rate.String(),
+			},
+			OrderAmount: indexerTypes.Token{
+				Amount: order.OrderAmount.Amount.String(),
+				Denom:  order.OrderAmount.Denom,
+			},
+		},
+		SwapOutput: indexerTypes.Token{
+			Amount: swapRes.Amount.Amount.String(),
+			Denom:  swapRes.Amount.Denom,
+		},
+		TargetDenom: order.OrderTargetDenom,
+		Date: common.OrderDate{
+			Height:    uint64(ctx.BlockHeight()),
+			Timestamp: uint64(ctx.BlockTime().Unix()),
+		},
+	}, []string{order.OwnerAddress})
+	/* End of kwak-indexer node implementation*/
+	/* *************************************************************************** */
+
 	return nil
 }
diff --git a/x/tradeshield/migrations/v6_migrator.go b/x/tradeshield/migrations/v6_migrator.go
new file mode 100644
index 00000000..b8cd4b27
--- /dev/null
+++ b/x/tradeshield/migrations/v6_migrator.go
@@ -0,0 +1,13 @@
+package migrations
+
+import (
+	sdk "github.com/cosmos/cosmos-sdk/types"
+)
+
+func (m Migrator) V6Migration(ctx sdk.Context) error {
+
+	m.keeper.DeleteAllPendingSpotOrder(ctx)
+	m.keeper.DeleteAllPendingPerpetualOrder(ctx)
+
+	return nil
+}
diff --git a/x/tradeshield/module.go b/x/tradeshield/module.go
index 7e3caf32..004e954c 100644
--- a/x/tradeshield/module.go
+++ b/x/tradeshield/module.go
@@ -2,10 +2,11 @@ package tradeshield
 
 import (
 	"context"
-	"cosmossdk.io/core/appmodule"
 	"encoding/json"
 	"fmt"
 
+	"cosmossdk.io/core/appmodule"
+
 	// this line is used by starport scaffolding # 1
 
 	"github.com/grpc-ecosystem/grpc-gateway/runtime"
@@ -124,7 +125,7 @@ func (am AppModule) RegisterServices(cfg module.Configurator) {
 	types.RegisterMsgServer(cfg.MsgServer(), keeper.NewMsgServerImpl(am.keeper))
 	types.RegisterQueryServer(cfg.QueryServer(), am.keeper)
 	m := migrations.NewMigrator(am.keeper)
-	err := cfg.RegisterMigration(types.ModuleName, 4, m.V5Migration)
+	err := cfg.RegisterMigration(types.ModuleName, 5, m.V6Migration)
 	if err != nil {
 		panic(err)
 	}
@@ -151,7 +152,7 @@ func (am AppModule) ExportGenesis(ctx sdk.Context, cdc codec.JSONCodec) json.Raw
 }
 
 // ConsensusVersion is a sequence number for state-breaking change of the module. It should be incremented on each consensus-breaking change introduced by the module. To avoid wrong/empty versions, the initial version should be set to 1
-func (AppModule) ConsensusVersion() uint64 { return 5 }
+func (AppModule) ConsensusVersion() uint64 { return 6 }
 
 // BeginBlock contains the logic that is automatically triggered at the beginning of each block
 func (am AppModule) BeginBlock(_ context.Context) error {
diff --git a/x/tradeshield/types/query.pb.go b/x/tradeshield/types/query.pb.go
index 3483d627..9ee0bd34 100644
--- a/x/tradeshield/types/query.pb.go
+++ b/x/tradeshield/types/query.pb.go
@@ -1029,6 +1029,7 @@ func _Query_PendingSpotOrderForAddress_Handler(srv interface{}, ctx context.Cont
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.tradeshield.Query",
 	HandlerType: (*QueryServer)(nil),
diff --git a/x/tradeshield/types/tx.pb.go b/x/tradeshield/types/tx.pb.go
index 17a04d6a..ff87d15d 100644
--- a/x/tradeshield/types/tx.pb.go
+++ b/x/tradeshield/types/tx.pb.go
@@ -1633,6 +1633,7 @@ func _Msg_ExecuteOrders_Handler(srv interface{}, ctx context.Context, dec func(i
 	return interceptor(ctx, in, info, handler)
 }
 
+var Msg_serviceDesc = _Msg_serviceDesc
 var _Msg_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.tradeshield.Msg",
 	HandlerType: (*MsgServer)(nil),
diff --git a/x/transferhook/types/query.pb.go b/x/transferhook/types/query.pb.go
index 38afb9ad..f15e496a 100644
--- a/x/transferhook/types/query.pb.go
+++ b/x/transferhook/types/query.pb.go
@@ -210,6 +210,7 @@ func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interf
 	return interceptor(ctx, in, info, handler)
 }
 
+var Query_serviceDesc = _Query_serviceDesc
 var _Query_serviceDesc = grpc.ServiceDesc{
 	ServiceName: "elys.transferhook.Query",
 	HandlerType: (*QueryServer)(nil),
